%{	
/*
 * File: gram.y
 * Author: Wei Tong 
 *
 * 	
 *
 *	This file is a BISON rules/actions file. To construct a AST by this file.
 * 	This file can be auto generated by tools in sqlparser/tools and grammars 
 *	in sqlparser/grammar.
 *
 *
 *	IDENTIFICATION
 *		sqlparser/gram.y
 */

#include "./include/parser.h"
#include "scan.yy.c"

/* this is a global variable which is the root of the syntax tree */
st_node *tree_root = (st_node *)0;


/* 
 *	set_content
 *		set the content of each node in the syntax tree 
 */
static inline void 
set_content(st_node **node, int_32 line, char *name, int_32 id, int_32 rule)
{ 
	int namelen = 0;
	(*node)->content->line = line;
	(*node)->content->name = name;
	(*node)->content->id = id;
	(*node)->content->rule = rule;
	(*node)->content->terminate = 0;

	// to initialize the point
	(*node)->content->str_value = 0;
}


/*
 * Each call to yylex must set yylloc to the location of the found token
 * (expressed as a byte offset from the start of the input text).
 * When we parse a token that requires multiple lexer rules to process,
 * this should be done in the first such rule, else yylloc will point
 * into the middle of the token.
 */
//#define SET_YYLLOC()  (*(yylloc) = yytext - yyextra->scanbuf)

/*
 * Advance yylloc by the given number of bytes.
 */
//#define ADVANCE_YYLLOC(delta)  ( *(yylloc) += (delta) )


//#define yyerror(msg)  scanner_yyerror(msg, yyscanner)

%}

%expect 1
//%expect-rr 0

/* 
 * declared token types 
 *	
 * We use only one type to present different types of nodes.
 * The declaration of the structure see parser/include/tree.h
 *
 **/
%union {
	st_node *node_type;
};

%token <node_type> MAX_FUNC
%token <node_type> MIN_FUNC
%token <node_type> SUM_FUNC 

/* Supported Translations Between Types */

%token <node_type> TranslationsTypes
%token <node_type> TRANSLATE_CHK
%token <node_type> TRANSLATE
%token <node_type> ERROR_P 

%token <node_type> QUALIFY
%token <node_type> TD_CharacterSetTypes 
%token <node_type> CASESPECIFIC
%token <node_type> CHARACTER_SET


/* */
%token <node_type> SQL_VBAR_VBAR
%token <node_type> TD_EXIT
%token <node_type> COLLECT 
%token <node_type> SAMPLE 
%token <node_type> TD_BT
%token <node_type> TD_ET
%token <node_type> TD_GROUPING
%token <node_type> TD_SETS
%token <node_type> TD_GRAPHIC
%token <node_type> TD_VARGRAPHIC
%token <node_type> TD_LONG
%token <node_type> TD_FALLBACK
%token <node_type> TD_PROTECTION
%token <node_type> TD_LOG
%token <node_type> TD_CHECKSUM
%token <node_type> TD_FREESPACE
%token <node_type> TD_JOURNAL
%token <node_type> TD_DUAL
%token <node_type> TD_PERCENT
%token <node_type> TD_MERGEBLOCKRATIO
%token <node_type> TD_NAMED

%token <node_type> MULTISET




%type <node_type> td_command
%type <node_type> DataBaseCommand


/* some grammar nodes */
%type <node_type> td_trans_date_time
%type <node_type> OptCasespecific
%type <node_type> relation_expr_opt_alias_list
%type <node_type> CollectStatisticsStmt
%type <node_type> sample_clause
%type <node_type> sample_default
%type <node_type> OptSetMultiset
%type <node_type> ConstGraphic
%type <node_type> CreateSysOption
%type <node_type> CreateSysOptionList
%type <node_type> fallback_option
%type <node_type> log_option
%type <node_type> freespace_option
%type <node_type> journal_option
%type <node_type> paren_func_expr
%type <node_type> interval_day
%type <node_type> interval_hour

//%type <node_type> using_command

//%type <node_type> collect_opt_temp
//%type <node_type> collect_column_list
//%type <node_type> collect_column_el
%type <node_type> columnref_list

//%type <node_type> qualify_clause
//%token <node_type> LATIN_TO_GRAPHIC
//%token <node_type> LATIN_TO_KANJISJIS
//%token <node_type> LATIN_TO_UNICODE
//%token <node_type> KANJI1_KanjiEBCDIC_TO_UNICODE
//%token <node_type> KANJI1_KanjiEUC_TO_UNICODE
//%token <node_type> KANJI1_KANJISJIS_TO_UNICODE
//%token <node_type> KANJI1_SBC_TO_UNICODE
//%token <node_type> KANJISJIS_TO_LATIN
//%token <node_type> KANJISJIS_TO_GRAPHIC
//%token <node_type> KANJISJIS_TO_UNICODE
//%token <node_type> GRAPHIC_TO_LATIN
//%token <node_type> GRAPHIC_TO_KANJISJIS
//%token <node_type> GRAPHIC_TO_UNICODE
//%token <node_type> GRAPHIC_TO_UNICODE_PadSpace
//%token <node_type> UNICODE_TO_LATIN
//%token <node_type> UNICODE_TO_KANJI1_KanjiEBCDIC
//%token <node_type> UNICODE_TO_KANJI1_KanjiEUC
//%token <node_type> UNICODE_TO_KANJI1_KANJISJIS
//%token <node_type> UNICODE_TO_KANJI1_SBC
//%token <node_type> UNICODE_TO_GRAPHIC
//%token <node_type> UNICODE_TO_KANJISJIS
//%token <node_type> UNICODE_TO_UNICODE_Fullwidth
//%token <node_type> UNICODE_TO_UNICODE_Halfwidth
//%token <node_type> UNICODE_TO_UNICODE_FoldSpace
//%token <node_type> UNICODE_TO_GRAPHIC_PadGraphic
//%token <node_type> UNICODE_TO_GRAPHIC_VarGraphic 


%type <node_type> format_clause


%token <node_type> WORK
%token <node_type> INOUT
%token <node_type> CASCADED
%token <node_type> PARTITION
%token <node_type> CONTINUE_P
%token <node_type> LOAD
%token <node_type> STABLE
%token <node_type> LOCATION
%token <node_type> XMLCONCAT
%token <node_type> WHERE
%token <node_type> BOTH
%token <node_type> CHECKPOINT
%token <node_type> IS
%token <node_type> SECOND_P
%token <node_type> IN_P
%token <node_type> SERIALIZABLE
%token <node_type> OUTER_P
%token <node_type> USING
%token <node_type> BEGIN_P
%token <node_type> VARCHAR
%token <node_type> EXCEPT
%token <node_type> DOCUMENT_P
%token <node_type> FULL
%token <node_type> MINUTE_P
%token <node_type> ASC
%token <node_type> UNLOGGED
%token <node_type> DROP
%token <node_type> SYSTEM_P
%token <node_type> TIME
%token <node_type> NULLIF
%token <node_type> INTERSECT
%token <node_type> CURRENT_USER
%token <node_type> TREAT
%token <node_type> INT_P
%token <node_type> NO
%token <node_type> OUT_P
%token <node_type> MONTH_P
%token <node_type> CHARACTERISTICS
%token <node_type> INSTEAD
%token <node_type> DELIMITERS
%token <node_type> NOWAIT
%token <node_type> BETWEEN
%token <node_type> PLANS
%token <node_type> PARTIAL
%token <node_type> STATEMENT
%token <node_type> FAMILY
%token <node_type> TRIM
%token <node_type> NONE
%token <node_type> CHARACTER
%token <node_type> PRECEDING
%token <node_type> FOREIGN
%token <node_type> LIMIT
%token <node_type> NUMERIC
%token <node_type> INSENSITIVE
%token <node_type> ARRAY
%token <node_type> SYSID
%token <node_type> KEY
%token <node_type> VERSION_P
%token <node_type> LC_CTYPE_P
%token <node_type> TRUSTED
%token <node_type> RENAME
%token <node_type> LOCAL
%token <node_type> CALLED
%token <node_type> RETURNS
%token <node_type> FORCE
%token <node_type> OWNED
%token <node_type> NULL_P
%token <node_type> PRIOR
%token <node_type> SOME
%token <node_type> INTERVAL
%token <node_type> FOR
%token <node_type> PROCEDURAL
%token <node_type> TEXT_P
%token <node_type> LOCALTIMESTAMP
%token <node_type> THEN
%token <node_type> NOT
%token <node_type> INNER_P
%token <node_type> NULLS_FIRST
%token <node_type> NOTNULL
%token <node_type> OVERLAY
%token <node_type> CACHE
%token <node_type> DEFAULTS
%token <node_type> VARYING
%token <node_type> UNLISTEN
%token <node_type> WITH
%token <node_type> BEFORE
%token <node_type> OWNER
%token <node_type> YES_P
%token <node_type> CHAIN
%token <node_type> DISABLE_P
%token <node_type> COALESCE
%token <node_type> CURRENT_P
%token <node_type> CURRENT_TIME
%token <node_type> VALIDATOR
%token <node_type> EXTERNAL
%token <node_type> ALWAYS
%token <node_type> REINDEX
%token <node_type> ENCRYPTED
%token <node_type> COPY
%token <node_type> ANALYSE
%token <node_type> OVER
%token <node_type> TABLE
%token <node_type> RELATIVE_P
%token <node_type> DEFERRED
%token <node_type> LEFT
%token <node_type> STORAGE
%token <node_type> LAST_P
%token <node_type> RELEASE
%token <node_type> CLOSE
%token <node_type> SCHEMA
%token <node_type> ATTRIBUTE
%token <node_type> CURRENT_CATALOG
%token <node_type> MATCH
%token <node_type> STRICT_P
%token <node_type> FOLLOWING
%token <node_type> PARSER
%token <node_type> EXTRACT
%token <node_type> RESET
%token <node_type> ALL
%token <node_type> FETCH
%token <node_type> LOCALTIME
%token <node_type> FIRST_P
%token <node_type> SHARE
%token <node_type> VERBOSE
%token <node_type> DELETE_P
%token <node_type> AGGREGATE
%token <node_type> RULE
%token <node_type> INCLUDING
%token <node_type> CURRENT_DATE
%token <node_type> TD_DATE
%token <node_type> DATETIME
%token <node_type> FORMAT
%token <node_type> RETURNING
%token <node_type> DECLARE
%token <node_type> DAY_P
%token <node_type> Op
%token <node_type> SAVEPOINT
%token <node_type> XMLSERIALIZE
%token <node_type> UNBOUNDED
%token <node_type> DELIMITER
%token <node_type> NATIONAL
%token <node_type> XMLELEMENT
%token <node_type> OR
%token <node_type> ON
%token <node_type> LC_COLLATE_P
%token <node_type> OF
%token <node_type> BACKWARD
%token <node_type> FUNCTIONS
%token <node_type> XMLPARSE
%token <node_type> SIMILAR
%token <node_type> INVOKER
%token <node_type> WINDOW
%token <node_type> PASSING
%token <node_type> TRIGGER
%token <node_type> TEMP
%token <node_type> VACUUM
%token <node_type> TRUE_P
%token <node_type> CLUSTER
%token <node_type> CONCURRENTLY
%token <node_type> UNTIL
%token <node_type> COLLATION
%token <node_type> INTO
%token <node_type> ISOLATION
%token <node_type> VALIDATE
%token <node_type> XMLPI
%token <node_type> ZONE
%token <node_type> DISTINCT
%token <node_type> PROCEDURE
%token <node_type> ESCAPE
%token <node_type> UNENCRYPTED
%token <node_type> VIEW
%token <node_type> REPLICA
%token <node_type> HANDLER
%token <node_type> TO
%token <node_type> ACTION
%token <node_type> AUTHORIZATION
%token <node_type> ADMIN
%token <node_type> LABEL
%token <node_type> UNKNOWN
%token <node_type> CONSTRAINTS
%token <node_type> DEFAULT
%token <node_type> SESSION_USER
%token <node_type> PREPARE
%token <node_type> ONLY
%token <node_type> DATA_P
%token <node_type> XML_P
%token <node_type> ORDER
%token <node_type> POSTFIXOP
%token <node_type> PLACING
%token <node_type> SIMPLE
%token <node_type> CLASS
%token <node_type> VOLATILE
%token <node_type> CAST
%token <node_type> ICONST
%token <node_type> INTEGER
%token <node_type> COMMITTED
%token <node_type> CASE
%token <node_type> REPLACE
%token <node_type> CONNECTION
%token <node_type> TYPES_P
%token <node_type> SEARCH
%token <node_type> TEMPORARY
%token <node_type> FORWARD
%token <node_type> COST
%token <node_type> CATALOG_P
%token <node_type> LATERAL_P
%token <node_type> EXCLUDE
%token <node_type> INPUT_P
%token <node_type> XCONST
%token <node_type> ISNULL
%token <node_type> STANDALONE_P
%token <node_type> WITHOUT
%token <node_type> INSERT
%token <node_type> XMLATTRIBUTES
%token <node_type> ASSERTION
%token <node_type> CURSOR
%token <node_type> SYMMETRIC
%token <node_type> TABLES
%token <node_type> TRANSACTION
%token <node_type> FLOAT_P
%token <node_type> OBJECT_P
%token <node_type> UPDATE
%token <node_type> GLOBAL
%token <node_type> DESC
%token <node_type> NOTHING
%token <node_type> BY
%token <node_type> SETOF
%token <node_type> FALSE_P
%token <node_type> WHEN
%token <node_type> STDIN
%token <node_type> XMLFOREST
%token <node_type> FUNCTION
%token <node_type> BINARY
%token <node_type> END_P
%token <node_type> ADD_P
%token <node_type> LEAST
%token <node_type> FREEZE
%token <node_type> ENABLE_P
%token <node_type> SCONST
%token <node_type> REFERENCES
%token <node_type> PRESERVE
%token <node_type> STDOUT
%token <node_type> TRAILING
%token <node_type> CURRENT_TIMESTAMP
%token <node_type> BIGINT
%token <node_type> STRIP_P
%token <node_type> RESTRICT
%token <node_type> INDEXES
%token <node_type> HOUR_P
%token <node_type> IF_P
%token <node_type> INHERIT
%token <node_type> CONSTRAINT
%token <node_type> DEALLOCATE
%token <node_type> SECURITY
%token <node_type> NATURAL
%token <node_type> GRANTED
%token <node_type> UNION
%token <node_type> LEAKPROOF
%token <node_type> HEADER_P
%token <node_type> INDEX
%token <node_type> LANGUAGE
%token <node_type> LEADING
%token <node_type> DATABASE
%token <node_type> CSV
%token <node_type> SEQUENCE
%token <node_type> GRANT
%token <node_type> REAL
%token <node_type> EXCLUDING
%token <node_type> ENCODING
%token <node_type> LARGE_P
%token <node_type> REF
%token <node_type> NULLS_P
%token <node_type> COMMENTS
%token <node_type> OPERATOR
%token <node_type> UNCOMMITTED
%token <node_type> CONVERSION_P
%token <node_type> TEMPLATE
%token <node_type> AFTER
%token <node_type> BOOLEAN_P
//%token <node_type> IDENT
%token <node_type> REVOKE
%token <node_type> NAME_P
%token <node_type> CHECK
%token <node_type> MINVALUE
%token <node_type> WITH_TIME
%token <node_type> OPTION
%token <node_type> POSITION
%token <node_type> SERVER
%token <node_type> IMMUTABLE
%token <node_type> EXCLUSIVE
%token <node_type> HOLD
%token <node_type> YEAR_P
%token <node_type> EXPLAIN
%token <node_type> CONTENT_P
%token <node_type> DEFERRABLE
%token <node_type> NOTIFY
%token <node_type> CURRENT_SCHEMA
%token <node_type> LOCK_P
%token <node_type> SMALLINT
%token <node_type> SET
%token <node_type> PRECISION
%token <node_type> MAXVALUE
%token <node_type> COMMENT
%token <node_type> ANY
%token <node_type> EXTENSION
%token <node_type> TABLESPACE
%token <node_type> SEQUENCES
%token <node_type> AND
%token <node_type> GROUP_P
%token <node_type> ROLLBACK
%token <node_type> EVENT
%token <node_type> GREATEST
%token <node_type> LISTEN
%token <node_type> INLINE_P
%token <node_type> FCONST
%token <node_type> IMPLICIT_P
%token <node_type> JOIN
%token <node_type> OPTIONS
%token <node_type> SNAPSHOT
%token <node_type> COLLATE
%token <node_type> OVERLAPS
%token <node_type> CONFIGURATION
%token <node_type> INITIALLY
%token <node_type> DOUBLE_P
%token <node_type> ALTER
%token <node_type> TRUNCATE
%token <node_type> AT
%token <node_type> AS
%token <node_type> OFFSET
%token <node_type> ASYMMETRIC
%token <node_type> START
%token <node_type> SCROLL
%token <node_type> LIKE
%token <node_type> VARIADIC
%token <node_type> ELSE
%token <node_type> WRITE
%token <node_type> USER
%token <node_type> CREATE
%token <node_type> UMINUS
%token <node_type> XMLROOT
%token <node_type> EXECUTE
%token <node_type> REPEATABLE
%token <node_type> DOMAIN_P
%token <node_type> CURRENT_ROLE
%token <node_type> PREPARED
%token <node_type> DICTIONARY
%token <node_type> TYPE_P
%token <node_type> ENUM_P
%token <node_type> ACCESS
%token <node_type> ABORT_P
%token <node_type> COLON_EQUALS
%token <node_type> WRAPPER
%token <node_type> PARAM
%token <node_type> PRIVILEGES
%token <node_type> ROW
%token <node_type> TIMESTAMP
%token <node_type> OIDS
%token <node_type> BIT
%token <node_type> DEC
%token <node_type> VALUES
%token <node_type> ANALYZE
%token <node_type> RIGHT
%token <node_type> REASSIGN
%token <node_type> INHERITS
%token <node_type> NAMES
%token <node_type> DISCARD
%token <node_type> PASSWORD
%token <node_type> ILIKE
%token <node_type> EACH
%token <node_type> IDENTITY_P
%token <node_type> SESSION
%token <node_type> ALSO
%token <node_type> WHITESPACE_P
%token <node_type> READ
%token <node_type> CASCADE
%token <node_type> RESTART
%token <node_type> ABSOLUTE_P
%token <node_type> COMMIT
%token <node_type> UNIQUE
%token <node_type> MODE
%token <node_type> SHOW
%token <node_type> QUOTE
%token <node_type> NCHAR
%token <node_type> NULLS_LAST
%token <node_type> MOVE
%token <node_type> ROLE
%token <node_type> DECIMAL_P
%token <node_type> VALUE_P
%token <node_type> NEXT
%token <node_type> LEVEL
%token <node_type> HAVING
%token <node_type> DEFINER
%token <node_type> XMLEXISTS
%token <node_type> ROWS
%token <node_type> EXISTS
%token <node_type> BCONST
%token <node_type> RECURSIVE
%token <node_type> ASSIGNMENT
%token <node_type> VALID
%token <node_type> RANGE
%token <node_type> FROM
%token <node_type> DO
%token <node_type> PRIMARY
%token <node_type> INCREMENT
%token <node_type> IMMEDIATE
%token <node_type> MAPPING
%token <node_type> SUBSTRING
%token <node_type> CHAR_P
%token <node_type> OFF
%token <node_type> RECHECK
%token <node_type> SELECT
%token <node_type> CYCLE
%token <node_type> COLUMN
%token <node_type> STATISTICS
%token <node_type> CROSS

%type <node_type> NotifyStmt
%type <node_type> opt_instead
%type <node_type> ViewStmt
%type <node_type> key_match
%type <node_type> DropRuleStmt
%type <node_type> attrs
%type <node_type> row
%type <node_type> overlay_placing
%type <node_type> subquery_Op
%type <node_type> SimpleTypename
%type <node_type> opt_asymmetric
%type <node_type> opt_foreign_server_version
%type <node_type> cast_context
%type <node_type> alter_extension_opt_item
%type <node_type> opt_or_replace
%type <node_type> index_params
%type <node_type> TransactionStmt
%type <node_type> c_expr
%type <node_type> createdb_opt_list
%type <node_type> def_list
%type <node_type> position_list
%type <node_type> into_clause
%type <node_type> opt_validator
%type <node_type> DeclareCursorStmt
%type <node_type> set_clause_list
%type <node_type> VariableSetStmt
%type <node_type> AlterFdwStmt
%type <node_type> transaction_mode_item
%type <node_type> CreateSchemaStmt
%type <node_type> AlterForeignServerStmt
%type <node_type> privilege_list
%type <node_type> copy_file_name
%type <node_type> CreateOpClassStmt
%type <node_type> event_trigger_when_item
%type <node_type> xml_attribute_list
%type <node_type> AlterOptRoleList
%type <node_type> alter_generic_option_list
%type <node_type> cte_list
%type <node_type> case_default
%type <node_type> stmt
%type <node_type> cursor_options
%type <node_type> using_clause
%type <node_type> opt_distinct
%type <node_type> cursor_name
%type <node_type> when_clause_list
%type <node_type> event_trigger_value_list
%type <node_type> indirection_el
%type <node_type> BitWithoutLength
%type <node_type> SetResetClause
%type <node_type> columnOptions
%type <node_type> indirection
%type <node_type> opt_grant_grant_option
%type <node_type> AlterDatabaseStmt
%type <node_type> copy_opt_list
%type <node_type> RemoveAggrStmt
%type <node_type> alterdb_opt_item
%type <node_type> DropdbStmt
%type <node_type> OptInherit
%type <node_type> transaction_mode_list_or_empty
%type <node_type> cluster_index_specification
%type <node_type> ForeignTableElementList
%type <node_type> opt_hold
%type <node_type> DropOwnedStmt
%type <node_type> sub_type
%type <node_type> create_as_target
%type <node_type> table_func_column
%type <node_type> DefACLOptionList
%type <node_type> xmlexists_argument
%type <node_type> qualified_name
%type <node_type> enable_trigger
%type <node_type> when_clause
%type <node_type> notify_payload
%type <node_type> AlterDomainStmt
%type <node_type> TableElement
%type <node_type> CreateDomainStmt
%type <node_type> opt_binary
%type <node_type> join_type
%type <node_type> opt_oids
%type <node_type> TableFuncElement
%type <node_type> CreateRoleStmt
%type <node_type> CopyStmt
%type <node_type> func_as
%type <node_type> select_with_parens
%type <node_type> select_clause
%type <node_type> having_clause
%type <node_type> ColQualList
%type <node_type> AlterEventTrigStmt
%type <node_type> DefACLOption
%type <node_type> fdw_option
%type <node_type> OptSeqOptList
%type <node_type> opt_name_list
%type <node_type> ConstTypename
%type <node_type> alter_column_default
%type <node_type> ExclusionConstraintElem
%type <node_type> var_list
%type <node_type> CreateTableSpaceStmt
%type <node_type> opt_with_clause
%type <node_type> RenameStmt
%type <node_type> func_args_list
%type <node_type> OnCommitOption
%type <node_type> interval_second
%type <node_type> func_name
%type <node_type> arg_class
%type <node_type> ColId_or_Sconst
%type <node_type> from_clause
%type <node_type> type_function_name
%type <node_type> lock_type
%type <node_type> select_limit
%type <node_type> opt_provider
%type <node_type> constraints_set_list
%type <node_type> opt_for_locking_clause
%type <node_type> DropTableSpaceStmt
%type <node_type> reloptions
%type <node_type> SeqOptElem
%type <node_type> AlterSeqStmt
%type <node_type> opt_granted_by
%type <node_type> array_expr
%type <node_type> opt_from_in
%type <node_type> Iconst
%type <node_type> common_func_opt_item
%type <node_type> func_arg_with_default
%type <node_type> TriggerActionTime
%type <node_type> privileges
%type <node_type> AlterRoleSetStmt
%type <node_type> opt_table
%type <node_type> where_clause
%type <node_type> TableLikeClause
%type <node_type> OptForeignTableElementList
%type <node_type> OptTableSpaceOwner
%type <node_type> func_alias_clause
%type <node_type> opt_with_data
%type <node_type> opt_index_definition
%type <node_type> sort_clause
%type <node_type> createfunc_opt_list
%type <node_type> opt_definition
%type <node_type> key_update
%type <node_type> CreateTrigStmt
%type <node_type> substr_list
%type <node_type> CreateFdwStmt
%type <node_type> where_or_current_clause
%type <node_type> zone_value
%type <node_type> TriggerOneEvent
%type <node_type> opt_set_data
%type <node_type> RevokeStmt
%type <node_type> opt_asc_desc
%type <node_type> VariableShowStmt
%type <node_type> privilege_target
%type <node_type> copy_options
%type <node_type> DropUserStmt
%type <node_type> RuleActionList
%type <node_type> CreateOptRoleElem
%type <node_type> AlterRoleStmt
%type <node_type> opt_full
%type <node_type> AlterDatabaseSetStmt
%type <node_type> CreateFunctionStmt
%type <node_type> from_in
%type <node_type> RevokeRoleStmt
%type <node_type> opt_concurrently
%type <node_type> TableElementList
%type <node_type> offset_clause
%type <node_type> opt_partition_clause
%type <node_type> name
%type <node_type> opt_in_database
%type <node_type> select_limit_value
%type <node_type> TriggerForOptEach
%type <node_type> generic_option_elem
%type <node_type> ctext_expr
%type <node_type> opt_trusted
%type <node_type> select_offset_value2
%type <node_type> copy_generic_opt_arg_list_item
%type <node_type> expr_list
%type <node_type> AlterTSDictionaryStmt
%type <node_type> DefACLAction
%type <node_type> DeallocateStmt
%type <node_type> copy_opt_item
%type <node_type> type_func_name_keyword
%type <node_type> event
%type <node_type> opclass_purpose
%type <node_type> explain_option_list
%type <node_type> opt_with
%type <node_type> AlterForeignTableStmt
%type <node_type> alter_using
%type <node_type> col_name_keyword
%type <node_type> columnref
%type <node_type> RoleId
%type <node_type> DropCastStmt
%type <node_type> NumericOnly_list
%type <node_type> window_clause
%type <node_type> ClusterStmt
%type <node_type> Typename
%type <node_type> add_drop
%type <node_type> old_aggr_definition
%type <node_type> ExclusionConstraintList
%type <node_type> opt_fdw_options
%type <node_type> ColId
%type <node_type> OptSchemaEltList
%type <node_type> Numeric
%type <node_type> CharacterWithLength
%type <node_type> function_with_argtypes_list
%type <node_type> index_elem
%type <node_type> definition
%type <node_type> SeqOptList
%type <node_type> enum_val_list
%type <node_type> opt_select_limit
%type <node_type> qualified_name_list
%type <node_type> alter_table_cmds
%type <node_type> DropOpFamilyStmt
%type <node_type> RuleActionMulti
%type <node_type> aggr_args
%type <node_type> def_arg
%type <node_type> explain_option_elem
%type <node_type> func_arg
%type <node_type> opt_inline_handler
%type <node_type> opt_no_inherit
%type <node_type> opt_procedural
%type <node_type> insert_rest
%type <node_type> fdw_options
%type <node_type> DeleteStmt
%type <node_type> TriggerForType
%type <node_type> DropRoleStmt
%type <node_type> generic_option_arg
%type <node_type> FetchStmt
%type <node_type> opt_class
%type <node_type> constraints_set_mode
%type <node_type> any_name_list
%type <node_type> access_method
%type <node_type> TableConstraint
%type <node_type> RuleActionStmt
%type <node_type> ConstCharacter
%type <node_type> join_qual
%type <node_type> LockStmt
%type <node_type> TableFuncElementList
%type <node_type> target_el
%type <node_type> validator_clause
%type <node_type> function_with_argtypes
%type <node_type> opt_float
%type <node_type> alias_clause
%type <node_type> func_args
%type <node_type> case_expr
%type <node_type> file_name
%type <node_type> for_locking_items
%type <node_type> multiple_set_clause
%type <node_type> opt_force
%type <node_type> group_clause
%type <node_type> opt_alias_clause
%type <node_type> createfunc_opt_item
%type <node_type> opt_recheck
%type <node_type> TypedTableElement
%type <node_type> OptTableFuncElementList
%type <node_type> CreatePLangStmt
%type <node_type> AlterCompositeTypeStmt
%type <node_type> AlterEnumStmt
%type <node_type> func_type
%type <node_type> copy_delimiter
%type <node_type> CheckPointStmt
%type <node_type> opt_all
%type <node_type> key_actions
%type <node_type> CreateOpFamilyStmt
%type <node_type> opt_column_list
%type <node_type> ListenStmt
%type <node_type> OptConstrFromTable
%type <node_type> window_specification
%type <node_type> values_clause
%type <node_type> BitWithLength
%type <node_type> from_list
%type <node_type> AlterDefaultPrivilegesStmt
%type <node_type> Character
%type <node_type> RemoveOperStmt
%type <node_type> AlterObjectSchemaStmt
%type <node_type> sortby_list
%type <node_type> ColConstraintElem
%type <node_type> reindex_type
%type <node_type> CreateSeqStmt
%type <node_type> CreateCastStmt
%type <node_type> auth_ident
%type <node_type> substr_from
%type <node_type> unreserved_keyword
%type <node_type> document_or_content
%type <node_type> Bit
%type <node_type> alter_generic_options
%type <node_type> opt_nulls_order
%type <node_type> opt_default
%type <node_type> first_or_next
%type <node_type> old_aggr_elem
%type <node_type> opt_collate_clause
%type <node_type> TruncateStmt
%type <node_type> alterfunc_opt_list
%type <node_type> attr_name
%type <node_type> alter_extension_opt_list
%type <node_type> PrepareStmt
%type <node_type> oper_argtypes
%type <node_type> DiscardStmt
%type <node_type> CreateStmt
%type <node_type> security_label_type
%type <node_type> all_Op
%type <node_type> func_arg_expr
%type <node_type> CreateConversionStmt
%type <node_type> func_args_with_defaults
%type <node_type> AlterUserMappingStmt
%type <node_type> TableLikeOptionList
%type <node_type> ExclusionWhereClause
%type <node_type> ConstraintsSetStmt
%type <node_type> opt_grant_admin_option
%type <node_type> opt_type_modifiers
%type <node_type> ConstBit
%type <node_type> CreateEventTrigStmt
%type <node_type> set_target_list
%type <node_type> overlay_list
%type <node_type> func_table
%type <node_type> CreateUserMappingStmt
%type <node_type> AlterFunctionStmt
%type <node_type> opt_as
%type <node_type> single_set_clause
%type <node_type> func_expr
%type <node_type> opclass_drop
%type <node_type> AexprConst
%type <node_type> xml_attributes
%type <node_type> ReassignOwnedStmt
%type <node_type> access_method_clause
%type <node_type> copy_generic_opt_list
%type <node_type> columnList
%type <node_type> TypedTableElementList
%type <node_type> opt_varying
%type <node_type> a_expr
%type <node_type> b_expr
%type <node_type> alter_generic_option_elem
%type <node_type> with_clause
%type <node_type> PreparableStmt
%type <node_type> def_elem
%type <node_type> AlterOwnerStmt
%type <node_type> CreateForeignServerStmt
%type <node_type> database_name
%type <node_type> CreateGroupStmt
%type <node_type> opt_restart_seqs
%type <node_type> opt_select_fetch_first_value
%type <node_type> row_or_rows
%type <node_type> opt_array_bounds
%type <node_type> opt_indirection
%type <node_type> AlterOpFamilyStmt
%type <node_type> ConstraintAttr
%type <node_type> columnElem
%type <node_type> opt_index_name
%type <node_type> stmtblock
%type <node_type> func_return
%type <node_type> create_generic_options
%type <node_type> SecLabelStmt
%type <node_type> generic_option_name
%type <node_type> xml_whitespace_option
%type <node_type> var_name
%type <node_type> privilege
%type <node_type> table_ref
%type <node_type> extract_list
%type <node_type> old_aggr_list
%type <node_type> CommentStmt
%type <node_type> grantee_list
%type <node_type> ConstraintAttributeSpec
%type <node_type> over_clause
%type <node_type> frame_bound
%type <node_type> key_delete
%type <node_type> key_action
%type <node_type> relation_expr_opt_alias
%type <node_type> join_outer
%type <node_type> set_clause
%type <node_type> DropTrigStmt
%type <node_type> AlterExtensionContentsStmt
%type <node_type> ConstDatetime
%type <node_type> opclass_item
%type <node_type> reloption_list
%type <node_type> opt_transaction
%type <node_type> xml_root_version
%type <node_type> extract_arg
%type <node_type> any_operator
%type <node_type> sortby
%type <node_type> opt_enum_val_list
%type <node_type> trim_list
%type <node_type> substr_for
%type <node_type> opt_sort_clause
%type <node_type> limit_clause
%type <node_type> CharacterWithoutLength
%type <node_type> vacuum_option_elem
%type <node_type> stmtmulti
%type <node_type> alter_table_cmd
%type <node_type> in_expr
%type <node_type> index_name
%type <node_type> AlterUserSetStmt
%type <node_type> opt_type
%type <node_type> OptTypedTableElementList
%type <node_type> CreateAsStmt
%type <node_type> DropUserMappingStmt
%type <node_type> reserved_keyword
%type <node_type> set_rest
%type <node_type> LoadStmt
%type <node_type> explain_option_arg
%type <node_type> DropGroupStmt
%type <node_type> opt_check_option
%type <node_type> TriggerEvents
%type <node_type> grantee
%type <node_type> any_name
%type <node_type> TriggerForSpec
%type <node_type> MathOp
%type <node_type> OptTableElementList
%type <node_type> ColConstraint
%type <node_type> TriggerWhen
%type <node_type> ExplainStmt
%type <node_type> opt_verbose
%type <node_type> vacuum_option_list
%type <node_type> defacl_privilege_target
%type <node_type> AlterTableStmt
%type <node_type> opt_encoding
%type <node_type> CreateExtensionStmt
%type <node_type> type_list
%type <node_type> handler_name
%type <node_type> CreateForeignTableStmt
%type <node_type> opt_nowait
%type <node_type> common_table_expr
%type <node_type> opt_using
%type <node_type> OptSchemaName
%type <node_type> opt_drop_behavior
%type <node_type> xml_attribute_el
%type <node_type> copy_from
%type <node_type> DefineStmt
%type <node_type> CreatedbStmt
%type <node_type> set_rest_more
%type <node_type> SignedIconst
%type <node_type> OptWith
%type <node_type> alter_type_cmds
%type <node_type> insert_column_list
%type <node_type> schema_stmt
%type <node_type> frame_extent
%type <node_type> AnalyzeStmt
%type <node_type> GrantStmt
%type <node_type> table_func_column_list
%type <node_type> opt_reloptions
%type <node_type> character
%type <node_type> CreateAssertStmt
%type <node_type> OptTempTableName
%type <node_type> opt_freeze
%type <node_type> func_args_with_defaults_list
%type <node_type> OptConsTableSpace
%type <node_type> AlterTSConfigurationStmt
%type <node_type> RemoveFuncStmt
%type <node_type> explain_option_name
%type <node_type> createdb_opt_item
%type <node_type> window_definition
%type <node_type> opclass_item_list
%type <node_type> NumericOnly
%type <node_type> array_expr_list
%type <node_type> opt_by
%type <node_type> param_name
%type <node_type> joined_table
%type <node_type> TableLikeOption
%type <node_type> create_extension_opt_item
%type <node_type> fetch_args
%type <node_type> select_no_parens
%type <node_type> locked_rels_list
%type <node_type> foreign_server_version
%type <node_type> UpdateStmt
%type <node_type> opt_boolean_or_string
%type <node_type> TriggerFuncArg
%type <node_type> opt_unique
%type <node_type> simple_select
%type <node_type> window_definition_list
%type <node_type> transaction_mode_list
%type <node_type> ConstraintElem
%type <node_type> CreateUserStmt
%type <node_type> TriggerFuncArgs
%type <node_type> reloption_elem
%type <node_type> case_arg
%type <node_type> set_target
%type <node_type> VacuumStmt
%type <node_type> AlterGroupStmt
%type <node_type> prep_type_clause
%type <node_type> analyze_keyword
%type <node_type> OptRoleList
%type <node_type> comment_text
%type <node_type> AlterOptRoleElem
%type <node_type> Sconst
%type <node_type> opclass_drop_list
%type <node_type> DropPLangStmt
%type <node_type> copy_generic_opt_elem
%type <node_type> DoStmt
%type <node_type> create_extension_opt_list
%type <node_type> ColLabel
%type <node_type> DropStmt
%type <node_type> generic_option_list
%type <node_type> OptTableSpace
%type <node_type> GrantRoleStmt
%type <node_type> DropFdwStmt
%type <node_type> IndexStmt
%type <node_type> for_locking_clause
%type <node_type> comment_type
%type <node_type> func_arg_list
%type <node_type> iso_level
%type <node_type> ctext_row
%type <node_type> event_trigger_when_list
%type <node_type> opt_interval
%type <node_type> target_list
%type <node_type> security_label
%type <node_type> VariableResetStmt
%type <node_type> ConstInterval
%type <node_type> ReindexStmt
%type <node_type> GenericType
%type <node_type> opt_opfamily
%type <node_type> FunctionSetResetClause
%type <node_type> ClosePortalStmt
%type <node_type> AlterUserStmt
%type <node_type> ExecuteStmt
%type <node_type> execute_param_clause
%type <node_type> copy_generic_opt_arg
%type <node_type> AlterExtensionStmt
%type <node_type> alter_type_cmd
%type <node_type> opt_equal
%type <node_type> opt_collate
%type <node_type> insert_column_item
%type <node_type> dostmt_opt_list
%type <node_type> ConstraintAttributeElem
%type <node_type> relation_expr_list
%type <node_type> RuleActionStmtOrEmpty
%type <node_type> qual_Op
%type <node_type> relation_expr
%type <node_type> alterdb_opt_list
%type <node_type> copy_generic_opt_arg_list
%type <node_type> opt_lock
%type <node_type> ExplainableStmt
%type <node_type> opt_existing_window_name
%type <node_type> columnDef
%type <node_type> opt_timezone
%type <node_type> SelectStmt
%type <node_type> opt_column
%type <node_type> ForeignTableElement
%type <node_type> opt_charset
%type <node_type> opt_frame_clause
%type <node_type> ExistingIndex
%type <node_type> for_locking_item
%type <node_type> select_offset_value
%type <node_type> returning_clause
%type <node_type> RuleStmt
%type <node_type> var_value
%type <node_type> qual_all_Op
%type <node_type> drop_type
%type <node_type> name_list
%type <node_type> opt_if_exists
%type <node_type> opt_restrict
%type <node_type> DropOpClassStmt
%type <node_type> ctext_expr_list
%type <node_type> InsertStmt
%type <node_type> dostmt_opt_item
%type <node_type> opt_xml_root_standalone
%type <node_type> OptTemp
%type <node_type> DropForeignServerStmt
%type <node_type> DropAssertStmt
%type <node_type> UnlistenStmt
%type <node_type> IDENT

%token <node_type> SQL_DOT_DOT
%token <node_type> SQL_COLON_EQUALS
%token <node_type> SQL_TYPECAST
%token <node_type> SQL_GE
%token <node_type> SQL_LE
%token <node_type> SQL_NE
%token <node_type> SQL_AMPERSAND
%token <node_type> SQL_DOT
%token <node_type> SQL_EQ
%token <node_type> SQL_LT
%token <node_type> SQL_GT
%token <node_type> SQL_PLUS
%token <node_type> SQL_MINUS
%token <node_type> SQL_MUL
%token <node_type> SQL_DIV
%token <node_type> SQL_MOD
%token <node_type> SQL_POWER
%token <node_type> SQL_LP
%token <node_type> SQL_RP
%token <node_type> SQL_LB
%token <node_type> SQL_RB
%token <node_type> SQL_LC
%token <node_type> SQL_RC
%token <node_type> SQL_DOLLAR
%token <node_type> SQL_COMMA
%token <node_type> SQL_SEMI
%token <node_type> SQL_COLON

%token <node_type> SQL_SH_PREC
%type <node_type> SQL_SH_IDENTIFIER

%token <node_type> SQL_SQL_IDENTIFIER



/* Precedence: lowest to highest */
%nonassoc	SET				/* see relation_expr_opt_alias */
%left		UNION EXCEPT
%left		INTERSECT
%left		OR
%left		AND
%right		NOT
%right		SQL_EQ 
%nonassoc 	SQL_LT SQL_GT SQL_LE SQL_GE SQL_NE
%nonassoc	LIKE ILIKE SIMILAR
%nonassoc	ESCAPE
%nonassoc	OVERLAPS
%nonassoc	BETWEEN
%nonassoc	IN_P
%left		POSTFIXOP		/* dummy for postfix Op rules */

%nonassoc 	SQL_UMINUS
%left 		CASESPECIFIC

/*
 * To support target_el without AS, we must give IDENT an explicit priority
 * between POSTFIXOP and Op.  We can safely assign the same priority to
 * various unreserved keywords as needed to resolve ambiguities (this can't
 * have any bad effects since obviously the keywords will still behave the
 * same as if they weren't keywords).  We need to do this for PARTITION,
 * RANGE, ROWS to support opt_existing_window_name; and for RANGE, ROWS
 * so that they can follow a_expr without creating postfix-operator problems;
 * and for NULL so that it can follow b_expr in ColQualList without creating
 * postfix-operator problems.
 *
 * The frame_bound productions UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING
 * are even messier: since UNBOUNDED is an unreserved keyword (per spec!),
 * there is no principled way to distinguish these from the productions
 * a_expr PRECEDING/FOLLOWING.  We hack this up by giving UNBOUNDED slightly
 * lower precedence than PRECEDING and FOLLOWING.  At present this doesn't
 * appear to cause UNBOUNDED to be treated differently from other unreserved
 * keywords anywhere else in the grammar, but it's definitely risky.  We can
 * blame any funny behavior of UNBOUNDED on the SQL standard, though.
 */


%nonassoc	UNBOUNDED		/* ideally should have same precedence as IDENT */
%nonassoc	SQL_SQL_IDENTIFIER NULL_P PARTITION RANGE ROWS PRECEDING FOLLOWING
%left		Op OPERATOR		/* multi-character ops and user-defined operators */
%nonassoc	NOTNULL
%nonassoc	ISNULL
%nonassoc	IS				/* sets precedence for IS NULL, etc */

%left		SQL_PLUS SQL_MINUS
%left		SQL_MUL SQL_DIV SQL_MOD
%left		SQL_POWER



/* Unary Operators */
%left		AT				/* sets precedence for AT TIME ZONE */
%left		COLLATE
%right		UMINUS
%left 		SQL_LC SQL_RC
%left		SQL_LB SQL_RB
%left		SQL_LP SQL_RP
%left		SQL_TYPECAST
%left		SQL_DOT
%right 		SQL_DOLLAR


/*
 * These might seem to be low-precedence, but actually they are not part
 * of the arithmetic hierarchy at all in their use as JOIN operators.
 * We make them high-precedence to support their use as function names.
 * They wouldn't be given a precedence at all, were it not that we need
 * left-associativity among the JOIN rules themselves.
 */
%left		JOIN CROSS LEFT FULL RIGHT INNER_P NATURAL
/* kluge to keep xml_whitespace_option from causing shift/reduce conflicts */
%right		PRESERVE STRIP_P

/*
	Indentation of grammar rules:

	rule
		: rule1_a rule1_b rule1_c {
        	code
        }
        | rule2_a rule2_b {
			code
		}
        ;

*/

%%

stmtblock
	: stmtmulti {
		JOUT("SYN: stmtblock -> stmtmulti \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmtblock", ID_STMTBLOCK, R_STMTBLOCK_1);
		tree_root = $$;
	}
	;


// JOE TODO3
td_command
	: DataBaseCommand {
		JOUT("SYN: td_command -> DataBaseCommand \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "td_command", ID_TD_COMMAND, R_TD_COMMAND_1);
		tree_root = $$;
	}
	;

// JOE TODO3
DataBaseCommand
	: DATABASE IDENT {
		JOUT("SYN: DataBaseCommand -> DATABASE IDENT \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DataBaseCommand", ID_DATABASECOMMAND, R_DATABASECOMMAND_1);
		tree_root = $$;
	}
	;

IDENT
	: SQL_SQL_IDENTIFIER {
		JOUT("SYN: IDENT -> SQL_SQL_IDENTIFIER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "IDENT", ID_IDENT, R_IDENT_1);
	}
	| SQL_SH_IDENTIFIER {
		JOUT("SYN: IDENT -> SQL_SH_IDENTIFIER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "IDENT", ID_IDENT, R_IDENT_2);
	}
	;

SQL_SH_IDENTIFIER
	: SQL_DOLLAR SQL_LC SQL_SQL_IDENTIFIER SQL_RC {	
		// TODO3
		JOUT("SYN: SQL_SH_IDENTIFIER -> SQL_DOLLAR SQL_LC SQL_SQL_IDENTIFIER SQL_RC \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "SQL_SH_IDENTIFIER", -1, -2);
	}
	| SQL_DOLLAR SQL_SQL_IDENTIFIER {
		JOUT("SYN: SQL_SH_IDENTIFIER -> SQL_DOLLAR SQL_SQL_IDENTIFIER\n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SQL_SH_IDENTIFIER", -1, -2);
	}
	;

NotifyStmt
	: NOTIFY ColId notify_payload {
		JOUT("SYN: NotifyStmt -> NOTIFY_ColId_notify_payload \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "NotifyStmt", ID_NOTIFYSTMT, R_NOTIFYSTMT_1);
	}
	;

CollectStatisticsStmt
	: COLLECT STATISTICS ON relation_expr COLUMN columnref {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> COLUMN columnref \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_1);
	}
	| COLLECT STATISTICS ON relation_expr COLUMN SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> COLUMN SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_2);
	}
	| COLLECT STATISTICS ON relation_expr INDEX index_name {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> INDEX index_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_3);
	}
	| COLLECT STATISTICS ON relation_expr INDEX SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> INDEX SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_4);
	}
	| COLLECT STATISTICS ON TEMPORARY relation_expr COLUMN columnref {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> COLUMN columnref \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_5);
	}
	| COLLECT STATISTICS ON TEMPORARY relation_expr COLUMN SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> COLUMN SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_6);
	}
	| COLLECT STATISTICS ON TEMPORARY relation_expr INDEX index_name {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> INDEX index_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_7);
	}
	| COLLECT STATISTICS ON TEMPORARY relation_expr INDEX SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> INDEX SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_8);
	}
	| COLLECT STATISTICS relation_expr COLUMN columnref {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> COLUMN columnref \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_9);
	}
	| COLLECT STATISTICS relation_expr COLUMN SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> COLUMN SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_10);
	}
	| COLLECT STATISTICS relation_expr INDEX index_name {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> INDEX index_name \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_11);
	}
	| COLLECT STATISTICS relation_expr INDEX SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> INDEX SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_12);
	}
	| COLLECT STATISTICS TEMPORARY relation_expr COLUMN columnref {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> TEMPORARY COLUMN columnref \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_13);
	}
	| COLLECT STATISTICS TEMPORARY relation_expr COLUMN SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> TEMPORARY COLUMN SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_14);
	}
	| COLLECT STATISTICS TEMPORARY relation_expr INDEX index_name {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> TEMPORARY INDEX index_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_15);
	}
	| COLLECT STATISTICS TEMPORARY relation_expr INDEX SQL_LP columnref_list SQL_RP {
		// todo3
		JOUT("SYN: CollectStatisticsStmt -> TEMPORARY INDEX SQL_LP columnref_list SQL_RP \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CollectStatisticsStmt", ID_COLLECTSTATISTICSSTMT, R_COLLECTSTATISTICSSTMT_16);
	};

columnref_list
	: columnref {
		// todo3
		JOUT("SYN: columnref_list -> columnref \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "columnref_list", ID_COLUMNREF_LIST, R_COLUMNREF_LIST_1);
	}
	| columnref_list SQL_COMMA columnref {
		// todo3
		JOUT("SYN: columnref_list -> columnref_list SQL_COMMA columnref \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "columnref_list", ID_COLUMNREF_LIST, R_COLUMNREF_LIST_2);
	};

opt_instead
	: INSTEAD {
		JOUT("SYN: opt_instead -> INSTEAD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_instead", ID_OPT_INSTEAD, R_OPT_INSTEAD_1);
	}
	| ALSO {
		JOUT("SYN: opt_instead -> ALSO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_instead", ID_OPT_INSTEAD, R_OPT_INSTEAD_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_instead -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_instead", ID_OPT_INSTEAD, R_OPT_INSTEAD__NULL);
	}
	;

ViewStmt
	: CREATE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option {
		JOUT("SYN: ViewStmt -> CREATE_OptTemp_VIEW_qualified_name_opt_column_list_opt_reloptions_AS_SelectStmt_opt_check_option \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "ViewStmt", ID_VIEWSTMT, R_VIEWSTMT_1);
	}
	| CREATE OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option {
		JOUT("SYN: ViewStmt -> CREATE_OR_REPLACE_OptTemp_VIEW_qualified_name_opt_column_list_opt_reloptions_AS_SelectStmt_opt_check_option \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "ViewStmt", ID_VIEWSTMT, R_VIEWSTMT_2);
	}
	/*
	| REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option {

	}
	*/
	;

key_match
	: MATCH FULL {
		JOUT("SYN: key_match -> MATCH_FULL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_match", ID_KEY_MATCH, R_KEY_MATCH_1);
	}
	| MATCH PARTIAL {
		JOUT("SYN: key_match -> MATCH_PARTIAL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_match", ID_KEY_MATCH, R_KEY_MATCH_2);
	}
	| MATCH SIMPLE {
		JOUT("SYN: key_match -> MATCH_SIMPLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_match", ID_KEY_MATCH, R_KEY_MATCH_3);
	}
	| /* empty */ {
		JOUT("SYN: key_match -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "key_match", ID_KEY_MATCH, R_KEY_MATCH__NULL);
	}
	;

DropRuleStmt
	: DROP RULE name ON any_name opt_drop_behavior {
		JOUT("SYN: DropRuleStmt -> DROP_RULE_name_ON_any_name_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DropRuleStmt", ID_DROPRULESTMT, R_DROPRULESTMT_1);
	}
	| DROP RULE IF_P EXISTS name ON any_name opt_drop_behavior {
		JOUT("SYN: DropRuleStmt -> DROP_RULE_IF_P_EXISTS_name_ON_any_name_opt_drop_behavior \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "DropRuleStmt", ID_DROPRULESTMT, R_DROPRULESTMT_2);
	}
	;

attrs
	: SQL_DOT attr_name {
		JOUT("SYN: attrs -> SQL_DOT_attr_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "attrs", ID_ATTRS, R_ATTRS_1);
	}
	| attrs SQL_DOT attr_name {
		JOUT("SYN: attrs -> attrs_SQL_DOT_attr_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "attrs", ID_ATTRS, R_ATTRS_2);
	}
	;

row
	: ROW SQL_LP expr_list SQL_RP {
		JOUT("SYN: row -> ROW_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "row", ID_ROW, R_ROW_1);
	}
	| ROW SQL_LP SQL_RP {
		JOUT("SYN: row -> ROW_SQL_LP_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "row", ID_ROW, R_ROW_2);
	}
	| SQL_LP expr_list SQL_COMMA a_expr SQL_RP {
		JOUT("SYN: row -> SQL_LP_expr_list_SQL_COMMA_a_expr_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "row", ID_ROW, R_ROW_3);
	}
	;

overlay_placing
	: PLACING a_expr {
		JOUT("SYN: overlay_placing -> PLACING_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "overlay_placing", ID_OVERLAY_PLACING, R_OVERLAY_PLACING_1);
	}
	;

subquery_Op
	: all_Op {
		JOUT("SYN: subquery_Op -> all_Op \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "subquery_Op", ID_SUBQUERY_OP, R_SUBQUERY_OP_1);
	}
	| OPERATOR SQL_LP any_operator SQL_RP {
		JOUT("SYN: subquery_Op -> OPERATOR_SQL_LP_any_operator_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "subquery_Op", ID_SUBQUERY_OP, R_SUBQUERY_OP_2);
	}
	| LIKE {
		JOUT("SYN: subquery_Op -> LIKE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "subquery_Op", ID_SUBQUERY_OP, R_SUBQUERY_OP_3);
	}
	| NOT LIKE {
		JOUT("SYN: subquery_Op -> NOT_LIKE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "subquery_Op", ID_SUBQUERY_OP, R_SUBQUERY_OP_4);
	}
	| ILIKE {
		JOUT("SYN: subquery_Op -> ILIKE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "subquery_Op", ID_SUBQUERY_OP, R_SUBQUERY_OP_5);
	}
	| NOT ILIKE {
		JOUT("SYN: subquery_Op -> NOT_ILIKE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "subquery_Op", ID_SUBQUERY_OP, R_SUBQUERY_OP_6);
	}
	;

SimpleTypename
	: GenericType {
		JOUT("SYN: SimpleTypename -> GenericType \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SimpleTypename", ID_SIMPLETYPENAME, R_SIMPLETYPENAME_1);
	}
	| Numeric {
		JOUT("SYN: SimpleTypename -> Numeric \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SimpleTypename", ID_SIMPLETYPENAME, R_SIMPLETYPENAME_2);
	}
	| Bit {
		JOUT("SYN: SimpleTypename -> Bit \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SimpleTypename", ID_SIMPLETYPENAME, R_SIMPLETYPENAME_3);
	}
	| Character {
		JOUT("SYN: SimpleTypename -> Character \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SimpleTypename", ID_SIMPLETYPENAME, R_SIMPLETYPENAME_4);
	}
	| ConstDatetime {
		JOUT("SYN: SimpleTypename -> ConstDatetime \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SimpleTypename", ID_SIMPLETYPENAME, R_SIMPLETYPENAME_5);
	}
	| ConstInterval opt_interval {
		JOUT("SYN: SimpleTypename -> ConstInterval_opt_interval \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SimpleTypename", ID_SIMPLETYPENAME, R_SIMPLETYPENAME_6);
	}
	| ConstInterval SQL_LP Iconst SQL_RP opt_interval {
		JOUT("SYN: SimpleTypename -> ConstInterval_SQL_LP_Iconst_SQL_RP_opt_interval \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "SimpleTypename", ID_SIMPLETYPENAME, R_SIMPLETYPENAME_7);
	}
	| ConstGraphic {
		// todo4
	}
	;

ConstGraphic
	: TD_GRAPHIC {
		// todo4
	}
	| TD_GRAPHIC SQL_LP Iconst SQL_RP {

	}
	| TD_VARGRAPHIC SQL_LP Iconst SQL_RP {

	}
	| TD_LONG TD_VARGRAPHIC {

	}
	;


opt_asymmetric
	: ASYMMETRIC {
		JOUT("SYN: opt_asymmetric -> ASYMMETRIC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_asymmetric", ID_OPT_ASYMMETRIC, R_OPT_ASYMMETRIC_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_asymmetric -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_asymmetric", ID_OPT_ASYMMETRIC, R_OPT_ASYMMETRIC__NULL);
	}
	;

opt_foreign_server_version
	: foreign_server_version {
		JOUT("SYN: opt_foreign_server_version -> foreign_server_version \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_foreign_server_version", ID_OPT_FOREIGN_SERVER_VERSION, R_OPT_FOREIGN_SERVER_VERSION_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_foreign_server_version -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_foreign_server_version", ID_OPT_FOREIGN_SERVER_VERSION, R_OPT_FOREIGN_SERVER_VERSION__NULL);
	}
	;

cast_context
	: AS IMPLICIT_P {
		JOUT("SYN: cast_context -> AS_IMPLICIT_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "cast_context", ID_CAST_CONTEXT, R_CAST_CONTEXT_1);
	}
	| AS ASSIGNMENT {
		JOUT("SYN: cast_context -> AS_ASSIGNMENT \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "cast_context", ID_CAST_CONTEXT, R_CAST_CONTEXT_2);
	}
	| /* empty */ {
		JOUT("SYN: cast_context -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "cast_context", ID_CAST_CONTEXT, R_CAST_CONTEXT__NULL);
	}
	;

alter_extension_opt_item
	: TO ColId_or_Sconst {
		JOUT("SYN: alter_extension_opt_item -> TO_ColId_or_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_extension_opt_item", ID_ALTER_EXTENSION_OPT_ITEM, R_ALTER_EXTENSION_OPT_ITEM_1);
	}
	;

opt_or_replace
	: OR REPLACE {
		JOUT("SYN: opt_or_replace -> OR_REPLACE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_or_replace", ID_OPT_OR_REPLACE, R_OPT_OR_REPLACE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_or_replace -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_or_replace", ID_OPT_OR_REPLACE, R_OPT_OR_REPLACE__NULL);
	}
	;

index_params
	: index_elem {
		JOUT("SYN: index_params -> index_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "index_params", ID_INDEX_PARAMS, R_INDEX_PARAMS_1);
	}
	| index_params SQL_COMMA index_elem {
		JOUT("SYN: index_params -> index_params_SQL_COMMA_index_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "index_params", ID_INDEX_PARAMS, R_INDEX_PARAMS_2);
	}
	;

TransactionStmt
	: ABORT_P opt_transaction {
		JOUT("SYN: TransactionStmt -> ABORT_P_opt_transaction \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_1);
	}
	| BEGIN_P opt_transaction transaction_mode_list_or_empty {
		JOUT("SYN: TransactionStmt -> BEGIN_P_opt_transaction_transaction_mode_list_or_empty \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_2);
	}
	| START TRANSACTION transaction_mode_list_or_empty {
		JOUT("SYN: TransactionStmt -> START_TRANSACTION_transaction_mode_list_or_empty \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_3);
	}
	| COMMIT opt_transaction {
		JOUT("SYN: TransactionStmt -> COMMIT_opt_transaction \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_4);
	}
	| END_P opt_transaction {
		JOUT("SYN: TransactionStmt -> END_P_opt_transaction \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_5);
	}
	| ROLLBACK opt_transaction {
		JOUT("SYN: TransactionStmt -> ROLLBACK_opt_transaction \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_6);
	}
	| SAVEPOINT ColId {
		JOUT("SYN: TransactionStmt -> SAVEPOINT_ColId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_7);
	}
	| RELEASE SAVEPOINT ColId {
		JOUT("SYN: TransactionStmt -> RELEASE_SAVEPOINT_ColId \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_8);
	}
	| RELEASE ColId {
		JOUT("SYN: TransactionStmt -> RELEASE_ColId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_9);
	}
	| ROLLBACK opt_transaction TO SAVEPOINT ColId {
		JOUT("SYN: TransactionStmt -> ROLLBACK_opt_transaction_TO_SAVEPOINT_ColId \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_10);
	}
	| ROLLBACK opt_transaction TO ColId {
		JOUT("SYN: TransactionStmt -> ROLLBACK_opt_transaction_TO_ColId \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_11);
	}
	| PREPARE TRANSACTION Sconst {
		JOUT("SYN: TransactionStmt -> PREPARE_TRANSACTION_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_12);
	}
	| COMMIT PREPARED Sconst {
		JOUT("SYN: TransactionStmt -> COMMIT_PREPARED_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_13);
	}
	| ROLLBACK PREPARED Sconst {
		JOUT("SYN: TransactionStmt -> ROLLBACK_PREPARED_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TransactionStmt", ID_TRANSACTIONSTMT, R_TRANSACTIONSTMT_14);
	}
	;

c_expr
	: columnref {
		JOUT("SYN: c_expr -> columnref \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_1);
	}
	| AexprConst {
		JOUT("SYN: c_expr -> AexprConst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_2);
	}
	| PARAM opt_indirection {
		JOUT("SYN: c_expr -> PARAM_opt_indirection \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_3);
	}
	| SQL_LP a_expr SQL_RP opt_indirection {
		JOUT("SYN: c_expr -> SQL_LP_a_expr_SQL_RP_opt_indirection \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_4);
	}
	| case_expr {
		JOUT("SYN: c_expr -> case_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_5);
	}
 	| func_expr {
		JOUT("SYN: c_expr -> func_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_6);
	}
	| select_with_parens %prec UMINUS {
		JOUT("SYN: c_expr -> select_with_parens \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_7);
	}
	| EXISTS select_with_parens {
		JOUT("SYN: c_expr -> EXISTS_select_with_parens \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_8);
	}
	| ARRAY select_with_parens {
		JOUT("SYN: c_expr -> ARRAY_select_with_parens \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_9);
	}
	| ARRAY array_expr {
		JOUT("SYN: c_expr -> ARRAY_array_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_10);
	}
	| row {
		JOUT("SYN: c_expr -> row \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_11);
	}
	| paren_func_expr SQL_LP Typename SQL_RP {
		JOUT("SYN: c_expr -> paren_func_expr SQL_LP Typename SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_12);

	}
	//add todo3
	| case_expr SQL_LP Typename SQL_RP {
		//here to transfer the Type of case_expr
		JOUT("SYN: c_expr -> case_expr \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "c_expr", ID_C_EXPR, R_C_EXPR_13);
	}
	;

createdb_opt_list
	: createdb_opt_list createdb_opt_item {
		JOUT("SYN: createdb_opt_list -> createdb_opt_list_createdb_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "createdb_opt_list", ID_CREATEDB_OPT_LIST, R_CREATEDB_OPT_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: createdb_opt_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "createdb_opt_list", ID_CREATEDB_OPT_LIST, R_CREATEDB_OPT_LIST__NULL);
	}
	;

def_list
	: def_elem {
		JOUT("SYN: def_list -> def_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "def_list", ID_DEF_LIST, R_DEF_LIST_1);
	}
	| def_list SQL_COMMA def_elem {
		JOUT("SYN: def_list -> def_list_SQL_COMMA_def_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "def_list", ID_DEF_LIST, R_DEF_LIST_2);
	}
	;

position_list
	: b_expr IN_P b_expr {
		JOUT("SYN: position_list -> b_expr_IN_P_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "position_list", ID_POSITION_LIST, R_POSITION_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: position_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "position_list", ID_POSITION_LIST, R_POSITION_LIST__NULL);
	}
	;

into_clause
	: INTO OptTempTableName {
		JOUT("SYN: into_clause -> INTO_OptTempTableName \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "into_clause", ID_INTO_CLAUSE, R_INTO_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: into_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "into_clause", ID_INTO_CLAUSE, R_INTO_CLAUSE__NULL);
	}
	;

opt_validator
	: validator_clause {
		JOUT("SYN: opt_validator -> validator_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_validator", ID_OPT_VALIDATOR, R_OPT_VALIDATOR_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_validator -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_validator", ID_OPT_VALIDATOR, R_OPT_VALIDATOR__NULL);
	}
	;

DeclareCursorStmt
	: DECLARE cursor_name cursor_options CURSOR opt_hold FOR SelectStmt {
		JOUT("SYN: DeclareCursorStmt -> DECLARE_cursor_name_cursor_options_CURSOR_opt_hold_FOR_SelectStmt \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DeclareCursorStmt", ID_DECLARECURSORSTMT, R_DECLARECURSORSTMT_1);
	}
	;

set_clause_list
	: set_clause {
		JOUT("SYN: set_clause_list -> set_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "set_clause_list", ID_SET_CLAUSE_LIST, R_SET_CLAUSE_LIST_1);
	}
	| set_clause_list SQL_COMMA set_clause {
		JOUT("SYN: set_clause_list -> set_clause_list_SQL_COMMA_set_clause \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_clause_list", ID_SET_CLAUSE_LIST, R_SET_CLAUSE_LIST_2);
	}
	;

VariableSetStmt
	: SET set_rest {
		JOUT("SYN: VariableSetStmt -> SET_set_rest \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "VariableSetStmt", ID_VARIABLESETSTMT, R_VARIABLESETSTMT_1);
	}
	| SET LOCAL set_rest {
		JOUT("SYN: VariableSetStmt -> SET_LOCAL_set_rest \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "VariableSetStmt", ID_VARIABLESETSTMT, R_VARIABLESETSTMT_2);
	}
	| SET SESSION set_rest {
		JOUT("SYN: VariableSetStmt -> SET_SESSION_set_rest \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "VariableSetStmt", ID_VARIABLESETSTMT, R_VARIABLESETSTMT_3);
	}
	;

AlterFdwStmt
	: ALTER FOREIGN DATA_P WRAPPER name opt_fdw_options alter_generic_options {
		JOUT("SYN: AlterFdwStmt -> ALTER_FOREIGN_DATA_P_WRAPPER_name_opt_fdw_options_alter_generic_options \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterFdwStmt", ID_ALTERFDWSTMT, R_ALTERFDWSTMT_1);
	}
	| ALTER FOREIGN DATA_P WRAPPER name fdw_options {
		JOUT("SYN: AlterFdwStmt -> ALTER_FOREIGN_DATA_P_WRAPPER_name_fdw_options \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterFdwStmt", ID_ALTERFDWSTMT, R_ALTERFDWSTMT_2);
	}
	;

transaction_mode_item
	: ISOLATION LEVEL iso_level {
		JOUT("SYN: transaction_mode_item -> ISOLATION_LEVEL_iso_level \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "transaction_mode_item", ID_TRANSACTION_MODE_ITEM, R_TRANSACTION_MODE_ITEM_1);
	}
	| READ ONLY {
		JOUT("SYN: transaction_mode_item -> READ_ONLY \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "transaction_mode_item", ID_TRANSACTION_MODE_ITEM, R_TRANSACTION_MODE_ITEM_2);
	}
	| READ WRITE {
		JOUT("SYN: transaction_mode_item -> READ_WRITE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "transaction_mode_item", ID_TRANSACTION_MODE_ITEM, R_TRANSACTION_MODE_ITEM_3);
	}
	| DEFERRABLE {
		JOUT("SYN: transaction_mode_item -> DEFERRABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "transaction_mode_item", ID_TRANSACTION_MODE_ITEM, R_TRANSACTION_MODE_ITEM_4);
	}
	| NOT DEFERRABLE {
		JOUT("SYN: transaction_mode_item -> NOT_DEFERRABLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "transaction_mode_item", ID_TRANSACTION_MODE_ITEM, R_TRANSACTION_MODE_ITEM_5);
	}
	;

CreateSchemaStmt
	: CREATE SCHEMA OptSchemaName AUTHORIZATION RoleId OptSchemaEltList {
		JOUT("SYN: CreateSchemaStmt -> CREATE_SCHEMA_OptSchemaName_AUTHORIZATION_RoleId_OptSchemaEltList \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CreateSchemaStmt", ID_CREATESCHEMASTMT, R_CREATESCHEMASTMT_1);
	}
	| CREATE SCHEMA ColId OptSchemaEltList {
		JOUT("SYN: CreateSchemaStmt -> CREATE_SCHEMA_ColId_OptSchemaEltList \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "CreateSchemaStmt", ID_CREATESCHEMASTMT, R_CREATESCHEMASTMT_2);
	}
	;

AlterForeignServerStmt
	: ALTER SERVER name foreign_server_version alter_generic_options {
		JOUT("SYN: AlterForeignServerStmt -> ALTER_SERVER_name_foreign_server_version_alter_generic_options \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterForeignServerStmt", ID_ALTERFOREIGNSERVERSTMT, R_ALTERFOREIGNSERVERSTMT_1);
	}
	| ALTER SERVER name foreign_server_version {
		JOUT("SYN: AlterForeignServerStmt -> ALTER_SERVER_name_foreign_server_version \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterForeignServerStmt", ID_ALTERFOREIGNSERVERSTMT, R_ALTERFOREIGNSERVERSTMT_2);
	}
	| ALTER SERVER name alter_generic_options {
		JOUT("SYN: AlterForeignServerStmt -> ALTER_SERVER_name_alter_generic_options \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterForeignServerStmt", ID_ALTERFOREIGNSERVERSTMT, R_ALTERFOREIGNSERVERSTMT_3);
	}
	;

privilege_list
	: privilege {
		JOUT("SYN: privilege_list -> privilege \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "privilege_list", ID_PRIVILEGE_LIST, R_PRIVILEGE_LIST_1);
	}
	| privilege_list SQL_COMMA privilege {
		JOUT("SYN: privilege_list -> privilege_list_SQL_COMMA_privilege \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "privilege_list", ID_PRIVILEGE_LIST, R_PRIVILEGE_LIST_2);
	}
	;

copy_file_name
	: Sconst {
		JOUT("SYN: copy_file_name -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_file_name", ID_COPY_FILE_NAME, R_COPY_FILE_NAME_1);
	}
	| STDIN {
		JOUT("SYN: copy_file_name -> STDIN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_file_name", ID_COPY_FILE_NAME, R_COPY_FILE_NAME_2);
	}
	| STDOUT {
		JOUT("SYN: copy_file_name -> STDOUT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_file_name", ID_COPY_FILE_NAME, R_COPY_FILE_NAME_3);
	}
	;

CreateOpClassStmt
	: CREATE OPERATOR CLASS any_name opt_default FOR TYPE_P Typename USING access_method opt_opfamily AS opclass_item_list {
		JOUT("SYN: CreateOpClassStmt -> CREATE_OPERATOR_CLASS_any_name_opt_default_FOR_TYPE_P_Typename_USING_access_method_opt_opfamily_AS_opclass_item_list \n");
		$$ = cons_subtree(13, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
		set_content(&$$, @$.first_line, "CreateOpClassStmt", ID_CREATEOPCLASSSTMT, R_CREATEOPCLASSSTMT_1);
	}
	;

event_trigger_when_item
	: ColId IN_P SQL_LP event_trigger_value_list SQL_RP {
		JOUT("SYN: event_trigger_when_item -> ColId_IN_P_SQL_LP_event_trigger_value_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "event_trigger_when_item", ID_EVENT_TRIGGER_WHEN_ITEM, R_EVENT_TRIGGER_WHEN_ITEM_1);
	}
	;

xml_attribute_list
	: xml_attribute_el {
		JOUT("SYN: xml_attribute_list -> xml_attribute_el \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "xml_attribute_list", ID_XML_ATTRIBUTE_LIST, R_XML_ATTRIBUTE_LIST_1);
	}
	| xml_attribute_list SQL_COMMA xml_attribute_el {
		JOUT("SYN: xml_attribute_list -> xml_attribute_list_SQL_COMMA_xml_attribute_el \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "xml_attribute_list", ID_XML_ATTRIBUTE_LIST, R_XML_ATTRIBUTE_LIST_2);
	}
	;

AlterOptRoleList
	: AlterOptRoleList AlterOptRoleElem {
		JOUT("SYN: AlterOptRoleList -> AlterOptRoleList_AlterOptRoleElem \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "AlterOptRoleList", ID_ALTEROPTROLELIST, R_ALTEROPTROLELIST_1);
	}
	| /* empty */ {
		JOUT("SYN: AlterOptRoleList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "AlterOptRoleList", ID_ALTEROPTROLELIST, R_ALTEROPTROLELIST__NULL);
	}
	;

alter_generic_option_list
	: alter_generic_option_elem {
		JOUT("SYN: alter_generic_option_list -> alter_generic_option_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "alter_generic_option_list", ID_ALTER_GENERIC_OPTION_LIST, R_ALTER_GENERIC_OPTION_LIST_1);
	}
	| alter_generic_option_list SQL_COMMA alter_generic_option_elem {
		JOUT("SYN: alter_generic_option_list -> alter_generic_option_list_SQL_COMMA_alter_generic_option_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_generic_option_list", ID_ALTER_GENERIC_OPTION_LIST, R_ALTER_GENERIC_OPTION_LIST_2);
	}
	;

cte_list
	: common_table_expr {
		JOUT("SYN: cte_list -> common_table_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "cte_list", ID_CTE_LIST, R_CTE_LIST_1);
	}
	| cte_list SQL_COMMA common_table_expr {
		JOUT("SYN: cte_list -> cte_list_SQL_COMMA_common_table_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "cte_list", ID_CTE_LIST, R_CTE_LIST_2);
	}
	;

case_default
	: ELSE a_expr {
		JOUT("SYN: case_default -> ELSE_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "case_default", ID_CASE_DEFAULT, R_CASE_DEFAULT_1);
	}
	| /* empty */ {
		JOUT("SYN: case_default -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "case_default", ID_CASE_DEFAULT, R_CASE_DEFAULT__NULL);
	}
	;

stmt
	: AlterEventTrigStmt {
		JOUT("SYN: stmt -> AlterEventTrigStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_1);
	}
	| AlterDatabaseStmt {
		JOUT("SYN: stmt -> AlterDatabaseStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_2);
	}
	| AlterDatabaseSetStmt {
		JOUT("SYN: stmt -> AlterDatabaseSetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_3);
	}
	| AlterDefaultPrivilegesStmt {
		JOUT("SYN: stmt -> AlterDefaultPrivilegesStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_4);
	}
	| AlterDomainStmt {
		JOUT("SYN: stmt -> AlterDomainStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_5);
	}
	| AlterEnumStmt {
		JOUT("SYN: stmt -> AlterEnumStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_6);
	}
	| AlterExtensionStmt {
		JOUT("SYN: stmt -> AlterExtensionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_7);
	}
	| AlterExtensionContentsStmt {
		JOUT("SYN: stmt -> AlterExtensionContentsStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_8);
	}
	| AlterFdwStmt {
		JOUT("SYN: stmt -> AlterFdwStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_9);
	}
	| AlterForeignServerStmt {
		JOUT("SYN: stmt -> AlterForeignServerStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_10);
	}
	| AlterForeignTableStmt {
		JOUT("SYN: stmt -> AlterForeignTableStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_11);
	}
	| AlterFunctionStmt {
		JOUT("SYN: stmt -> AlterFunctionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_12);
	}
	| AlterGroupStmt {
		JOUT("SYN: stmt -> AlterGroupStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_13);
	}
	| AlterObjectSchemaStmt {
		JOUT("SYN: stmt -> AlterObjectSchemaStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_14);
	}
	| AlterOwnerStmt {
		JOUT("SYN: stmt -> AlterOwnerStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_15);
	}
	| AlterSeqStmt {
		JOUT("SYN: stmt -> AlterSeqStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_16);
	}
	| AlterTableStmt {
		JOUT("SYN: stmt -> AlterTableStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_17);
	}
	| AlterCompositeTypeStmt {
		JOUT("SYN: stmt -> AlterCompositeTypeStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_18);
	}
	| AlterRoleSetStmt {
		JOUT("SYN: stmt -> AlterRoleSetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_19);
	}
	| AlterRoleStmt {
		JOUT("SYN: stmt -> AlterRoleStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_20);
	}
	| AlterTSConfigurationStmt {
		JOUT("SYN: stmt -> AlterTSConfigurationStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_21);
	}
	| AlterTSDictionaryStmt {
		JOUT("SYN: stmt -> AlterTSDictionaryStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_22);
	}
	| AlterUserMappingStmt {
		JOUT("SYN: stmt -> AlterUserMappingStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_23);
	}
	| AlterUserSetStmt {
		JOUT("SYN: stmt -> AlterUserSetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_24);
	}
	| AlterUserStmt {
		JOUT("SYN: stmt -> AlterUserStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_25);
	}
	| AnalyzeStmt {
		JOUT("SYN: stmt -> AnalyzeStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_26);
	}
	| CheckPointStmt {
		JOUT("SYN: stmt -> CheckPointStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_27);
	}
	| ClosePortalStmt {
		JOUT("SYN: stmt -> ClosePortalStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_28);
	}
	| ClusterStmt {
		JOUT("SYN: stmt -> ClusterStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_29);
	}
	| CommentStmt {
		JOUT("SYN: stmt -> CommentStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_30);
	}
	| ConstraintsSetStmt {
		JOUT("SYN: stmt -> ConstraintsSetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_31);
	}
	| CopyStmt {
		JOUT("SYN: stmt -> CopyStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_32);
	}
	| CreateAsStmt {
		JOUT("SYN: stmt -> CreateAsStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_33);
	}
	| CreateAssertStmt {
		JOUT("SYN: stmt -> CreateAssertStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_34);
	}
	| CreateCastStmt {
		JOUT("SYN: stmt -> CreateCastStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_35);
	}
	| CreateConversionStmt {
		JOUT("SYN: stmt -> CreateConversionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_36);
	}
	| CreateDomainStmt {
		JOUT("SYN: stmt -> CreateDomainStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_37);
	}
	| CreateExtensionStmt {
		JOUT("SYN: stmt -> CreateExtensionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_38);
	}
	| CreateFdwStmt {
		JOUT("SYN: stmt -> CreateFdwStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_39);
	}
	| CreateForeignServerStmt {
		JOUT("SYN: stmt -> CreateForeignServerStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_40);
	}
	| CreateForeignTableStmt {
		JOUT("SYN: stmt -> CreateForeignTableStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_41);
	}
	| CreateFunctionStmt {
		JOUT("SYN: stmt -> CreateFunctionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_42);
	}
	| CreateGroupStmt {
		JOUT("SYN: stmt -> CreateGroupStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_43);
	}
	| CreateOpClassStmt {
		JOUT("SYN: stmt -> CreateOpClassStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_44);
	}
	| CreateOpFamilyStmt {
		JOUT("SYN: stmt -> CreateOpFamilyStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_45);
	}
	| AlterOpFamilyStmt {
		JOUT("SYN: stmt -> AlterOpFamilyStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_46);
	}
	| CreatePLangStmt {
		JOUT("SYN: stmt -> CreatePLangStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_47);
	}
	| CreateSchemaStmt {
		JOUT("SYN: stmt -> CreateSchemaStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_48);
	}
	| CreateSeqStmt {
		JOUT("SYN: stmt -> CreateSeqStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_49);
	}
	| CreateStmt {
		JOUT("SYN: stmt -> CreateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_50);
	}
	| CreateTableSpaceStmt {
		JOUT("SYN: stmt -> CreateTableSpaceStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_51);
	}
	| CreateTrigStmt {
		JOUT("SYN: stmt -> CreateTrigStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_52);
	}
	| CreateEventTrigStmt {
		JOUT("SYN: stmt -> CreateEventTrigStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_53);
	}
	| CreateRoleStmt {
		JOUT("SYN: stmt -> CreateRoleStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_54);
	}
	| CreateUserStmt {
		JOUT("SYN: stmt -> CreateUserStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_55);
	}
	| CreateUserMappingStmt {
		JOUT("SYN: stmt -> CreateUserMappingStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_56);
	}
	| CreatedbStmt {
		JOUT("SYN: stmt -> CreatedbStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_57);
	}
	| DeallocateStmt {
		JOUT("SYN: stmt -> DeallocateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_58);
	}
	| DeclareCursorStmt {
		JOUT("SYN: stmt -> DeclareCursorStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_59);
	}
	| DefineStmt {
		JOUT("SYN: stmt -> DefineStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_60);
	}
	| DeleteStmt {
		JOUT("SYN: stmt -> DeleteStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_61);
	}
	| DiscardStmt {
		JOUT("SYN: stmt -> DiscardStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_62);
	}
	| DoStmt {
		JOUT("SYN: stmt -> DoStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_63);
	}
	| DropAssertStmt {
		JOUT("SYN: stmt -> DropAssertStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_64);
	}
	| DropCastStmt {
		JOUT("SYN: stmt -> DropCastStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_65);
	}
	| DropFdwStmt {
		JOUT("SYN: stmt -> DropFdwStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_66);
	}
	| DropForeignServerStmt {
		JOUT("SYN: stmt -> DropForeignServerStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_67);
	}
	| DropGroupStmt {
		JOUT("SYN: stmt -> DropGroupStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_68);
	}
	| DropOpClassStmt {
		JOUT("SYN: stmt -> DropOpClassStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_69);
	}
	| DropOpFamilyStmt {
		JOUT("SYN: stmt -> DropOpFamilyStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_70);
	}
	| DropOwnedStmt {
		JOUT("SYN: stmt -> DropOwnedStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_71);
	}
	| DropPLangStmt {
		JOUT("SYN: stmt -> DropPLangStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_72);
	}
	| DropRuleStmt {
		JOUT("SYN: stmt -> DropRuleStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_73);
	}
	| DropStmt {
		JOUT("SYN: stmt -> DropStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_74);
	}
	| DropTableSpaceStmt {
		JOUT("SYN: stmt -> DropTableSpaceStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_75);
	}
	| DropTrigStmt {
		JOUT("SYN: stmt -> DropTrigStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_76);
	}
	| DropRoleStmt {
		JOUT("SYN: stmt -> DropRoleStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_77);
	}
	| DropUserStmt {
		JOUT("SYN: stmt -> DropUserStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_78);
	}
	| DropUserMappingStmt {
		JOUT("SYN: stmt -> DropUserMappingStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_79);
	}
	| DropdbStmt {
		JOUT("SYN: stmt -> DropdbStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_80);
	}
	| ExecuteStmt {
		JOUT("SYN: stmt -> ExecuteStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_81);
	}
	| ExplainStmt {
		JOUT("SYN: stmt -> ExplainStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_82);
	}
	| FetchStmt {
		JOUT("SYN: stmt -> FetchStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_83);
	}
	| GrantStmt {
		JOUT("SYN: stmt -> GrantStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_84);
	}
	| GrantRoleStmt {
		JOUT("SYN: stmt -> GrantRoleStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_85);
	}
	| IndexStmt {
		JOUT("SYN: stmt -> IndexStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_86);
	}
	| InsertStmt {
		JOUT("SYN: stmt -> InsertStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_87);
	}
	| ListenStmt {
		JOUT("SYN: stmt -> ListenStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_88);
	}
	| LoadStmt {
		JOUT("SYN: stmt -> LoadStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_89);
	}
	| LockStmt {
		JOUT("SYN: stmt -> LockStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_90);
	}
	| NotifyStmt {
		JOUT("SYN: stmt -> NotifyStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_91);
	}
	| PrepareStmt {
		JOUT("SYN: stmt -> PrepareStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_92);
	}
	| ReassignOwnedStmt {
		JOUT("SYN: stmt -> ReassignOwnedStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_93);
	}
	| ReindexStmt {
		JOUT("SYN: stmt -> ReindexStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_94);
	}
	| RemoveAggrStmt {
		JOUT("SYN: stmt -> RemoveAggrStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_95);
	}
	| RemoveFuncStmt {
		JOUT("SYN: stmt -> RemoveFuncStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_96);
	}
	| RemoveOperStmt {
		JOUT("SYN: stmt -> RemoveOperStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_97);
	}
	| RenameStmt {
		JOUT("SYN: stmt -> RenameStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_98);
	}
	| RevokeStmt {
		JOUT("SYN: stmt -> RevokeStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_99);
	}
	| RevokeRoleStmt {
		JOUT("SYN: stmt -> RevokeRoleStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_100);
	}
	| RuleStmt {
		JOUT("SYN: stmt -> RuleStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_101);
	}
	| SecLabelStmt {
		JOUT("SYN: stmt -> SecLabelStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_102);
	}
	| SelectStmt {
		JOUT("SYN: stmt -> SelectStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_103);
	}
	| TransactionStmt {
		JOUT("SYN: stmt -> TransactionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_104);
	}
	| TruncateStmt {
		JOUT("SYN: stmt -> TruncateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_105);
	}
	| UnlistenStmt {
		JOUT("SYN: stmt -> UnlistenStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_106);
	}
	| UpdateStmt {
		JOUT("SYN: stmt -> UpdateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_107);
	}
	| VacuumStmt {
		JOUT("SYN: stmt -> VacuumStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_108);
	}
	| VariableResetStmt {
		JOUT("SYN: stmt -> VariableResetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_109);
	}
	| VariableSetStmt {
		JOUT("SYN: stmt -> VariableSetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_110);
	}
	| VariableShowStmt {
		JOUT("SYN: stmt -> VariableShowStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_111);
	}
	| ViewStmt {
		JOUT("SYN: stmt -> ViewStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_112);
	}
	| CollectStatisticsStmt {
		// todo3
		JOUT("SYN: stmt -> CollectStatisticsStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_113);
	}
	| TD_BT {
		JOUT("SYN: stmt -> BT\n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_114);
	}
	| TD_ET {
		JOUT("SYN: stmt -> ET\n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_115);
	}
	//JOE TODO3
	| td_command {
		JOUT("SYN: stmt -> td_command\n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT_116);
	}
	| /* empty */ {
		JOUT("SYN: stmt -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "stmt", ID_STMT, R_STMT__NULL);
	}
	;

cursor_options
	: /* empty */ {
		JOUT("SYN: cursor_options -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "cursor_options", ID_CURSOR_OPTIONS, R_CURSOR_OPTIONS__NULL);
	}
	| cursor_options NO SCROLL {
		JOUT("SYN: cursor_options -> cursor_options_NO_SCROLL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "cursor_options", ID_CURSOR_OPTIONS, R_CURSOR_OPTIONS_2);
	}
	| cursor_options SCROLL {
		JOUT("SYN: cursor_options -> cursor_options_SCROLL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "cursor_options", ID_CURSOR_OPTIONS, R_CURSOR_OPTIONS_3);
	}
	| cursor_options BINARY {
		JOUT("SYN: cursor_options -> cursor_options_BINARY \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "cursor_options", ID_CURSOR_OPTIONS, R_CURSOR_OPTIONS_4);
	}
	| cursor_options INSENSITIVE {
		JOUT("SYN: cursor_options -> cursor_options_INSENSITIVE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "cursor_options", ID_CURSOR_OPTIONS, R_CURSOR_OPTIONS_5);
	}
	;

using_clause
	: USING from_list {
		JOUT("SYN: using_clause -> USING_from_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "using_clause", ID_USING_CLAUSE, R_USING_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: using_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "using_clause", ID_USING_CLAUSE, R_USING_CLAUSE__NULL);
	}
	;

opt_distinct
	: DISTINCT {
		JOUT("SYN: opt_distinct -> DISTINCT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_distinct", ID_OPT_DISTINCT, R_OPT_DISTINCT_1);
	}
	| DISTINCT ON SQL_LP expr_list SQL_RP {
		JOUT("SYN: opt_distinct -> DISTINCT_ON_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "opt_distinct", ID_OPT_DISTINCT, R_OPT_DISTINCT_2);
	}
	| ALL {
		JOUT("SYN: opt_distinct -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_distinct", ID_OPT_DISTINCT, R_OPT_DISTINCT_3);
	}
	| /* empty */ {
		JOUT("SYN: opt_distinct -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_distinct", ID_OPT_DISTINCT, R_OPT_DISTINCT__NULL);
	}
	;

cursor_name
	: name {
		JOUT("SYN: cursor_name -> name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "cursor_name", ID_CURSOR_NAME, R_CURSOR_NAME_1);
	}
	;

when_clause_list
	: when_clause {
		JOUT("SYN: when_clause_list -> when_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "when_clause_list", ID_WHEN_CLAUSE_LIST, R_WHEN_CLAUSE_LIST_1);
	}
	| when_clause_list when_clause {
		JOUT("SYN: when_clause_list -> when_clause_list_when_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "when_clause_list", ID_WHEN_CLAUSE_LIST, R_WHEN_CLAUSE_LIST_2);
	}
	;

event_trigger_value_list
	: SCONST {
		JOUT("SYN: event_trigger_value_list -> SCONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "event_trigger_value_list", ID_EVENT_TRIGGER_VALUE_LIST, R_EVENT_TRIGGER_VALUE_LIST_1);
	}
	| event_trigger_value_list SQL_COMMA SCONST {
		JOUT("SYN: event_trigger_value_list -> event_trigger_value_list_SQL_COMMA_SCONST \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "event_trigger_value_list", ID_EVENT_TRIGGER_VALUE_LIST, R_EVENT_TRIGGER_VALUE_LIST_2);
	}
	;

indirection_el
	: SQL_DOT attr_name {
		JOUT("SYN: indirection_el -> SQL_DOT_attr_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "indirection_el", ID_INDIRECTION_EL, R_INDIRECTION_EL_1);
	}
	| SQL_DOT SQL_MUL {
		JOUT("SYN: indirection_el -> SQL_DOT_SQL_MUL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "indirection_el", ID_INDIRECTION_EL, R_INDIRECTION_EL_2);
	}
	| SQL_LB a_expr SQL_RB {
		JOUT("SYN: indirection_el -> SQL_LB_a_expr_SQL_RB \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "indirection_el", ID_INDIRECTION_EL, R_INDIRECTION_EL_3);
	}
	| SQL_LB a_expr SQL_COLON a_expr SQL_RB {
		JOUT("SYN: indirection_el -> SQL_LB_a_expr_SQL_COLON_a_expr_SQL_RB \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "indirection_el", ID_INDIRECTION_EL, R_INDIRECTION_EL_4);
	}
	;

BitWithoutLength
	: BIT opt_varying {
		JOUT("SYN: BitWithoutLength -> BIT_opt_varying \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "BitWithoutLength", ID_BITWITHOUTLENGTH, R_BITWITHOUTLENGTH_1);
	}
	;

SetResetClause
	: SET set_rest {
		JOUT("SYN: SetResetClause -> SET_set_rest \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SetResetClause", ID_SETRESETCLAUSE, R_SETRESETCLAUSE_1);
	}
	| VariableResetStmt {
		JOUT("SYN: SetResetClause -> VariableResetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SetResetClause", ID_SETRESETCLAUSE, R_SETRESETCLAUSE_2);
	}
	;

columnOptions
	: ColId WITH OPTIONS ColQualList {
		JOUT("SYN: columnOptions -> ColId_WITH_OPTIONS_ColQualList \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "columnOptions", ID_COLUMNOPTIONS, R_COLUMNOPTIONS_1);
	}
	;

indirection
	: indirection_el {
		JOUT("SYN: indirection -> indirection_el \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "indirection", ID_INDIRECTION, R_INDIRECTION_1);
	}
	| indirection indirection_el {
		JOUT("SYN: indirection -> indirection_indirection_el \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "indirection", ID_INDIRECTION, R_INDIRECTION_2);
	}
	;

opt_grant_grant_option
	: WITH GRANT OPTION {
		JOUT("SYN: opt_grant_grant_option -> WITH_GRANT_OPTION \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_grant_grant_option", ID_OPT_GRANT_GRANT_OPTION, R_OPT_GRANT_GRANT_OPTION_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_grant_grant_option -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_grant_grant_option", ID_OPT_GRANT_GRANT_OPTION, R_OPT_GRANT_GRANT_OPTION__NULL);
	}
	;

AlterDatabaseStmt
	: ALTER DATABASE database_name opt_with alterdb_opt_list {
		JOUT("SYN: AlterDatabaseStmt -> ALTER_DATABASE_database_name_opt_with_alterdb_opt_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterDatabaseStmt", ID_ALTERDATABASESTMT, R_ALTERDATABASESTMT_1);
	}
	| ALTER DATABASE database_name SET TABLESPACE name {
		JOUT("SYN: AlterDatabaseStmt -> ALTER_DATABASE_database_name_SET_TABLESPACE_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterDatabaseStmt", ID_ALTERDATABASESTMT, R_ALTERDATABASESTMT_2);
	}
	;

copy_opt_list
	: copy_opt_list copy_opt_item {
		JOUT("SYN: copy_opt_list -> copy_opt_list_copy_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "copy_opt_list", ID_COPY_OPT_LIST, R_COPY_OPT_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: copy_opt_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "copy_opt_list", ID_COPY_OPT_LIST, R_COPY_OPT_LIST__NULL);
	}
	;

RemoveAggrStmt
	: DROP AGGREGATE func_name aggr_args opt_drop_behavior {
		JOUT("SYN: RemoveAggrStmt -> DROP_AGGREGATE_func_name_aggr_args_opt_drop_behavior \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "RemoveAggrStmt", ID_REMOVEAGGRSTMT, R_REMOVEAGGRSTMT_1);
	}
	| DROP AGGREGATE IF_P EXISTS func_name aggr_args opt_drop_behavior {
		JOUT("SYN: RemoveAggrStmt -> DROP_AGGREGATE_IF_P_EXISTS_func_name_aggr_args_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RemoveAggrStmt", ID_REMOVEAGGRSTMT, R_REMOVEAGGRSTMT_2);
	}
	;

alterdb_opt_item
	: CONNECTION LIMIT opt_equal SignedIconst {
		JOUT("SYN: alterdb_opt_item -> CONNECTION_LIMIT_opt_equal_SignedIconst \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alterdb_opt_item", ID_ALTERDB_OPT_ITEM, R_ALTERDB_OPT_ITEM_1);
	}
	;

DropdbStmt
	: DROP DATABASE database_name {
		JOUT("SYN: DropdbStmt -> DROP_DATABASE_database_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DropdbStmt", ID_DROPDBSTMT, R_DROPDBSTMT_1);
	}
	| DROP DATABASE IF_P EXISTS database_name {
		JOUT("SYN: DropdbStmt -> DROP_DATABASE_IF_P_EXISTS_database_name \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropdbStmt", ID_DROPDBSTMT, R_DROPDBSTMT_2);
	}
	;

OptInherit
	: INHERITS SQL_LP qualified_name_list SQL_RP {
		JOUT("SYN: OptInherit -> INHERITS_SQL_LP_qualified_name_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OptInherit", ID_OPTINHERIT, R_OPTINHERIT_1);
	}
	| /* empty */ {
		JOUT("SYN: OptInherit -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptInherit", ID_OPTINHERIT, R_OPTINHERIT__NULL);
	}
	;

transaction_mode_list_or_empty
	: transaction_mode_list {
		JOUT("SYN: transaction_mode_list_or_empty -> transaction_mode_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "transaction_mode_list_or_empty", ID_TRANSACTION_MODE_LIST_OR_EMPTY, R_TRANSACTION_MODE_LIST_OR_EMPTY_1);
	}
	| /* empty */ {
		JOUT("SYN: transaction_mode_list_or_empty -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "transaction_mode_list_or_empty", ID_TRANSACTION_MODE_LIST_OR_EMPTY, R_TRANSACTION_MODE_LIST_OR_EMPTY__NULL);
	}
	;

cluster_index_specification
	: USING index_name {
		JOUT("SYN: cluster_index_specification -> USING_index_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "cluster_index_specification", ID_CLUSTER_INDEX_SPECIFICATION, R_CLUSTER_INDEX_SPECIFICATION_1);
	}
	| /* empty */ {
		JOUT("SYN: cluster_index_specification -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "cluster_index_specification", ID_CLUSTER_INDEX_SPECIFICATION, R_CLUSTER_INDEX_SPECIFICATION__NULL);
	}
	;

ForeignTableElementList
	: ForeignTableElement {
		JOUT("SYN: ForeignTableElementList -> ForeignTableElement \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ForeignTableElementList", ID_FOREIGNTABLEELEMENTLIST, R_FOREIGNTABLEELEMENTLIST_1);
	}
	| ForeignTableElementList SQL_COMMA ForeignTableElement {
		JOUT("SYN: ForeignTableElementList -> ForeignTableElementList_SQL_COMMA_ForeignTableElement \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ForeignTableElementList", ID_FOREIGNTABLEELEMENTLIST, R_FOREIGNTABLEELEMENTLIST_2);
	}
	;

opt_hold
	: /* empty */ {
		JOUT("SYN: opt_hold -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_hold", ID_OPT_HOLD, R_OPT_HOLD__NULL);
	}
	| WITH HOLD {
		JOUT("SYN: opt_hold -> WITH_HOLD \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_hold", ID_OPT_HOLD, R_OPT_HOLD_2);
	}
	| WITHOUT HOLD {
		JOUT("SYN: opt_hold -> WITHOUT_HOLD \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_hold", ID_OPT_HOLD, R_OPT_HOLD_3);
	}
	;

DropOwnedStmt
	: DROP OWNED BY name_list opt_drop_behavior {
		JOUT("SYN: DropOwnedStmt -> DROP_OWNED_BY_name_list_opt_drop_behavior \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropOwnedStmt", ID_DROPOWNEDSTMT, R_DROPOWNEDSTMT_1);
	}
	;

sub_type
	: ANY {
		JOUT("SYN: sub_type -> ANY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "sub_type", ID_SUB_TYPE, R_SUB_TYPE_1);
	}
	| SOME {
		JOUT("SYN: sub_type -> SOME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "sub_type", ID_SUB_TYPE, R_SUB_TYPE_2);
	}
	| ALL {
		JOUT("SYN: sub_type -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "sub_type", ID_SUB_TYPE, R_SUB_TYPE_3);
	}
	;

create_as_target
	: qualified_name opt_column_list OptWith OnCommitOption OptTableSpace {
		JOUT("SYN: create_as_target -> qualified_name_opt_column_list_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "create_as_target", ID_CREATE_AS_TARGET, R_CREATE_AS_TARGET_1);
	}
	;

table_func_column
	: param_name func_type {
		JOUT("SYN: table_func_column -> param_name_func_type \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "table_func_column", ID_TABLE_FUNC_COLUMN, R_TABLE_FUNC_COLUMN_1);
	}
	;

DefACLOptionList
	: DefACLOptionList DefACLOption {
		JOUT("SYN: DefACLOptionList -> DefACLOptionList_DefACLOption \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DefACLOptionList", ID_DEFACLOPTIONLIST, R_DEFACLOPTIONLIST_1);
	}
	| /* empty */ {
		JOUT("SYN: DefACLOptionList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "DefACLOptionList", ID_DEFACLOPTIONLIST, R_DEFACLOPTIONLIST__NULL);
	}
	;

xmlexists_argument
	: PASSING c_expr {
		JOUT("SYN: xmlexists_argument -> PASSING_c_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "xmlexists_argument", ID_XMLEXISTS_ARGUMENT, R_XMLEXISTS_ARGUMENT_1);
	}
	| PASSING c_expr BY REF {
		JOUT("SYN: xmlexists_argument -> PASSING_c_expr_BY_REF \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "xmlexists_argument", ID_XMLEXISTS_ARGUMENT, R_XMLEXISTS_ARGUMENT_2);
	}
	| PASSING BY REF c_expr {
		JOUT("SYN: xmlexists_argument -> PASSING_BY_REF_c_expr \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "xmlexists_argument", ID_XMLEXISTS_ARGUMENT, R_XMLEXISTS_ARGUMENT_3);
	}
	| PASSING BY REF c_expr BY REF {
		JOUT("SYN: xmlexists_argument -> PASSING_BY_REF_c_expr_BY_REF \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "xmlexists_argument", ID_XMLEXISTS_ARGUMENT, R_XMLEXISTS_ARGUMENT_4);
	}
	;

qualified_name
	: ColId {
		JOUT("SYN: qualified_name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "qualified_name", ID_QUALIFIED_NAME, R_QUALIFIED_NAME_1);
	}
	| ColId indirection {
		JOUT("SYN: qualified_name -> ColId_indirection \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "qualified_name", ID_QUALIFIED_NAME, R_QUALIFIED_NAME_2);
	}
	;

enable_trigger
	: ENABLE_P {
		JOUT("SYN: enable_trigger -> ENABLE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "enable_trigger", ID_ENABLE_TRIGGER, R_ENABLE_TRIGGER_1);
	}
	| ENABLE_P REPLICA {
		JOUT("SYN: enable_trigger -> ENABLE_P_REPLICA \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "enable_trigger", ID_ENABLE_TRIGGER, R_ENABLE_TRIGGER_2);
	}
	| ENABLE_P ALWAYS {
		JOUT("SYN: enable_trigger -> ENABLE_P_ALWAYS \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "enable_trigger", ID_ENABLE_TRIGGER, R_ENABLE_TRIGGER_3);
	}
	| DISABLE_P {
		JOUT("SYN: enable_trigger -> DISABLE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "enable_trigger", ID_ENABLE_TRIGGER, R_ENABLE_TRIGGER_4);
	}
	;

when_clause
	: WHEN a_expr THEN a_expr {
		JOUT("SYN: when_clause -> WHEN_a_expr_THEN_a_expr \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "when_clause", ID_WHEN_CLAUSE, R_WHEN_CLAUSE_1);
	}
	;

notify_payload
	: SQL_COMMA Sconst {
		JOUT("SYN: notify_payload -> SQL_COMMA_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "notify_payload", ID_NOTIFY_PAYLOAD, R_NOTIFY_PAYLOAD_1);
	}
	| /* empty */ {
		JOUT("SYN: notify_payload -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "notify_payload", ID_NOTIFY_PAYLOAD, R_NOTIFY_PAYLOAD__NULL);
	}
	;

AlterDomainStmt
	: ALTER DOMAIN_P any_name alter_column_default {
		JOUT("SYN: AlterDomainStmt -> ALTER_DOMAIN_P_any_name_alter_column_default \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterDomainStmt", ID_ALTERDOMAINSTMT, R_ALTERDOMAINSTMT_1);
	}
	| ALTER DOMAIN_P any_name DROP NOT NULL_P {
		JOUT("SYN: AlterDomainStmt -> ALTER_DOMAIN_P_any_name_DROP_NOT_NULL_P \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterDomainStmt", ID_ALTERDOMAINSTMT, R_ALTERDOMAINSTMT_2);
	}
	| ALTER DOMAIN_P any_name SET NOT NULL_P {
		JOUT("SYN: AlterDomainStmt -> ALTER_DOMAIN_P_any_name_SET_NOT_NULL_P \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterDomainStmt", ID_ALTERDOMAINSTMT, R_ALTERDOMAINSTMT_3);
	}
	| ALTER DOMAIN_P any_name ADD_P TableConstraint {
		JOUT("SYN: AlterDomainStmt -> ALTER_DOMAIN_P_any_name_ADD_P_TableConstraint \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterDomainStmt", ID_ALTERDOMAINSTMT, R_ALTERDOMAINSTMT_4);
	}
	| ALTER DOMAIN_P any_name DROP CONSTRAINT name opt_drop_behavior {
		JOUT("SYN: AlterDomainStmt -> ALTER_DOMAIN_P_any_name_DROP_CONSTRAINT_name_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterDomainStmt", ID_ALTERDOMAINSTMT, R_ALTERDOMAINSTMT_5);
	}
	| ALTER DOMAIN_P any_name DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior {
		JOUT("SYN: AlterDomainStmt -> ALTER_DOMAIN_P_any_name_DROP_CONSTRAINT_IF_P_EXISTS_name_opt_drop_behavior \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterDomainStmt", ID_ALTERDOMAINSTMT, R_ALTERDOMAINSTMT_6);
	}
	| ALTER DOMAIN_P any_name VALIDATE CONSTRAINT name {
		JOUT("SYN: AlterDomainStmt -> ALTER_DOMAIN_P_any_name_VALIDATE_CONSTRAINT_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterDomainStmt", ID_ALTERDOMAINSTMT, R_ALTERDOMAINSTMT_7);
	}
	;

TableElement
	: columnDef {
		JOUT("SYN: TableElement -> columnDef \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableElement", ID_TABLEELEMENT, R_TABLEELEMENT_1);
	}
	| TableLikeClause {
		JOUT("SYN: TableElement -> TableLikeClause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableElement", ID_TABLEELEMENT, R_TABLEELEMENT_2);
	}
	| TableConstraint {
		JOUT("SYN: TableElement -> TableConstraint \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableElement", ID_TABLEELEMENT, R_TABLEELEMENT_3);
	}
	;

CreateDomainStmt
	: CREATE DOMAIN_P any_name opt_as Typename ColQualList {
		JOUT("SYN: CreateDomainStmt -> CREATE_DOMAIN_P_any_name_opt_as_Typename_ColQualList \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CreateDomainStmt", ID_CREATEDOMAINSTMT, R_CREATEDOMAINSTMT_1);
	}
	;

opt_binary
	: BINARY {
		JOUT("SYN: opt_binary -> BINARY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_binary", ID_OPT_BINARY, R_OPT_BINARY_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_binary -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_binary", ID_OPT_BINARY, R_OPT_BINARY__NULL);
	}
	;

join_type
	: FULL join_outer {
		JOUT("SYN: join_type -> FULL_join_outer \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "join_type", ID_JOIN_TYPE, R_JOIN_TYPE_1);
	}
	| LEFT join_outer {
		JOUT("SYN: join_type -> LEFT_join_outer \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "join_type", ID_JOIN_TYPE, R_JOIN_TYPE_2);
	}
	| RIGHT join_outer {
		JOUT("SYN: join_type -> RIGHT_join_outer \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "join_type", ID_JOIN_TYPE, R_JOIN_TYPE_3);
	}
	| INNER_P {
		JOUT("SYN: join_type -> INNER_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "join_type", ID_JOIN_TYPE, R_JOIN_TYPE_4);
	}
	;

opt_oids
	: WITH OIDS {
		JOUT("SYN: opt_oids -> WITH_OIDS \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_oids", ID_OPT_OIDS, R_OPT_OIDS_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_oids -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_oids", ID_OPT_OIDS, R_OPT_OIDS__NULL);
	}
	;

TableFuncElement
	: ColId Typename opt_collate_clause {
		JOUT("SYN: TableFuncElement -> ColId_Typename_opt_collate_clause \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TableFuncElement", ID_TABLEFUNCELEMENT, R_TABLEFUNCELEMENT_1);
	}
	;

CreateRoleStmt
	: CREATE ROLE RoleId opt_with OptRoleList {
		JOUT("SYN: CreateRoleStmt -> CREATE_ROLE_RoleId_opt_with_OptRoleList \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CreateRoleStmt", ID_CREATEROLESTMT, R_CREATEROLESTMT_1);
	}
	;

CopyStmt
	: COPY opt_binary qualified_name opt_column_list opt_oids copy_from copy_file_name copy_delimiter opt_with copy_options {
		JOUT("SYN: CopyStmt -> COPY_opt_binary_qualified_name_opt_column_list_opt_oids_copy_from_copy_file_name_copy_delimiter_opt_with_copy_options \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "CopyStmt", ID_COPYSTMT, R_COPYSTMT_1);
	}
	| COPY select_with_parens TO copy_file_name opt_with copy_options {
		JOUT("SYN: CopyStmt -> COPY_select_with_parens_TO_copy_file_name_opt_with_copy_options \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CopyStmt", ID_COPYSTMT, R_COPYSTMT_2);
	}
	;

func_as
	: Sconst {
		JOUT("SYN: func_as -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_as", ID_FUNC_AS, R_FUNC_AS_1);
	}
	| Sconst SQL_COMMA Sconst {
		JOUT("SYN: func_as -> Sconst_SQL_COMMA_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_as", ID_FUNC_AS, R_FUNC_AS_2);
	}
	;

select_with_parens
	: SQL_LP select_no_parens SQL_RP {
		JOUT("SYN: select_with_parens -> SQL_LP_select_no_parens_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "select_with_parens", ID_SELECT_WITH_PARENS, R_SELECT_WITH_PARENS_1);
	}
	| SQL_LP select_with_parens SQL_RP {
		JOUT("SYN: select_with_parens -> SQL_LP_select_with_parens_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "select_with_parens", ID_SELECT_WITH_PARENS, R_SELECT_WITH_PARENS_2);
	}
	;

select_clause
	: simple_select {
		JOUT("SYN: select_clause -> simple_select \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_clause", ID_SELECT_CLAUSE, R_SELECT_CLAUSE_1);
	}
	| select_with_parens {
		JOUT("SYN: select_clause -> select_with_parens \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_clause", ID_SELECT_CLAUSE, R_SELECT_CLAUSE_2);
	}
	;

having_clause
	: HAVING a_expr {
		JOUT("SYN: having_clause -> HAVING_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "having_clause", ID_HAVING_CLAUSE, R_HAVING_CLAUSE_1);
	}
	| QUALIFY a_expr {
		JOUT("SYN: having_clause -> QUALIFY a_expr \n");
		// todo3
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "having_clause", ID_HAVING_CLAUSE, R_HAVING_CLAUSE_2);
	}
	| /* empty */ {
		JOUT("SYN: having_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "having_clause", ID_HAVING_CLAUSE, R_HAVING_CLAUSE__NULL);
	}
	;

sample_clause
	: SAMPLE when_clause_list sample_default END_P {
		// todo3
		JOUT("sample_clause -> SAMPLE when_clause_list sample_default END_P\n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "sample_clause", ID_SAMPLE_CLAUSE, R_SAMPLE_CLAUSE_1);
	}
	| SAMPLE a_expr {
		JOUT("sample_clause -> SAMPLE a_expr\n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "sample_clause", ID_SAMPLE_CLAUSE, R_SAMPLE_CLAUSE_2);
	}
	| {
		JOUT("sample_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "sample_clause", ID_SAMPLE_CLAUSE, R_SAMPLE_CLAUSE__NULL);
	};

sample_default
	: ELSE a_expr {
		// todo3
		JOUT("sample_default ->  ELSE a_expr\n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "sample_default", ID_SAMPLE_DEFAULT, R_SAMPLE_DEFAULT_1);
	}
	| {
		JOUT("sample_default -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "sample_default", ID_SAMPLE_DEFAULT, R_SAMPLE_DEFAULT_2);

	};

ColQualList
	: ColQualList ColConstraint {
		JOUT("SYN: ColQualList -> ColQualList_ColConstraint \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ColQualList", ID_COLQUALLIST, R_COLQUALLIST_1);
	}
	| /* empty */ {
		JOUT("SYN: ColQualList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "ColQualList", ID_COLQUALLIST, R_COLQUALLIST__NULL);
	}
	;

AlterEventTrigStmt
	: ALTER EVENT TRIGGER name enable_trigger {
		JOUT("SYN: AlterEventTrigStmt -> ALTER_EVENT_TRIGGER_name_enable_trigger \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterEventTrigStmt", ID_ALTEREVENTTRIGSTMT, R_ALTEREVENTTRIGSTMT_1);
	}
	;

DefACLOption
	: IN_P SCHEMA name_list {
		JOUT("SYN: DefACLOption -> IN_P_SCHEMA_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DefACLOption", ID_DEFACLOPTION, R_DEFACLOPTION_1);
	}
	| FOR ROLE name_list {
		JOUT("SYN: DefACLOption -> FOR_ROLE_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DefACLOption", ID_DEFACLOPTION, R_DEFACLOPTION_2);
	}
	| FOR USER name_list {
		JOUT("SYN: DefACLOption -> FOR_USER_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DefACLOption", ID_DEFACLOPTION, R_DEFACLOPTION_3);
	}
	;

fdw_option
	: HANDLER handler_name {
		JOUT("SYN: fdw_option -> HANDLER_handler_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fdw_option", ID_FDW_OPTION, R_FDW_OPTION_1);
	}
	| NO HANDLER {
		JOUT("SYN: fdw_option -> NO_HANDLER \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fdw_option", ID_FDW_OPTION, R_FDW_OPTION_2);
	}
	| VALIDATOR handler_name {
		JOUT("SYN: fdw_option -> VALIDATOR_handler_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fdw_option", ID_FDW_OPTION, R_FDW_OPTION_3);
	}
	| NO VALIDATOR {
		JOUT("SYN: fdw_option -> NO_VALIDATOR \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fdw_option", ID_FDW_OPTION, R_FDW_OPTION_4);
	}
	;

OptSeqOptList
	: SeqOptList {
		JOUT("SYN: OptSeqOptList -> SeqOptList \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptSeqOptList", ID_OPTSEQOPTLIST, R_OPTSEQOPTLIST_1);
	}
	| /* empty */ {
		JOUT("SYN: OptSeqOptList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptSeqOptList", ID_OPTSEQOPTLIST, R_OPTSEQOPTLIST__NULL);
	}
	;

opt_name_list
	: SQL_LP name_list SQL_RP {
		JOUT("SYN: opt_name_list -> SQL_LP_name_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_name_list", ID_OPT_NAME_LIST, R_OPT_NAME_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_name_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_name_list", ID_OPT_NAME_LIST, R_OPT_NAME_LIST__NULL);
	}
	;

ConstTypename
	: Numeric {
		JOUT("SYN: ConstTypename -> Numeric \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstTypename", ID_CONSTTYPENAME, R_CONSTTYPENAME_1);
	}
	| ConstBit {
		JOUT("SYN: ConstTypename -> ConstBit \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstTypename", ID_CONSTTYPENAME, R_CONSTTYPENAME_2);
	}
	| ConstCharacter {
		JOUT("SYN: ConstTypename -> ConstCharacter \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstTypename", ID_CONSTTYPENAME, R_CONSTTYPENAME_3);
	}
	| ConstDatetime {
		JOUT("SYN: ConstTypename -> ConstDatetime \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstTypename", ID_CONSTTYPENAME, R_CONSTTYPENAME_4);
	}
	| ConstGraphic {
		// todo4
	}
	;

alter_column_default
	: SET DEFAULT a_expr {
		JOUT("SYN: alter_column_default -> SET_DEFAULT_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_column_default", ID_ALTER_COLUMN_DEFAULT, R_ALTER_COLUMN_DEFAULT_1);
	}
	| DROP DEFAULT {
		JOUT("SYN: alter_column_default -> DROP_DEFAULT \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_column_default", ID_ALTER_COLUMN_DEFAULT, R_ALTER_COLUMN_DEFAULT_2);
	}
	;

ExclusionConstraintElem
	: index_elem WITH any_operator {
		JOUT("SYN: ExclusionConstraintElem -> index_elem_WITH_any_operator \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ExclusionConstraintElem", ID_EXCLUSIONCONSTRAINTELEM, R_EXCLUSIONCONSTRAINTELEM_1);
	}
	| index_elem WITH OPERATOR SQL_LP any_operator SQL_RP {
		JOUT("SYN: ExclusionConstraintElem -> index_elem_WITH_OPERATOR_SQL_LP_any_operator_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "ExclusionConstraintElem", ID_EXCLUSIONCONSTRAINTELEM, R_EXCLUSIONCONSTRAINTELEM_2);
	}
	;

var_list
	: var_value {
		JOUT("SYN: var_list -> var_value \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "var_list", ID_VAR_LIST, R_VAR_LIST_1);
	}
	| var_list SQL_COMMA var_value {
		JOUT("SYN: var_list -> var_list_SQL_COMMA_var_value \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "var_list", ID_VAR_LIST, R_VAR_LIST_2);
	}
	;

CreateTableSpaceStmt
	: CREATE TABLESPACE name OptTableSpaceOwner LOCATION Sconst {
		JOUT("SYN: CreateTableSpaceStmt -> CREATE_TABLESPACE_name_OptTableSpaceOwner_LOCATION_Sconst \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CreateTableSpaceStmt", ID_CREATETABLESPACESTMT, R_CREATETABLESPACESTMT_1);
	}
	;

opt_with_clause
	: with_clause {
		JOUT("SYN: opt_with_clause -> with_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_with_clause", ID_OPT_WITH_CLAUSE, R_OPT_WITH_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_with_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_with_clause", ID_OPT_WITH_CLAUSE, R_OPT_WITH_CLAUSE__NULL);
	}
	;

RenameStmt
	: ALTER AGGREGATE func_name aggr_args RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_AGGREGATE_func_name_aggr_args_RENAME_TO_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_1);
	}
	| ALTER COLLATION any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_COLLATION_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_2);
	}
	| ALTER CONVERSION_P any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_CONVERSION_P_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_3);
	}
	| ALTER DATABASE database_name RENAME TO database_name {
		JOUT("SYN: RenameStmt -> ALTER_DATABASE_database_name_RENAME_TO_database_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_4);
	}
	| ALTER DOMAIN_P any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_DOMAIN_P_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_5);
	}
	| ALTER DOMAIN_P any_name RENAME CONSTRAINT name TO name {
		JOUT("SYN: RenameStmt -> ALTER_DOMAIN_P_any_name_RENAME_CONSTRAINT_name_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_6);
	}
	| ALTER FOREIGN DATA_P WRAPPER name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_FOREIGN_DATA_P_WRAPPER_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_7);
	}
	| ALTER FUNCTION function_with_argtypes RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_FUNCTION_function_with_argtypes_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_8);
	}
	| ALTER GROUP_P RoleId RENAME TO RoleId {
		JOUT("SYN: RenameStmt -> ALTER_GROUP_P_RoleId_RENAME_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_9);
	}
	| ALTER opt_procedural LANGUAGE name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_opt_procedural_LANGUAGE_name_RENAME_TO_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_10);
	}
	| ALTER OPERATOR CLASS any_name USING access_method RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_OPERATOR_CLASS_any_name_USING_access_method_RENAME_TO_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_11);
	}
	| ALTER OPERATOR FAMILY any_name USING access_method RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_OPERATOR_FAMILY_any_name_USING_access_method_RENAME_TO_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_12);
	}
	| ALTER SCHEMA name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_SCHEMA_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_13);
	}
	| ALTER SERVER name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_SERVER_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_14);
	}
	| ALTER TABLE relation_expr RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TABLE_relation_expr_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_15);
	}
	| ALTER TABLE IF_P EXISTS relation_expr RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TABLE_IF_P_EXISTS_relation_expr_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_16);
	}
	| ALTER SEQUENCE qualified_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_SEQUENCE_qualified_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_17);
	}
	| ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_SEQUENCE_IF_P_EXISTS_qualified_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_18);
	}
	| ALTER VIEW qualified_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_VIEW_qualified_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_19);
	}
	| ALTER VIEW IF_P EXISTS qualified_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_VIEW_IF_P_EXISTS_qualified_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_20);
	}
	| ALTER INDEX qualified_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_INDEX_qualified_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_21);
	}
	| ALTER INDEX IF_P EXISTS qualified_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_INDEX_IF_P_EXISTS_qualified_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_22);
	}
	| ALTER FOREIGN TABLE relation_expr RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_FOREIGN_TABLE_relation_expr_RENAME_TO_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_23);
	}
	| ALTER FOREIGN TABLE IF_P EXISTS relation_expr RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_FOREIGN_TABLE_IF_P_EXISTS_relation_expr_RENAME_TO_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_24);
	}
	| ALTER TABLE relation_expr RENAME opt_column name TO name {
		JOUT("SYN: RenameStmt -> ALTER_TABLE_relation_expr_RENAME_opt_column_name_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_25);
	}
	| ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name {
		JOUT("SYN: RenameStmt -> ALTER_TABLE_IF_P_EXISTS_relation_expr_RENAME_opt_column_name_TO_name \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_26);
	}
	| ALTER TABLE relation_expr RENAME CONSTRAINT name TO name {
		JOUT("SYN: RenameStmt -> ALTER_TABLE_relation_expr_RENAME_CONSTRAINT_name_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_27);
	}
	| ALTER FOREIGN TABLE relation_expr RENAME opt_column name TO name {
		JOUT("SYN: RenameStmt -> ALTER_FOREIGN_TABLE_relation_expr_RENAME_opt_column_name_TO_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_28);
	}
	| ALTER FOREIGN TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name {
		JOUT("SYN: RenameStmt -> ALTER_FOREIGN_TABLE_IF_P_EXISTS_relation_expr_RENAME_opt_column_name_TO_name \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_29);
	}
	| ALTER TRIGGER name ON qualified_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TRIGGER_name_ON_qualified_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_30);
	}
	| ALTER EVENT TRIGGER name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_EVENT_TRIGGER_name_RENAME_TO_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_31);
	}
	| ALTER ROLE RoleId RENAME TO RoleId {
		JOUT("SYN: RenameStmt -> ALTER_ROLE_RoleId_RENAME_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_32);
	}
	| ALTER USER RoleId RENAME TO RoleId {
		JOUT("SYN: RenameStmt -> ALTER_USER_RoleId_RENAME_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_33);
	}
	| ALTER TABLESPACE name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TABLESPACE_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_34);
	}
	| ALTER TABLESPACE name SET reloptions {
		JOUT("SYN: RenameStmt -> ALTER_TABLESPACE_name_SET_reloptions \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_35);
	}
	| ALTER TABLESPACE name RESET reloptions {
		JOUT("SYN: RenameStmt -> ALTER_TABLESPACE_name_RESET_reloptions \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_36);
	}
	| ALTER TEXT_P SEARCH PARSER any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TEXT_P_SEARCH_PARSER_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_37);
	}
	| ALTER TEXT_P SEARCH DICTIONARY any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TEXT_P_SEARCH_DICTIONARY_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_38);
	}
	| ALTER TEXT_P SEARCH TEMPLATE any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TEXT_P_SEARCH_TEMPLATE_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_39);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_40);
	}
	| ALTER TYPE_P any_name RENAME TO name {
		JOUT("SYN: RenameStmt -> ALTER_TYPE_P_any_name_RENAME_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_41);
	}
	| ALTER TYPE_P any_name RENAME ATTRIBUTE name TO name opt_drop_behavior {
		JOUT("SYN: RenameStmt -> ALTER_TYPE_P_any_name_RENAME_ATTRIBUTE_name_TO_name_opt_drop_behavior \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "RenameStmt", ID_RENAMESTMT, R_RENAMESTMT_42);
	}
	;

func_args_list
	: func_arg {
		JOUT("SYN: func_args_list -> func_arg \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_args_list", ID_FUNC_ARGS_LIST, R_FUNC_ARGS_LIST_1);
	}
	| func_args_list SQL_COMMA func_arg {
		JOUT("SYN: func_args_list -> func_args_list_SQL_COMMA_func_arg \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_args_list", ID_FUNC_ARGS_LIST, R_FUNC_ARGS_LIST_2);
	}
	;

OnCommitOption
	: ON COMMIT DROP {
		JOUT("SYN: OnCommitOption -> ON_COMMIT_DROP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "OnCommitOption", ID_ONCOMMITOPTION, R_ONCOMMITOPTION_1);
	}
	| ON COMMIT DELETE_P ROWS {
		JOUT("SYN: OnCommitOption -> ON_COMMIT_DELETE_P_ROWS \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OnCommitOption", ID_ONCOMMITOPTION, R_ONCOMMITOPTION_2);
	}
	| ON COMMIT PRESERVE ROWS {
		JOUT("SYN: OnCommitOption -> ON_COMMIT_PRESERVE_ROWS \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OnCommitOption", ID_ONCOMMITOPTION, R_ONCOMMITOPTION_3);
	}
	| /* empty */ {
		JOUT("SYN: OnCommitOption -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OnCommitOption", ID_ONCOMMITOPTION, R_ONCOMMITOPTION__NULL);
	}
	;

interval_second
	: SECOND_P {
		JOUT("SYN: interval_second -> SECOND_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "interval_second", ID_INTERVAL_SECOND, R_INTERVAL_SECOND_1);
	}
	| SECOND_P SQL_LP Iconst SQL_RP {
		JOUT("SYN: interval_second -> SECOND_P_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "interval_second", ID_INTERVAL_SECOND, R_INTERVAL_SECOND_2);
	}
	;

func_name
	: type_function_name {
		JOUT("SYN: func_name -> type_function_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_name", ID_FUNC_NAME, R_FUNC_NAME_1);
	}
	| ColId indirection {
		JOUT("SYN: func_name -> ColId_indirection \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "func_name", ID_FUNC_NAME, R_FUNC_NAME_2);
	}
	;

arg_class
	: IN_P {
		JOUT("SYN: arg_class -> IN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "arg_class", ID_ARG_CLASS, R_ARG_CLASS_1);
	}
	| OUT_P {
		JOUT("SYN: arg_class -> OUT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "arg_class", ID_ARG_CLASS, R_ARG_CLASS_2);
	}
	| INOUT {
		JOUT("SYN: arg_class -> INOUT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "arg_class", ID_ARG_CLASS, R_ARG_CLASS_3);
	}
	| IN_P OUT_P {
		JOUT("SYN: arg_class -> IN_P_OUT_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "arg_class", ID_ARG_CLASS, R_ARG_CLASS_4);
	}
	| VARIADIC {
		JOUT("SYN: arg_class -> VARIADIC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "arg_class", ID_ARG_CLASS, R_ARG_CLASS_5);
	}
	;

ColId_or_Sconst
	: ColId {
		JOUT("SYN: ColId_or_Sconst -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColId_or_Sconst", ID_COLID_OR_SCONST, R_COLID_OR_SCONST_1);
	}
	| Sconst {
		JOUT("SYN: ColId_or_Sconst -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColId_or_Sconst", ID_COLID_OR_SCONST, R_COLID_OR_SCONST_2);
	}
	;

from_clause
	: FROM from_list {
		JOUT("SYN: from_clause -> FROM_from_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "from_clause", ID_FROM_CLAUSE, R_FROM_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: from_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "from_clause", ID_FROM_CLAUSE, R_FROM_CLAUSE__NULL);
	}
	;

type_function_name
	: IDENT {
		JOUT("SYN: type_function_name -> IDENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_function_name", ID_TYPE_FUNCTION_NAME, R_TYPE_FUNCTION_NAME_1);
	}
	| unreserved_keyword {
		JOUT("SYN: type_function_name -> unreserved_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_function_name", ID_TYPE_FUNCTION_NAME, R_TYPE_FUNCTION_NAME_2);
	}
	| type_func_name_keyword {
		JOUT("SYN: type_function_name -> type_func_name_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_function_name", ID_TYPE_FUNCTION_NAME, R_TYPE_FUNCTION_NAME_3);
	}
	;

lock_type
	: ACCESS SHARE {
		JOUT("SYN: lock_type -> ACCESS_SHARE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_1);
	}
	| ROW SHARE {
		JOUT("SYN: lock_type -> ROW_SHARE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_2);
	}
	| ROW EXCLUSIVE {
		JOUT("SYN: lock_type -> ROW_EXCLUSIVE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_3);
	}
	| SHARE UPDATE EXCLUSIVE {
		JOUT("SYN: lock_type -> SHARE_UPDATE_EXCLUSIVE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_4);
	}
	| SHARE {
		JOUT("SYN: lock_type -> SHARE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_5);
	}
	| SHARE ROW EXCLUSIVE {
		JOUT("SYN: lock_type -> SHARE_ROW_EXCLUSIVE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_6);
	}
	| EXCLUSIVE {
		JOUT("SYN: lock_type -> EXCLUSIVE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_7);
	}
	| ACCESS EXCLUSIVE {
		JOUT("SYN: lock_type -> ACCESS_EXCLUSIVE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_8);
	}
	| ACCESS {
		JOUT("SYN: lock_type -> ACCESS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "lock_type", ID_LOCK_TYPE, R_LOCK_TYPE_9);
	}
	;

select_limit
	: limit_clause offset_clause {
		JOUT("SYN: select_limit -> limit_clause_offset_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "select_limit", ID_SELECT_LIMIT, R_SELECT_LIMIT_1);
	}
	| offset_clause limit_clause {
		JOUT("SYN: select_limit -> offset_clause_limit_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "select_limit", ID_SELECT_LIMIT, R_SELECT_LIMIT_2);
	}
	| limit_clause {
		JOUT("SYN: select_limit -> limit_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_limit", ID_SELECT_LIMIT, R_SELECT_LIMIT_3);
	}
	| offset_clause {
		JOUT("SYN: select_limit -> offset_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_limit", ID_SELECT_LIMIT, R_SELECT_LIMIT_4);
	}
	;

opt_provider
	: FOR ColId_or_Sconst {
		JOUT("SYN: opt_provider -> FOR_ColId_or_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_provider", ID_OPT_PROVIDER, R_OPT_PROVIDER_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_provider -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_provider", ID_OPT_PROVIDER, R_OPT_PROVIDER__NULL);
	}
	;

constraints_set_list
	: ALL {
		JOUT("SYN: constraints_set_list -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "constraints_set_list", ID_CONSTRAINTS_SET_LIST, R_CONSTRAINTS_SET_LIST_1);
	}
	| qualified_name_list {
		JOUT("SYN: constraints_set_list -> qualified_name_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "constraints_set_list", ID_CONSTRAINTS_SET_LIST, R_CONSTRAINTS_SET_LIST_2);
	}
	;

opt_for_locking_clause
	: for_locking_clause {
		JOUT("SYN: opt_for_locking_clause -> for_locking_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_for_locking_clause", ID_OPT_FOR_LOCKING_CLAUSE, R_OPT_FOR_LOCKING_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_for_locking_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_for_locking_clause", ID_OPT_FOR_LOCKING_CLAUSE, R_OPT_FOR_LOCKING_CLAUSE__NULL);
	}
	;

DropTableSpaceStmt
	: DROP TABLESPACE name {
		JOUT("SYN: DropTableSpaceStmt -> DROP_TABLESPACE_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DropTableSpaceStmt", ID_DROPTABLESPACESTMT, R_DROPTABLESPACESTMT_1);
	}
	| DROP TABLESPACE IF_P EXISTS name {
		JOUT("SYN: DropTableSpaceStmt -> DROP_TABLESPACE_IF_P_EXISTS_name \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropTableSpaceStmt", ID_DROPTABLESPACESTMT, R_DROPTABLESPACESTMT_2);
	}
	;

reloptions
	: SQL_LP reloption_list SQL_RP {
		JOUT("SYN: reloptions -> SQL_LP_reloption_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "reloptions", ID_RELOPTIONS, R_RELOPTIONS_1);
	}
	;

SeqOptElem
	: CACHE NumericOnly {
		JOUT("SYN: SeqOptElem -> CACHE_NumericOnly \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_1);
	}
	| CYCLE {
		JOUT("SYN: SeqOptElem -> CYCLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_2);
	}
	| NO CYCLE {
		JOUT("SYN: SeqOptElem -> NO_CYCLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_3);
	}
	| INCREMENT opt_by NumericOnly {
		JOUT("SYN: SeqOptElem -> INCREMENT_opt_by_NumericOnly \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_4);
	}
	| MAXVALUE NumericOnly {
		JOUT("SYN: SeqOptElem -> MAXVALUE_NumericOnly \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_5);
	}
	| MINVALUE NumericOnly {
		JOUT("SYN: SeqOptElem -> MINVALUE_NumericOnly \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_6);
	}
	| NO MAXVALUE {
		JOUT("SYN: SeqOptElem -> NO_MAXVALUE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_7);
	}
	| NO MINVALUE {
		JOUT("SYN: SeqOptElem -> NO_MINVALUE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_8);
	}
	| OWNED BY any_name {
		JOUT("SYN: SeqOptElem -> OWNED_BY_any_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_9);
	}
	| START opt_with NumericOnly {
		JOUT("SYN: SeqOptElem -> START_opt_with_NumericOnly \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_10);
	}
	| RESTART {
		JOUT("SYN: SeqOptElem -> RESTART \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_11);
	}
	| RESTART opt_with NumericOnly {
		JOUT("SYN: SeqOptElem -> RESTART_opt_with_NumericOnly \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "SeqOptElem", ID_SEQOPTELEM, R_SEQOPTELEM_12);
	}
	;

AlterSeqStmt
	: ALTER SEQUENCE qualified_name SeqOptList {
		JOUT("SYN: AlterSeqStmt -> ALTER_SEQUENCE_qualified_name_SeqOptList \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterSeqStmt", ID_ALTERSEQSTMT, R_ALTERSEQSTMT_1);
	}
	| ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList {
		JOUT("SYN: AlterSeqStmt -> ALTER_SEQUENCE_IF_P_EXISTS_qualified_name_SeqOptList \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterSeqStmt", ID_ALTERSEQSTMT, R_ALTERSEQSTMT_2);
	}
	;

opt_granted_by
	: GRANTED BY RoleId {
		JOUT("SYN: opt_granted_by -> GRANTED_BY_RoleId \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_granted_by", ID_OPT_GRANTED_BY, R_OPT_GRANTED_BY_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_granted_by -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_granted_by", ID_OPT_GRANTED_BY, R_OPT_GRANTED_BY__NULL);
	}
	;

array_expr
	: SQL_LB expr_list SQL_RB {
		JOUT("SYN: array_expr -> SQL_LB_expr_list_SQL_RB \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "array_expr", ID_ARRAY_EXPR, R_ARRAY_EXPR_1);
	}
	| SQL_LB array_expr_list SQL_RB {
		JOUT("SYN: array_expr -> SQL_LB_array_expr_list_SQL_RB \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "array_expr", ID_ARRAY_EXPR, R_ARRAY_EXPR_2);
	}
	| SQL_LB SQL_RB {
		JOUT("SYN: array_expr -> SQL_LB_SQL_RB \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "array_expr", ID_ARRAY_EXPR, R_ARRAY_EXPR_3);
	}
	;

opt_from_in
	: from_in {
		JOUT("SYN: opt_from_in -> from_in \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_from_in", ID_OPT_FROM_IN, R_OPT_FROM_IN_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_from_in -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_from_in", ID_OPT_FROM_IN, R_OPT_FROM_IN__NULL);
	}
	;

Iconst
	: ICONST {
		JOUT("SYN: Iconst -> ICONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Iconst", ID_ICONST, R_ICONST_1);
	}
	;

common_func_opt_item
	: CALLED ON NULL_P INPUT_P {
		JOUT("SYN: common_func_opt_item -> CALLED_ON_NULL_P_INPUT_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_1);
	}
	| RETURNS NULL_P ON NULL_P INPUT_P {
		JOUT("SYN: common_func_opt_item -> RETURNS_NULL_P_ON_NULL_P_INPUT_P \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_2);
	}
	| STRICT_P {
		JOUT("SYN: common_func_opt_item -> STRICT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_3);
	}
	| IMMUTABLE {
		JOUT("SYN: common_func_opt_item -> IMMUTABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_4);
	}
	| STABLE {
		JOUT("SYN: common_func_opt_item -> STABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_5);
	}
	| VOLATILE {
		JOUT("SYN: common_func_opt_item -> VOLATILE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_6);
	}
	| EXTERNAL SECURITY DEFINER {
		JOUT("SYN: common_func_opt_item -> EXTERNAL_SECURITY_DEFINER \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_7);
	}
	| EXTERNAL SECURITY INVOKER {
		JOUT("SYN: common_func_opt_item -> EXTERNAL_SECURITY_INVOKER \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_8);
	}
	| SECURITY DEFINER {
		JOUT("SYN: common_func_opt_item -> SECURITY_DEFINER \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_9);
	}
	| SECURITY INVOKER {
		JOUT("SYN: common_func_opt_item -> SECURITY_INVOKER \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_10);
	}
	| LEAKPROOF {
		JOUT("SYN: common_func_opt_item -> LEAKPROOF \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_11);
	}
	| NOT LEAKPROOF {
		JOUT("SYN: common_func_opt_item -> NOT_LEAKPROOF \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_12);
	}
	| COST NumericOnly {
		JOUT("SYN: common_func_opt_item -> COST_NumericOnly \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_13);
	}
	| ROWS NumericOnly {
		JOUT("SYN: common_func_opt_item -> ROWS_NumericOnly \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_14);
	}
	| FunctionSetResetClause {
		JOUT("SYN: common_func_opt_item -> FunctionSetResetClause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "common_func_opt_item", ID_COMMON_FUNC_OPT_ITEM, R_COMMON_FUNC_OPT_ITEM_15);
	}
	;

func_arg_with_default
	: func_arg {
		JOUT("SYN: func_arg_with_default -> func_arg \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_arg_with_default", ID_FUNC_ARG_WITH_DEFAULT, R_FUNC_ARG_WITH_DEFAULT_1);
	}
	| func_arg DEFAULT a_expr {
		JOUT("SYN: func_arg_with_default -> func_arg_DEFAULT_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_arg_with_default", ID_FUNC_ARG_WITH_DEFAULT, R_FUNC_ARG_WITH_DEFAULT_2);
	}
	| func_arg SQL_EQ a_expr {
		JOUT("SYN: func_arg_with_default -> func_arg_SQL_EQ_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_arg_with_default", ID_FUNC_ARG_WITH_DEFAULT, R_FUNC_ARG_WITH_DEFAULT_3);
	}
	;

TriggerActionTime
	: BEFORE {
		JOUT("SYN: TriggerActionTime -> BEFORE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerActionTime", ID_TRIGGERACTIONTIME, R_TRIGGERACTIONTIME_1);
	}
	| AFTER {
		JOUT("SYN: TriggerActionTime -> AFTER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerActionTime", ID_TRIGGERACTIONTIME, R_TRIGGERACTIONTIME_2);
	}
	| INSTEAD OF {
		JOUT("SYN: TriggerActionTime -> INSTEAD_OF \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "TriggerActionTime", ID_TRIGGERACTIONTIME, R_TRIGGERACTIONTIME_3);
	}
	;

privileges
	: privilege_list {
		JOUT("SYN: privileges -> privilege_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "privileges", ID_PRIVILEGES, R_PRIVILEGES_1);
	}
	| ALL {
		JOUT("SYN: privileges -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "privileges", ID_PRIVILEGES, R_PRIVILEGES_2);
	}
	| ALL PRIVILEGES {
		JOUT("SYN: privileges -> ALL_PRIVILEGES \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privileges", ID_PRIVILEGES, R_PRIVILEGES_3);
	}
	| ALL SQL_LP columnList SQL_RP {
		JOUT("SYN: privileges -> ALL_SQL_LP_columnList_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "privileges", ID_PRIVILEGES, R_PRIVILEGES_4);
	}
	| ALL PRIVILEGES SQL_LP columnList SQL_RP {
		JOUT("SYN: privileges -> ALL_PRIVILEGES_SQL_LP_columnList_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "privileges", ID_PRIVILEGES, R_PRIVILEGES_5);
	}
	;

AlterRoleSetStmt
	: ALTER ROLE RoleId opt_in_database SetResetClause {
		JOUT("SYN: AlterRoleSetStmt -> ALTER_ROLE_RoleId_opt_in_database_SetResetClause \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterRoleSetStmt", ID_ALTERROLESETSTMT, R_ALTERROLESETSTMT_1);
	}
	;

opt_table
	: TABLE {
		JOUT("SYN: opt_table -> TABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_table", ID_OPT_TABLE, R_OPT_TABLE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_table -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_table", ID_OPT_TABLE, R_OPT_TABLE__NULL);
	}
	;

where_clause
	: WHERE a_expr {
		JOUT("SYN: where_clause -> WHERE_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "where_clause", ID_WHERE_CLAUSE, R_WHERE_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: where_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "where_clause", ID_WHERE_CLAUSE, R_WHERE_CLAUSE__NULL);
	}
	;

TableLikeClause
	: LIKE qualified_name TableLikeOptionList {
		JOUT("SYN: TableLikeClause -> LIKE_qualified_name_TableLikeOptionList \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TableLikeClause", ID_TABLELIKECLAUSE, R_TABLELIKECLAUSE_1);
	}
	;

OptForeignTableElementList
	: SQL_LP ForeignTableElementList SQL_RP {
		JOUT("SYN: OptForeignTableElementList -> SQL_LP_ForeignTableElementList_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "OptForeignTableElementList", ID_OPTFOREIGNTABLEELEMENTLIST, R_OPTFOREIGNTABLEELEMENTLIST_1);
	}
	| SQL_LP SQL_RP {
		JOUT("SYN: OptForeignTableElementList -> SQL_LP_SQL_RP \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptForeignTableElementList", ID_OPTFOREIGNTABLEELEMENTLIST, R_OPTFOREIGNTABLEELEMENTLIST_2);
	}
	;

OptTableSpaceOwner
	: OWNER name {
		JOUT("SYN: OptTableSpaceOwner -> OWNER_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptTableSpaceOwner", ID_OPTTABLESPACEOWNER, R_OPTTABLESPACEOWNER_1);
	}
	| /* empty */ {
		JOUT("SYN: OptTableSpaceOwner -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptTableSpaceOwner", ID_OPTTABLESPACEOWNER, R_OPTTABLESPACEOWNER__NULL);
	}
	;

func_alias_clause
	: alias_clause {
		JOUT("SYN: func_alias_clause -> alias_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_alias_clause", ID_FUNC_ALIAS_CLAUSE, R_FUNC_ALIAS_CLAUSE_1);
	}
	| AS SQL_LP TableFuncElementList SQL_RP {
		JOUT("SYN: func_alias_clause -> AS_SQL_LP_TableFuncElementList_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_alias_clause", ID_FUNC_ALIAS_CLAUSE, R_FUNC_ALIAS_CLAUSE_2);
	}
	| AS ColId SQL_LP TableFuncElementList SQL_RP {
		JOUT("SYN: func_alias_clause -> AS_ColId_SQL_LP_TableFuncElementList_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_alias_clause", ID_FUNC_ALIAS_CLAUSE, R_FUNC_ALIAS_CLAUSE_3);
	}
	| ColId SQL_LP TableFuncElementList SQL_RP {
		JOUT("SYN: func_alias_clause -> ColId_SQL_LP_TableFuncElementList_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_alias_clause", ID_FUNC_ALIAS_CLAUSE, R_FUNC_ALIAS_CLAUSE_4);
	}
	| /* empty */ {
		JOUT("SYN: func_alias_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "func_alias_clause", ID_FUNC_ALIAS_CLAUSE, R_FUNC_ALIAS_CLAUSE__NULL);
	}
	;

opt_index_definition
	: opt_unique PRIMARY INDEX opt_index_name SQL_LP target_list SQL_RP {
		// MODIFY ADD opt_unique HERE 
		JOUT("SYN: opt_index_definition -> PRIMARY INDEX opt_index_name SQL_LP target_list SQL_RP \n");
		//$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "opt_index_definition", ID_OPT_INDEX_DEFINITION, R_OPT_INDEX_DEFINITION_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_index_definition -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_index_definition", ID_OPT_INDEX_DEFINITION, R_OPT_INDEX_DEFINITION__NULL);
	};

opt_with_data
	: WITH DATA_P opt_index_definition OnCommitOption {
		JOUT("SYN: opt_with_data -> WITH_DATA_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opt_with_data", ID_OPT_WITH_DATA, R_OPT_WITH_DATA_1);
	}
	| WITH NO DATA_P opt_index_definition OnCommitOption {
		JOUT("SYN: opt_with_data -> WITH_NO_DATA_P \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "opt_with_data", ID_OPT_WITH_DATA, R_OPT_WITH_DATA_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_with_data -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_with_data", ID_OPT_WITH_DATA, R_OPT_WITH_DATA__NULL);
	}
	;

sort_clause
	: ORDER BY sortby_list {
		JOUT("SYN: sort_clause -> ORDER_BY_sortby_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "sort_clause", ID_SORT_CLAUSE, R_SORT_CLAUSE_1);
	}
	;

createfunc_opt_list
	: createfunc_opt_item {
		JOUT("SYN: createfunc_opt_list -> createfunc_opt_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "createfunc_opt_list", ID_CREATEFUNC_OPT_LIST, R_CREATEFUNC_OPT_LIST_1);
	}
	| createfunc_opt_list createfunc_opt_item {
		JOUT("SYN: createfunc_opt_list -> createfunc_opt_list_createfunc_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "createfunc_opt_list", ID_CREATEFUNC_OPT_LIST, R_CREATEFUNC_OPT_LIST_2);
	}
	;

opt_definition
	: WITH definition {
		JOUT("SYN: opt_definition -> WITH_definition \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_definition", ID_OPT_DEFINITION, R_OPT_DEFINITION_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_definition -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_definition", ID_OPT_DEFINITION, R_OPT_DEFINITION__NULL);
	}
	;

key_update
	: ON UPDATE key_action {
		JOUT("SYN: key_update -> ON_UPDATE_key_action \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "key_update", ID_KEY_UPDATE, R_KEY_UPDATE_1);
	}
	;

CreateTrigStmt
	: CREATE TRIGGER name TriggerActionTime TriggerEvents ON qualified_name TriggerForSpec TriggerWhen EXECUTE PROCEDURE func_name SQL_LP TriggerFuncArgs SQL_RP {
		JOUT("SYN: CreateTrigStmt -> CREATE_TRIGGER_name_TriggerActionTime_TriggerEvents_ON_qualified_name_TriggerForSpec_TriggerWhen_EXECUTE_PROCEDURE_func_name_SQL_LP_TriggerFuncArgs_SQL_RP \n");
		$$ = cons_subtree(15, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
		set_content(&$$, @$.first_line, "CreateTrigStmt", ID_CREATETRIGSTMT, R_CREATETRIGSTMT_1);
	}
	| CREATE CONSTRAINT TRIGGER name AFTER TriggerEvents ON qualified_name OptConstrFromTable ConstraintAttributeSpec FOR EACH ROW TriggerWhen EXECUTE PROCEDURE func_name SQL_LP TriggerFuncArgs SQL_RP {
		JOUT("SYN: CreateTrigStmt -> CREATE_CONSTRAINT_TRIGGER_name_AFTER_TriggerEvents_ON_qualified_name_OptConstrFromTable_ConstraintAttributeSpec_FOR_EACH_ROW_TriggerWhen_EXECUTE_PROCEDURE_func_name_SQL_LP_TriggerFuncArgs_SQL_RP \n");
		$$ = cons_subtree(20, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);
		set_content(&$$, @$.first_line, "CreateTrigStmt", ID_CREATETRIGSTMT, R_CREATETRIGSTMT_2);
	}
	;

substr_list
	: a_expr substr_from substr_for {
		JOUT("SYN: substr_list -> a_expr_substr_from_substr_for \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "substr_list", ID_SUBSTR_LIST, R_SUBSTR_LIST_1);
	}
	| a_expr substr_for substr_from {
		JOUT("SYN: substr_list -> a_expr_substr_for_substr_from \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "substr_list", ID_SUBSTR_LIST, R_SUBSTR_LIST_2);
	}
	| a_expr substr_from {
		JOUT("SYN: substr_list -> a_expr_substr_from \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "substr_list", ID_SUBSTR_LIST, R_SUBSTR_LIST_3);
	}
	| a_expr substr_for {
		JOUT("SYN: substr_list -> a_expr_substr_for \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "substr_list", ID_SUBSTR_LIST, R_SUBSTR_LIST_4);
	}
	| expr_list {
		JOUT("SYN: substr_list -> expr_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "substr_list", ID_SUBSTR_LIST, R_SUBSTR_LIST_5);
	}
	| /* empty */ {
		JOUT("SYN: substr_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "substr_list", ID_SUBSTR_LIST, R_SUBSTR_LIST__NULL);
	}
	;

CreateFdwStmt
	: CREATE FOREIGN DATA_P WRAPPER name opt_fdw_options create_generic_options {
		JOUT("SYN: CreateFdwStmt -> CREATE_FOREIGN_DATA_P_WRAPPER_name_opt_fdw_options_create_generic_options \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CreateFdwStmt", ID_CREATEFDWSTMT, R_CREATEFDWSTMT_1);
	}
	;

where_or_current_clause
	: WHERE a_expr {
		JOUT("SYN: where_or_current_clause -> WHERE_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "where_or_current_clause", ID_WHERE_OR_CURRENT_CLAUSE, R_WHERE_OR_CURRENT_CLAUSE_1);
	}
	| WHERE CURRENT_P OF cursor_name {
		JOUT("SYN: where_or_current_clause -> WHERE_CURRENT_P_OF_cursor_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "where_or_current_clause", ID_WHERE_OR_CURRENT_CLAUSE, R_WHERE_OR_CURRENT_CLAUSE_2);
	}
	| /* empty */ {
		JOUT("SYN: where_or_current_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "where_or_current_clause", ID_WHERE_OR_CURRENT_CLAUSE, R_WHERE_OR_CURRENT_CLAUSE__NULL);
	}
	;

zone_value
	: Sconst {
		JOUT("SYN: zone_value -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "zone_value", ID_ZONE_VALUE, R_ZONE_VALUE_1);
	}
	| IDENT {
		JOUT("SYN: zone_value -> IDENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "zone_value", ID_ZONE_VALUE, R_ZONE_VALUE_2);
	}
	| ConstInterval Sconst opt_interval {
		JOUT("SYN: zone_value -> ConstInterval_Sconst_opt_interval \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "zone_value", ID_ZONE_VALUE, R_ZONE_VALUE_3);
	}
	| ConstInterval SQL_LP Iconst SQL_RP Sconst opt_interval {
		JOUT("SYN: zone_value -> ConstInterval_SQL_LP_Iconst_SQL_RP_Sconst_opt_interval \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "zone_value", ID_ZONE_VALUE, R_ZONE_VALUE_4);
	}
	| NumericOnly {
		JOUT("SYN: zone_value -> NumericOnly \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "zone_value", ID_ZONE_VALUE, R_ZONE_VALUE_5);
	}
	| DEFAULT {
		JOUT("SYN: zone_value -> DEFAULT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "zone_value", ID_ZONE_VALUE, R_ZONE_VALUE_6);
	}
	| LOCAL {
		JOUT("SYN: zone_value -> LOCAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "zone_value", ID_ZONE_VALUE, R_ZONE_VALUE_7);
	}
	;

TriggerOneEvent
	: INSERT {
		JOUT("SYN: TriggerOneEvent -> INSERT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerOneEvent", ID_TRIGGERONEEVENT, R_TRIGGERONEEVENT_1);
	}
	| DELETE_P {
		JOUT("SYN: TriggerOneEvent -> DELETE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerOneEvent", ID_TRIGGERONEEVENT, R_TRIGGERONEEVENT_2);
	}
	| UPDATE {
		JOUT("SYN: TriggerOneEvent -> UPDATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerOneEvent", ID_TRIGGERONEEVENT, R_TRIGGERONEEVENT_3);
	}
	| UPDATE OF columnList {
		JOUT("SYN: TriggerOneEvent -> UPDATE_OF_columnList \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TriggerOneEvent", ID_TRIGGERONEEVENT, R_TRIGGERONEEVENT_4);
	}
	| TRUNCATE {
		JOUT("SYN: TriggerOneEvent -> TRUNCATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerOneEvent", ID_TRIGGERONEEVENT, R_TRIGGERONEEVENT_5);
	}
	;

opt_set_data
	: SET DATA_P {
		JOUT("SYN: opt_set_data -> SET_DATA_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_set_data", ID_OPT_SET_DATA, R_OPT_SET_DATA_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_set_data -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_set_data", ID_OPT_SET_DATA, R_OPT_SET_DATA__NULL);
	}
	;

RevokeStmt
	: REVOKE privileges ON privilege_target FROM grantee_list opt_drop_behavior {
		JOUT("SYN: RevokeStmt -> REVOKE_privileges_ON_privilege_target_FROM_grantee_list_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RevokeStmt", ID_REVOKESTMT, R_REVOKESTMT_1);
	}
	| REVOKE GRANT OPTION FOR privileges ON privilege_target FROM grantee_list opt_drop_behavior {
		JOUT("SYN: RevokeStmt -> REVOKE_GRANT_OPTION_FOR_privileges_ON_privilege_target_FROM_grantee_list_opt_drop_behavior \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "RevokeStmt", ID_REVOKESTMT, R_REVOKESTMT_2);
	}
	;

opt_asc_desc
	: ASC {
		JOUT("SYN: opt_asc_desc -> ASC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_asc_desc", ID_OPT_ASC_DESC, R_OPT_ASC_DESC_1);
	}
	| DESC {
		JOUT("SYN: opt_asc_desc -> DESC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_asc_desc", ID_OPT_ASC_DESC, R_OPT_ASC_DESC_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_asc_desc -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_asc_desc", ID_OPT_ASC_DESC, R_OPT_ASC_DESC__NULL);
	}
	;

VariableShowStmt
	: SHOW var_name {
		JOUT("SYN: VariableShowStmt -> SHOW_var_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "VariableShowStmt", ID_VARIABLESHOWSTMT, R_VARIABLESHOWSTMT_1);
	}
	| SHOW TIME ZONE {
		JOUT("SYN: VariableShowStmt -> SHOW_TIME_ZONE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "VariableShowStmt", ID_VARIABLESHOWSTMT, R_VARIABLESHOWSTMT_2);
	}
	| SHOW TRANSACTION ISOLATION LEVEL {
		JOUT("SYN: VariableShowStmt -> SHOW_TRANSACTION_ISOLATION_LEVEL \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "VariableShowStmt", ID_VARIABLESHOWSTMT, R_VARIABLESHOWSTMT_3);
	}
	| SHOW SESSION AUTHORIZATION {
		JOUT("SYN: VariableShowStmt -> SHOW_SESSION_AUTHORIZATION \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "VariableShowStmt", ID_VARIABLESHOWSTMT, R_VARIABLESHOWSTMT_4);
	}
	| SHOW ALL {
		JOUT("SYN: VariableShowStmt -> SHOW_ALL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "VariableShowStmt", ID_VARIABLESHOWSTMT, R_VARIABLESHOWSTMT_5);
	}
	;

privilege_target
	: qualified_name_list {
		JOUT("SYN: privilege_target -> qualified_name_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_1);
	}
	| TABLE qualified_name_list {
		JOUT("SYN: privilege_target -> TABLE_qualified_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_2);
	}
	| SEQUENCE qualified_name_list {
		JOUT("SYN: privilege_target -> SEQUENCE_qualified_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_3);
	}
	| FOREIGN DATA_P WRAPPER name_list {
		JOUT("SYN: privilege_target -> FOREIGN_DATA_P_WRAPPER_name_list \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_4);
	}
	| FOREIGN SERVER name_list {
		JOUT("SYN: privilege_target -> FOREIGN_SERVER_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_5);
	}
	| FUNCTION function_with_argtypes_list {
		JOUT("SYN: privilege_target -> FUNCTION_function_with_argtypes_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_6);
	}
	| DATABASE name_list {
		JOUT("SYN: privilege_target -> DATABASE_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_7);
	}
	| DOMAIN_P any_name_list {
		JOUT("SYN: privilege_target -> DOMAIN_P_any_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_8);
	}
	| LANGUAGE name_list {
		JOUT("SYN: privilege_target -> LANGUAGE_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_9);
	}
	| LARGE_P OBJECT_P NumericOnly_list {
		JOUT("SYN: privilege_target -> LARGE_P_OBJECT_P_NumericOnly_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_10);
	}
	| SCHEMA name_list {
		JOUT("SYN: privilege_target -> SCHEMA_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_11);
	}
	| TABLESPACE name_list {
		JOUT("SYN: privilege_target -> TABLESPACE_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_12);
	}
	| TYPE_P any_name_list {
		JOUT("SYN: privilege_target -> TYPE_P_any_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_13);
	}
	| ALL TABLES IN_P SCHEMA name_list {
		JOUT("SYN: privilege_target -> ALL_TABLES_IN_P_SCHEMA_name_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_14);
	}
	| ALL SEQUENCES IN_P SCHEMA name_list {
		JOUT("SYN: privilege_target -> ALL_SEQUENCES_IN_P_SCHEMA_name_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_15);
	}
	| ALL FUNCTIONS IN_P SCHEMA name_list {
		JOUT("SYN: privilege_target -> ALL_FUNCTIONS_IN_P_SCHEMA_name_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "privilege_target", ID_PRIVILEGE_TARGET, R_PRIVILEGE_TARGET_16);
	}
	;

copy_options
	: copy_opt_list {
		JOUT("SYN: copy_options -> copy_opt_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_options", ID_COPY_OPTIONS, R_COPY_OPTIONS_1);
	}
	| SQL_LP copy_generic_opt_list SQL_RP {
		JOUT("SYN: copy_options -> SQL_LP_copy_generic_opt_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_options", ID_COPY_OPTIONS, R_COPY_OPTIONS_2);
	}
	;

DropUserStmt
	: DROP USER name_list {
		JOUT("SYN: DropUserStmt -> DROP_USER_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DropUserStmt", ID_DROPUSERSTMT, R_DROPUSERSTMT_1);
	}
	| DROP USER IF_P EXISTS name_list {
		JOUT("SYN: DropUserStmt -> DROP_USER_IF_P_EXISTS_name_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropUserStmt", ID_DROPUSERSTMT, R_DROPUSERSTMT_2);
	}
	;

RuleActionList
	: NOTHING {
		JOUT("SYN: RuleActionList -> NOTHING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionList", ID_RULEACTIONLIST, R_RULEACTIONLIST_1);
	}
	| RuleActionStmt {
		JOUT("SYN: RuleActionList -> RuleActionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionList", ID_RULEACTIONLIST, R_RULEACTIONLIST_2);
	}
	| SQL_LP RuleActionMulti SQL_RP {
		JOUT("SYN: RuleActionList -> SQL_LP_RuleActionMulti_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "RuleActionList", ID_RULEACTIONLIST, R_RULEACTIONLIST_3);
	}
	;

CreateOptRoleElem
	: AlterOptRoleElem {
		JOUT("SYN: CreateOptRoleElem -> AlterOptRoleElem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "CreateOptRoleElem", ID_CREATEOPTROLEELEM, R_CREATEOPTROLEELEM_1);
	}
	| SYSID Iconst {
		JOUT("SYN: CreateOptRoleElem -> SYSID_Iconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "CreateOptRoleElem", ID_CREATEOPTROLEELEM, R_CREATEOPTROLEELEM_2);
	}
	| ADMIN name_list {
		JOUT("SYN: CreateOptRoleElem -> ADMIN_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "CreateOptRoleElem", ID_CREATEOPTROLEELEM, R_CREATEOPTROLEELEM_3);
	}
	| ROLE name_list {
		JOUT("SYN: CreateOptRoleElem -> ROLE_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "CreateOptRoleElem", ID_CREATEOPTROLEELEM, R_CREATEOPTROLEELEM_4);
	}
	| IN_P ROLE name_list {
		JOUT("SYN: CreateOptRoleElem -> IN_P_ROLE_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "CreateOptRoleElem", ID_CREATEOPTROLEELEM, R_CREATEOPTROLEELEM_5);
	}
	| IN_P GROUP_P name_list {
		JOUT("SYN: CreateOptRoleElem -> IN_P_GROUP_P_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "CreateOptRoleElem", ID_CREATEOPTROLEELEM, R_CREATEOPTROLEELEM_6);
	}
	;

AlterRoleStmt
	: ALTER ROLE RoleId opt_with AlterOptRoleList {
		JOUT("SYN: AlterRoleStmt -> ALTER_ROLE_RoleId_opt_with_AlterOptRoleList \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterRoleStmt", ID_ALTERROLESTMT, R_ALTERROLESTMT_1);
	}
	;

opt_full
	: FULL {
		JOUT("SYN: opt_full -> FULL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_full", ID_OPT_FULL, R_OPT_FULL_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_full -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_full", ID_OPT_FULL, R_OPT_FULL__NULL);
	}
	;

AlterDatabaseSetStmt
	: ALTER DATABASE database_name SetResetClause {
		JOUT("SYN: AlterDatabaseSetStmt -> ALTER_DATABASE_database_name_SetResetClause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterDatabaseSetStmt", ID_ALTERDATABASESETSTMT, R_ALTERDATABASESETSTMT_1);
	}
	;

CreateFunctionStmt
	: CREATE opt_or_replace FUNCTION func_name func_args_with_defaults RETURNS func_return createfunc_opt_list opt_definition {
		JOUT("SYN: CreateFunctionStmt -> CREATE_opt_or_replace_FUNCTION_func_name_func_args_with_defaults_RETURNS_func_return_createfunc_opt_list_opt_definition \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "CreateFunctionStmt", ID_CREATEFUNCTIONSTMT, R_CREATEFUNCTIONSTMT_1);
	}
	| CREATE opt_or_replace FUNCTION func_name func_args_with_defaults RETURNS TABLE SQL_LP table_func_column_list SQL_RP createfunc_opt_list opt_definition {
		JOUT("SYN: CreateFunctionStmt -> CREATE_opt_or_replace_FUNCTION_func_name_func_args_with_defaults_RETURNS_TABLE_SQL_LP_table_func_column_list_SQL_RP_createfunc_opt_list_opt_definition \n");
		$$ = cons_subtree(12, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
		set_content(&$$, @$.first_line, "CreateFunctionStmt", ID_CREATEFUNCTIONSTMT, R_CREATEFUNCTIONSTMT_2);
	}
	| CREATE opt_or_replace FUNCTION func_name func_args_with_defaults createfunc_opt_list opt_definition {
		JOUT("SYN: CreateFunctionStmt -> CREATE_opt_or_replace_FUNCTION_func_name_func_args_with_defaults_createfunc_opt_list_opt_definition \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CreateFunctionStmt", ID_CREATEFUNCTIONSTMT, R_CREATEFUNCTIONSTMT_3);
	}
	;

from_in
	: FROM {
		JOUT("SYN: from_in -> FROM \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "from_in", ID_FROM_IN, R_FROM_IN_1);
	}
	| IN_P {
		JOUT("SYN: from_in -> IN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "from_in", ID_FROM_IN, R_FROM_IN_2);
	}
	;

RevokeRoleStmt
	: REVOKE privilege_list FROM name_list opt_granted_by opt_drop_behavior {
		JOUT("SYN: RevokeRoleStmt -> REVOKE_privilege_list_FROM_name_list_opt_granted_by_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "RevokeRoleStmt", ID_REVOKEROLESTMT, R_REVOKEROLESTMT_1);
	}
	| REVOKE ADMIN OPTION FOR privilege_list FROM name_list opt_granted_by opt_drop_behavior {
		JOUT("SYN: RevokeRoleStmt -> REVOKE_ADMIN_OPTION_FOR_privilege_list_FROM_name_list_opt_granted_by_opt_drop_behavior \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "RevokeRoleStmt", ID_REVOKEROLESTMT, R_REVOKEROLESTMT_2);
	}
	;

opt_concurrently
	: CONCURRENTLY {
		JOUT("SYN: opt_concurrently -> CONCURRENTLY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_concurrently", ID_OPT_CONCURRENTLY, R_OPT_CONCURRENTLY_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_concurrently -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_concurrently", ID_OPT_CONCURRENTLY, R_OPT_CONCURRENTLY__NULL);
	}
	;

TableElementList
	: TableElement {
		JOUT("SYN: TableElementList -> TableElement \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableElementList", ID_TABLEELEMENTLIST, R_TABLEELEMENTLIST_1);
	}
	| TableElementList SQL_COMMA TableElement {
		JOUT("SYN: TableElementList -> TableElementList_SQL_COMMA_TableElement \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TableElementList", ID_TABLEELEMENTLIST, R_TABLEELEMENTLIST_2);
	}
	;

offset_clause
	: OFFSET select_offset_value {
		JOUT("SYN: offset_clause -> OFFSET_select_offset_value \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "offset_clause", ID_OFFSET_CLAUSE, R_OFFSET_CLAUSE_1);
	}
	| OFFSET select_offset_value2 row_or_rows {
		JOUT("SYN: offset_clause -> OFFSET_select_offset_value2_row_or_rows \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "offset_clause", ID_OFFSET_CLAUSE, R_OFFSET_CLAUSE_2);
	}
	;

// todo3
opt_partition_clause
	: PARTITION BY expr_list {
		JOUT("SYN: opt_partition_clause -> PARTITION_BY_expr_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_partition_clause", ID_OPT_PARTITION_CLAUSE, R_OPT_PARTITION_CLAUSE_1);
	}
	/*
	| PARTITION BY SQL_LP expr_list SQL_RP {
		JOUT("SYN: opt_partition_clause -> PARTITION BT SQL_LP expr_list SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "opt_partition_clause", ID_OPT_PARTITION_CLAUSE, R_OPT_PARTITION_CLAUSE_2);
	}*/
	| /* empty */ {
		JOUT("SYN: opt_partition_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_partition_clause", ID_OPT_PARTITION_CLAUSE, R_OPT_PARTITION_CLAUSE__NULL);
	}
	;

name
	: ColId {
		JOUT("SYN: name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "name", ID_NAME, R_NAME_1);
	}
	;

opt_in_database
	: /* empty */ {
		JOUT("SYN: opt_in_database -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_in_database", ID_OPT_IN_DATABASE, R_OPT_IN_DATABASE__NULL);
	}
	| IN_P DATABASE database_name {
		JOUT("SYN: opt_in_database -> IN_P_DATABASE_database_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_in_database", ID_OPT_IN_DATABASE, R_OPT_IN_DATABASE_2);
	}
	;

select_limit_value
	: a_expr {
		JOUT("SYN: select_limit_value -> a_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_limit_value", ID_SELECT_LIMIT_VALUE, R_SELECT_LIMIT_VALUE_1);
	}
	| ALL {
		JOUT("SYN: select_limit_value -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_limit_value", ID_SELECT_LIMIT_VALUE, R_SELECT_LIMIT_VALUE_2);
	}
	;

TriggerForOptEach
	: EACH {
		JOUT("SYN: TriggerForOptEach -> EACH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerForOptEach", ID_TRIGGERFOROPTEACH, R_TRIGGERFOROPTEACH_1);
	}
	| /* empty */ {
		JOUT("SYN: TriggerForOptEach -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "TriggerForOptEach", ID_TRIGGERFOROPTEACH, R_TRIGGERFOROPTEACH__NULL);
	}
	;

generic_option_elem
	: generic_option_name generic_option_arg {
		JOUT("SYN: generic_option_elem -> generic_option_name_generic_option_arg \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "generic_option_elem", ID_GENERIC_OPTION_ELEM, R_GENERIC_OPTION_ELEM_1);
	}
	;

ctext_expr
	: a_expr {
		JOUT("SYN: ctext_expr -> a_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ctext_expr", ID_CTEXT_EXPR, R_CTEXT_EXPR_1);
	}
	| DEFAULT {
		JOUT("SYN: ctext_expr -> DEFAULT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ctext_expr", ID_CTEXT_EXPR, R_CTEXT_EXPR_2);
	}
	;

opt_trusted
	: TRUSTED {
		JOUT("SYN: opt_trusted -> TRUSTED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_trusted", ID_OPT_TRUSTED, R_OPT_TRUSTED_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_trusted -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_trusted", ID_OPT_TRUSTED, R_OPT_TRUSTED__NULL);
	}
	;

select_offset_value2
	: c_expr {
		JOUT("SYN: select_offset_value2 -> c_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_offset_value2", ID_SELECT_OFFSET_VALUE2, R_SELECT_OFFSET_VALUE2_1);
	}
	;

copy_generic_opt_arg_list_item
	: opt_boolean_or_string {
		JOUT("SYN: copy_generic_opt_arg_list_item -> opt_boolean_or_string \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg_list_item", ID_COPY_GENERIC_OPT_ARG_LIST_ITEM, R_COPY_GENERIC_OPT_ARG_LIST_ITEM_1);
	}
	;

expr_list
	: a_expr {
		JOUT("SYN: expr_list -> a_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "expr_list", ID_EXPR_LIST, R_EXPR_LIST_1);
	}
	| expr_list SQL_COMMA a_expr {
		JOUT("SYN: expr_list -> expr_list_SQL_COMMA_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "expr_list", ID_EXPR_LIST, R_EXPR_LIST_2);
	}
	;

AlterTSDictionaryStmt
	: ALTER TEXT_P SEARCH DICTIONARY any_name definition {
		JOUT("SYN: AlterTSDictionaryStmt -> ALTER_TEXT_P_SEARCH_DICTIONARY_any_name_definition \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterTSDictionaryStmt", ID_ALTERTSDICTIONARYSTMT, R_ALTERTSDICTIONARYSTMT_1);
	}
	;

DefACLAction
	: GRANT privileges ON defacl_privilege_target TO grantee_list opt_grant_grant_option {
		JOUT("SYN: DefACLAction -> GRANT_privileges_ON_defacl_privilege_target_TO_grantee_list_opt_grant_grant_option \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DefACLAction", ID_DEFACLACTION, R_DEFACLACTION_1);
	}
	| REVOKE privileges ON defacl_privilege_target FROM grantee_list opt_drop_behavior {
		JOUT("SYN: DefACLAction -> REVOKE_privileges_ON_defacl_privilege_target_FROM_grantee_list_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DefACLAction", ID_DEFACLACTION, R_DEFACLACTION_2);
	}
	| REVOKE GRANT OPTION FOR privileges ON defacl_privilege_target FROM grantee_list opt_drop_behavior {
		JOUT("SYN: DefACLAction -> REVOKE_GRANT_OPTION_FOR_privileges_ON_defacl_privilege_target_FROM_grantee_list_opt_drop_behavior \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "DefACLAction", ID_DEFACLACTION, R_DEFACLACTION_3);
	}
	;

DeallocateStmt
	: DEALLOCATE name {
		JOUT("SYN: DeallocateStmt -> DEALLOCATE_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DeallocateStmt", ID_DEALLOCATESTMT, R_DEALLOCATESTMT_1);
	}
	| DEALLOCATE PREPARE name {
		JOUT("SYN: DeallocateStmt -> DEALLOCATE_PREPARE_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DeallocateStmt", ID_DEALLOCATESTMT, R_DEALLOCATESTMT_2);
	}
	| DEALLOCATE ALL {
		JOUT("SYN: DeallocateStmt -> DEALLOCATE_ALL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DeallocateStmt", ID_DEALLOCATESTMT, R_DEALLOCATESTMT_3);
	}
	| DEALLOCATE PREPARE ALL {
		JOUT("SYN: DeallocateStmt -> DEALLOCATE_PREPARE_ALL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DeallocateStmt", ID_DEALLOCATESTMT, R_DEALLOCATESTMT_4);
	}
	;

copy_opt_item
	: BINARY {
		JOUT("SYN: copy_opt_item -> BINARY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_1);
	}
	| OIDS {
		JOUT("SYN: copy_opt_item -> OIDS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_2);
	}
	| DELIMITER opt_as Sconst {
		JOUT("SYN: copy_opt_item -> DELIMITER_opt_as_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_3);
	}
	| NULL_P opt_as Sconst {
		JOUT("SYN: copy_opt_item -> NULL_P_opt_as_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_4);
	}
	| CSV {
		JOUT("SYN: copy_opt_item -> CSV \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_5);
	}
	| HEADER_P {
		JOUT("SYN: copy_opt_item -> HEADER_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_6);
	}
	| QUOTE opt_as Sconst {
		JOUT("SYN: copy_opt_item -> QUOTE_opt_as_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_7);
	}
	| ESCAPE opt_as Sconst {
		JOUT("SYN: copy_opt_item -> ESCAPE_opt_as_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_8);
	}
	| FORCE QUOTE columnList {
		JOUT("SYN: copy_opt_item -> FORCE_QUOTE_columnList \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_9);
	}
	| FORCE QUOTE SQL_MUL {
		JOUT("SYN: copy_opt_item -> FORCE_QUOTE_SQL_MUL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_10);
	}
	| FORCE NOT NULL_P columnList {
		JOUT("SYN: copy_opt_item -> FORCE_NOT_NULL_P_columnList \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_11);
	}
	| ENCODING Sconst {
		JOUT("SYN: copy_opt_item -> ENCODING_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "copy_opt_item", ID_COPY_OPT_ITEM, R_COPY_OPT_ITEM_12);
	}
	;

type_func_name_keyword
	: AUTHORIZATION {
		JOUT("SYN: type_func_name_keyword -> AUTHORIZATION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_1);
	}
	| BINARY {
		JOUT("SYN: type_func_name_keyword -> BINARY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_2);
	}
	| COLLATION {
		JOUT("SYN: type_func_name_keyword -> COLLATION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_3);
	}
	| CONCURRENTLY {
		JOUT("SYN: type_type_func_name_keywordfunc_name_keyword -> CONCURRENTLY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_4);
	}
	| CROSS {
		JOUT("SYN: type_func_name_keyword -> CROSS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_5);
	}
	| CURRENT_SCHEMA {
		JOUT("SYN: type_func_name_keyword -> CURRENT_SCHEMA \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_6);
	}
	| FREEZE {
		JOUT("SYN: type_func_name_keyword -> FREEZE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_7);
	}
	| FULL {
		JOUT("SYN: type_func_name_keyword -> FULL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_8);
	}
	| ILIKE {
		JOUT("SYN: type_func_name_keyword -> ILIKE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_9);
	}
	| INNER_P {
		JOUT("SYN: type_func_name_keyword -> INNER_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_10);
	}
	| IS {
		JOUT("SYN: type_func_name_keyword -> IS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_11);
	}
	| ISNULL {
		JOUT("SYN: type_func_name_keyword -> ISNULL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_12);
	}
	| JOIN {
		JOUT("SYN: type_func_name_keyword -> JOIN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_13);
	}
	| LEFT {
		JOUT("SYN: type_func_name_keyword -> LEFT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_14);
	}
	| LIKE {
		JOUT("SYN: type_func_name_keyword -> LIKE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_15);
	}
	| NATURAL {
		JOUT("SYN: type_func_name_keyword -> NATURAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_16);
	}
	| NOTNULL {
		JOUT("SYN: type_func_name_keyword -> NOTNULL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_17);
	}
	| OUTER_P {
		JOUT("SYN: type_func_name_keyword -> OUTER_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_18);
	}
	| OVER {
		JOUT("SYN: type_func_name_keyword -> OVER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_19);
	}
	| OVERLAPS {
		JOUT("SYN: type_func_name_keyword -> OVERLAPS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_20);
	}
	| RIGHT {
		JOUT("SYN: type_func_name_keyword -> RIGHT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_21);
	}
	| SIMILAR {
		JOUT("SYN: type_func_name_keyword -> SIMILAR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_22);
	}
	| VERBOSE {
		JOUT("SYN: type_func_name_keyword -> VERBOSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_23);
	}
	| INDEX {
		// todo3
		JOUT("SYN: type_func_name_keyword -> INDEX \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_func_name_keyword", ID_TYPE_FUNC_NAME_KEYWORD, R_TYPE_FUNC_NAME_KEYWORD_24);
	}
	;

event
	: SELECT {
		JOUT("SYN: event -> SELECT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "event", ID_EVENT, R_EVENT_1);
	}
	| UPDATE {
		JOUT("SYN: event -> UPDATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "event", ID_EVENT, R_EVENT_2);
	}
	| DELETE_P {
		JOUT("SYN: event -> DELETE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "event", ID_EVENT, R_EVENT_3);
	}
	| INSERT {
		JOUT("SYN: event -> INSERT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "event", ID_EVENT, R_EVENT_4);
	}
	;

opclass_purpose
	: FOR SEARCH {
		JOUT("SYN: opclass_purpose -> FOR_SEARCH \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opclass_purpose", ID_OPCLASS_PURPOSE, R_OPCLASS_PURPOSE_1);
	}
	| FOR ORDER BY any_name {
		JOUT("SYN: opclass_purpose -> FOR_ORDER_BY_any_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opclass_purpose", ID_OPCLASS_PURPOSE, R_OPCLASS_PURPOSE_2);
	}
	| /* empty */ {
		JOUT("SYN: opclass_purpose -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opclass_purpose", ID_OPCLASS_PURPOSE, R_OPCLASS_PURPOSE__NULL);
	}
	;

explain_option_list
	: explain_option_elem {
		JOUT("SYN: explain_option_list -> explain_option_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "explain_option_list", ID_EXPLAIN_OPTION_LIST, R_EXPLAIN_OPTION_LIST_1);
	}
	| explain_option_list SQL_COMMA explain_option_elem {
		JOUT("SYN: explain_option_list -> explain_option_list_SQL_COMMA_explain_option_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "explain_option_list", ID_EXPLAIN_OPTION_LIST, R_EXPLAIN_OPTION_LIST_2);
	}
	;

opt_with
	: WITH {
		JOUT("SYN: opt_with -> WITH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_with", ID_OPT_WITH, R_OPT_WITH_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_with -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_with", ID_OPT_WITH, R_OPT_WITH__NULL);
	}
	;

AlterForeignTableStmt
	: ALTER FOREIGN TABLE relation_expr alter_table_cmds {
		JOUT("SYN: AlterForeignTableStmt -> ALTER_FOREIGN_TABLE_relation_expr_alter_table_cmds \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterForeignTableStmt", ID_ALTERFOREIGNTABLESTMT, R_ALTERFOREIGNTABLESTMT_1);
	}
	| ALTER FOREIGN TABLE IF_P EXISTS relation_expr alter_table_cmds {
		JOUT("SYN: AlterForeignTableStmt -> ALTER_FOREIGN_TABLE_IF_P_EXISTS_relation_expr_alter_table_cmds \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterForeignTableStmt", ID_ALTERFOREIGNTABLESTMT, R_ALTERFOREIGNTABLESTMT_2);
	}
	;

alter_using
	: USING a_expr {
		JOUT("SYN: alter_using -> USING_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_using", ID_ALTER_USING, R_ALTER_USING_1);
	}
	| /* empty */ {
		JOUT("SYN: alter_using -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "alter_using", ID_ALTER_USING, R_ALTER_USING__NULL);
	}
	;

col_name_keyword
	: BETWEEN {
		JOUT("SYN: col_name_keyword -> BETWEEN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_1);
	}
	| BIGINT {
		JOUT("SYN: col_name_keyword -> BIGINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_2);
	}
	| BIT {
		JOUT("SYN: col_name_keyword -> BIT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_3);
	}
	| BOOLEAN_P {
		JOUT("SYN: col_name_keyword -> BOOLEAN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_4);
	}
	| CHAR_P {
		JOUT("SYN: col_name_keyword -> CHAR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_5);
	}
	| CHARACTER {
		JOUT("SYN: col_name_keyword -> CHARACTER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_6);
	}
	| COALESCE {
		JOUT("SYN: col_name_keyword -> COALESCE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_7);
	}
	| DEC {
		JOUT("SYN: col_name_keyword -> DEC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_8);
	}
	| DECIMAL_P {
		JOUT("SYN: col_name_keyword -> DECIMAL_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_9);
	}
	| EXISTS {
		JOUT("SYN: col_name_keyword -> EXISTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_10);
	}
	| EXTRACT {
		JOUT("SYN: col_name_keyword -> EXTRACT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_11);
	}
	| FLOAT_P {
		JOUT("SYN: col_name_keyword -> FLOAT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_12);
	}
	| GREATEST {
		JOUT("SYN: col_name_keyword -> GREATEST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_13);
	}
	| INOUT {
		JOUT("SYN: col_name_keyword -> INOUT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_14);
	}
	| INT_P {
		JOUT("SYN: col_name_keyword -> INT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_15);
	}
	| INTEGER {
		JOUT("SYN: col_name_keyword -> INTEGER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_16);
	}
	| INTERVAL {
		JOUT("SYN: col_name_keyword -> INTERVAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_17);
	}
	| LEAST {
		JOUT("SYN: col_name_keyword -> LEAST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_18);
	}
	| NATIONAL {
		JOUT("SYN: col_name_keyword -> NATIONAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_19);
	}
	| NCHAR {
		JOUT("SYN: col_name_keyword -> NCHAR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_20);
	}
	| NONE {
		JOUT("SYN: col_name_keyword -> NONE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_21);
	}
	| NULLIF {
		JOUT("SYN: col_name_keyword -> NULLIF \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_22);
	}
	| NUMERIC {
		JOUT("SYN: col_name_keyword -> NUMERIC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_23);
	}
	| OUT_P {
		JOUT("SYN: col_name_keyword -> OUT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_24);
	}
	| OVERLAY {
		JOUT("SYN: col_name_keyword -> OVERLAY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_25);
	}
	| POSITION {
		JOUT("SYN: col_name_keyword -> POSITION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_26);
	}
	| PRECISION {
		JOUT("SYN: col_name_keyword -> PRECISION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_27);
	}
	| REAL {
		JOUT("SYN: col_name_keyword -> REAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_28);
	}
	| ROW {
		JOUT("SYN: col_name_keyword -> ROW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_29);
	}
	| SETOF {
		JOUT("SYN: col_name_keyword -> SETOF \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_30);
	}
	| SMALLINT {
		JOUT("SYN: col_name_keyword -> SMALLINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_31);
	}
	| SUBSTRING {
		JOUT("SYN: col_name_keyword -> SUBSTRING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_32);
	}
	| TIME {
		JOUT("SYN: col_name_keyword -> TIME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_33);
	}
	| TIMESTAMP {
		JOUT("SYN: col_name_keyword -> TIMESTAMP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_34);
	}
	| TREAT {
		JOUT("SYN: col_name_keyword -> TREAT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_35);
	}
	| TRIM {
		JOUT("SYN: col_name_keyword -> TRIM \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_36);
	}
	| VALUES {
		JOUT("SYN: col_name_keyword -> VALUES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_37);
	}
	/* JOE REMOVE
	| VARCHAR {
		JOUT("SYN: col_name_keyword -> VARCHAR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_38);
	}
	*/
	| XMLATTRIBUTES {
		JOUT("SYN: col_name_keyword -> XMLATTRIBUTES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_39);
	}
	| XMLCONCAT {
		JOUT("SYN: col_name_keyword -> XMLCONCAT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_40);
	}
	| XMLELEMENT {
		JOUT("SYN: col_name_keyword -> XMLELEMENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_41);
	}
	| XMLEXISTS {
		JOUT("SYN: col_name_keyword -> XMLEXISTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_42);
	}
	| XMLFOREST {
		JOUT("SYN: col_name_keyword -> XMLFOREST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_43);
	}
	| XMLPARSE {
		JOUT("SYN: col_name_keyword -> XMLPARSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_44);
	}
	| XMLPI {
		JOUT("SYN: col_name_keyword -> XMLPI \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_45);
	}
	| XMLROOT {
		JOUT("SYN: col_name_keyword -> XMLROOT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_46);
	}
	| XMLSERIALIZE {
		JOUT("SYN: col_name_keyword -> XMLSERIALIZE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "col_name_keyword", ID_COL_NAME_KEYWORD, R_COL_NAME_KEYWORD_47);
	}
	| TD_GRAPHIC {
		// TODO4
	}
	| TD_VARGRAPHIC {

	}
	| TD_LONG {

	}
	;

columnref
	: ColId {
		JOUT("SYN: columnref -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "columnref", ID_COLUMNREF, R_COLUMNREF_1);
	}
	| ColId indirection {
		JOUT("SYN: columnref -> ColId_indirection \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "columnref", ID_COLUMNREF, R_COLUMNREF_2);
	}
	;

RoleId
	: ColId {
		JOUT("SYN: RoleId -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RoleId", ID_ROLEID, R_ROLEID_1);
	}
	;

DropCastStmt
	: DROP CAST opt_if_exists SQL_LP Typename AS Typename SQL_RP opt_drop_behavior {
		JOUT("SYN: DropCastStmt -> DROP_CAST_opt_if_exists_SQL_LP_Typename_AS_Typename_SQL_RP_opt_drop_behavior \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "DropCastStmt", ID_DROPCASTSTMT, R_DROPCASTSTMT_1);
	}
	;

NumericOnly_list
	: NumericOnly {
		JOUT("SYN: NumericOnly_list -> NumericOnly \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "NumericOnly_list", ID_NUMERICONLY_LIST, R_NUMERICONLY_LIST_1);
	}
	| NumericOnly_list SQL_COMMA NumericOnly {
		JOUT("SYN: NumericOnly_list -> NumericOnly_list_SQL_COMMA_NumericOnly \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "NumericOnly_list", ID_NUMERICONLY_LIST, R_NUMERICONLY_LIST_2);
	}
	;

window_clause
	: WINDOW window_definition_list {
		JOUT("SYN: window_clause -> WINDOW_window_definition_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "window_clause", ID_WINDOW_CLAUSE, R_WINDOW_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: window_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "window_clause", ID_WINDOW_CLAUSE, R_WINDOW_CLAUSE__NULL);
	}
	;

ClusterStmt
	: CLUSTER opt_verbose qualified_name cluster_index_specification {
		JOUT("SYN: ClusterStmt -> CLUSTER_opt_verbose_qualified_name_cluster_index_specification \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ClusterStmt", ID_CLUSTERSTMT, R_CLUSTERSTMT_1);
	}
	| CLUSTER opt_verbose {
		JOUT("SYN: ClusterStmt -> CLUSTER_opt_verbose \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ClusterStmt", ID_CLUSTERSTMT, R_CLUSTERSTMT_2);
	}
	| CLUSTER opt_verbose index_name ON qualified_name {
		JOUT("SYN: ClusterStmt -> CLUSTER_opt_verbose_index_name_ON_qualified_name \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "ClusterStmt", ID_CLUSTERSTMT, R_CLUSTERSTMT_3);
	}
	;

Typename
	: SimpleTypename opt_array_bounds {
		JOUT("SYN: Typename -> SimpleTypename_opt_array_bounds \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_1);
	}
	| SETOF SimpleTypename opt_array_bounds {
		JOUT("SYN: Typename -> SETOF_SimpleTypename_opt_array_bounds \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_2);
	}
	| SimpleTypename ARRAY SQL_LB Iconst SQL_RB {
		JOUT("SYN: Typename -> SimpleTypename_ARRAY_SQL_LB_Iconst_SQL_RB \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_3);
	}
	| SETOF SimpleTypename ARRAY SQL_LB Iconst SQL_RB {
		JOUT("SYN: Typename -> SETOF_SimpleTypename_ARRAY_SQL_LB_Iconst_SQL_RB \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_4);
	}
	| SimpleTypename ARRAY {
		JOUT("SYN: Typename -> SimpleTypename_ARRAY \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_5);
	}
	| SETOF SimpleTypename ARRAY {
		JOUT("SYN: Typename -> SETOF_SimpleTypename_ARRAY \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_6);
	} 
	| FORMAT Sconst {
		// todo3
		//format
		JOUT("SYN: Typename -> FORMAT Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_7);
	}
	// todo3
	| TD_NAMED IDENT {
		JOUT("SYN: Typename -> TD_NAMED IDENT \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Typename", ID_TYPENAME, R_TYPENAME_8);
	}
	;

add_drop
	: ADD_P {
		JOUT("SYN: add_drop -> ADD_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "add_drop", ID_ADD_DROP, R_ADD_DROP_1);
	}
	| DROP {
		JOUT("SYN: add_drop -> DROP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "add_drop", ID_ADD_DROP, R_ADD_DROP_2);
	}
	;

old_aggr_definition
	: SQL_LP old_aggr_list SQL_RP {
		JOUT("SYN: old_aggr_definition -> SQL_LP_old_aggr_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "old_aggr_definition", ID_OLD_AGGR_DEFINITION, R_OLD_AGGR_DEFINITION_1);
	}
	;

ExclusionConstraintList
	: ExclusionConstraintElem {
		JOUT("SYN: ExclusionConstraintList -> ExclusionConstraintElem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExclusionConstraintList", ID_EXCLUSIONCONSTRAINTLIST, R_EXCLUSIONCONSTRAINTLIST_1);
	}
	| ExclusionConstraintList SQL_COMMA ExclusionConstraintElem {
		JOUT("SYN: ExclusionConstraintList -> ExclusionConstraintList_SQL_COMMA_ExclusionConstraintElem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ExclusionConstraintList", ID_EXCLUSIONCONSTRAINTLIST, R_EXCLUSIONCONSTRAINTLIST_2);
	}
	;

opt_fdw_options
	: fdw_options {
		JOUT("SYN: opt_fdw_options -> fdw_options \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_fdw_options", ID_OPT_FDW_OPTIONS, R_OPT_FDW_OPTIONS_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_fdw_options -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_fdw_options", ID_OPT_FDW_OPTIONS, R_OPT_FDW_OPTIONS__NULL);
	}
	;

ColId
	: IDENT {
		JOUT("SYN: ColId -> IDENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColId", ID_COLID, R_COLID_1);
	}
	| unreserved_keyword {
		JOUT("SYN: ColId -> unreserved_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColId", ID_COLID, R_COLID_2);
	}
	| col_name_keyword {
		JOUT("SYN: ColId -> col_name_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColId", ID_COLID, R_COLID_3);
	}
	;

OptSchemaEltList
	: OptSchemaEltList schema_stmt {
		JOUT("SYN: OptSchemaEltList -> OptSchemaEltList_schema_stmt \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptSchemaEltList", ID_OPTSCHEMAELTLIST, R_OPTSCHEMAELTLIST_1);
	}
	| /* empty */ {
		JOUT("SYN: OptSchemaEltList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptSchemaEltList", ID_OPTSCHEMAELTLIST, R_OPTSCHEMAELTLIST__NULL);
	}
	;

Numeric
	: INT_P {
		JOUT("SYN: Numeric -> INT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_1);
	}
	| INTEGER {
		JOUT("SYN: Numeric -> INTEGER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_2);
	}
	| SMALLINT {
		JOUT("SYN: Numeric -> SMALLINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_3);
	}
	| BIGINT {
		JOUT("SYN: Numeric -> BIGINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_4);
	}
	| REAL {
		JOUT("SYN: Numeric -> REAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_5);
	}
	| FLOAT_P opt_float {
		JOUT("SYN: Numeric -> FLOAT_P_opt_float \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_6);
	}
	| DOUBLE_P PRECISION {
		JOUT("SYN: Numeric -> DOUBLE_P_PRECISION \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_7);
	}
	| DECIMAL_P opt_type_modifiers {
		JOUT("SYN: Numeric -> DECIMAL_P_opt_type_modifiers \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_8);
	}
	| DEC opt_type_modifiers {
		JOUT("SYN: Numeric -> DEC_opt_type_modifiers \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_9);
	}
	| NUMERIC opt_type_modifiers {
		JOUT("SYN: Numeric -> NUMERIC_opt_type_modifiers \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_10);
	}
	| BOOLEAN_P {
		JOUT("SYN: Numeric -> BOOLEAN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Numeric", ID_NUMERIC, R_NUMERIC_11);
	}
	;

CharacterWithLength
	: character SQL_LP Iconst SQL_RP opt_charset {
		JOUT("SYN: CharacterWithLength -> character_SQL_LP_Iconst_SQL_RP_opt_charset \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CharacterWithLength", ID_CHARACTERWITHLENGTH, R_CHARACTERWITHLENGTH_1);
	}
	;

function_with_argtypes_list
	: function_with_argtypes {
		JOUT("SYN: function_with_argtypes_list -> function_with_argtypes \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "function_with_argtypes_list", ID_FUNCTION_WITH_ARGTYPES_LIST, R_FUNCTION_WITH_ARGTYPES_LIST_1);
	}
	| function_with_argtypes_list SQL_COMMA function_with_argtypes {
		JOUT("SYN: function_with_argtypes_list -> function_with_argtypes_list_SQL_COMMA_function_with_argtypes \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "function_with_argtypes_list", ID_FUNCTION_WITH_ARGTYPES_LIST, R_FUNCTION_WITH_ARGTYPES_LIST_2);
	}
	;

index_elem
	: ColId opt_collate opt_class opt_asc_desc opt_nulls_order {
		JOUT("SYN: index_elem -> ColId_opt_collate_opt_class_opt_asc_desc_opt_nulls_order \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "index_elem", ID_INDEX_ELEM, R_INDEX_ELEM_1);
	}
	| func_expr opt_collate opt_class opt_asc_desc opt_nulls_order {
		JOUT("SYN: index_elem -> func_expr_opt_collate_opt_class_opt_asc_desc_opt_nulls_order \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "index_elem", ID_INDEX_ELEM, R_INDEX_ELEM_2);
	}
	| SQL_LP a_expr SQL_RP opt_collate opt_class opt_asc_desc opt_nulls_order {
		JOUT("SYN: index_elem -> SQL_LP_a_expr_SQL_RP_opt_collate_opt_class_opt_asc_desc_opt_nulls_order \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "index_elem", ID_INDEX_ELEM, R_INDEX_ELEM_3);
	}
	;

definition
	: SQL_LP def_list SQL_RP {
		JOUT("SYN: definition -> SQL_LP_def_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "definition", ID_DEFINITION, R_DEFINITION_1);
	}
	;

SeqOptList
	: SeqOptElem {
		JOUT("SYN: SeqOptList -> SeqOptElem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SeqOptList", ID_SEQOPTLIST, R_SEQOPTLIST_1);
	}
	| SeqOptList SeqOptElem {
		JOUT("SYN: SeqOptList -> SeqOptList_SeqOptElem \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SeqOptList", ID_SEQOPTLIST, R_SEQOPTLIST_2);
	}
	;

enum_val_list
	: Sconst {
		JOUT("SYN: enum_val_list -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "enum_val_list", ID_ENUM_VAL_LIST, R_ENUM_VAL_LIST_1);
	}
	| enum_val_list SQL_COMMA Sconst {
		JOUT("SYN: enum_val_list -> enum_val_list_SQL_COMMA_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "enum_val_list", ID_ENUM_VAL_LIST, R_ENUM_VAL_LIST_2);
	}
	;

opt_select_limit
	: select_limit {
		JOUT("SYN: opt_select_limit -> select_limit \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_select_limit", ID_OPT_SELECT_LIMIT, R_OPT_SELECT_LIMIT_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_select_limit -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_select_limit", ID_OPT_SELECT_LIMIT, R_OPT_SELECT_LIMIT__NULL);
	}
	;

qualified_name_list
	: qualified_name {
		JOUT("SYN: qualified_name_list -> qualified_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "qualified_name_list", ID_QUALIFIED_NAME_LIST, R_QUALIFIED_NAME_LIST_1);
	}
	| qualified_name_list SQL_COMMA qualified_name {
		JOUT("SYN: qualified_name_list -> qualified_name_list_SQL_COMMA_qualified_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "qualified_name_list", ID_QUALIFIED_NAME_LIST, R_QUALIFIED_NAME_LIST_2);
	}
	;

alter_table_cmds
	: alter_table_cmd {
		JOUT("SYN: alter_table_cmds -> alter_table_cmd \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "alter_table_cmds", ID_ALTER_TABLE_CMDS, R_ALTER_TABLE_CMDS_1);
	}
	| alter_table_cmds SQL_COMMA alter_table_cmd {
		JOUT("SYN: alter_table_cmds -> alter_table_cmds_SQL_COMMA_alter_table_cmd \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmds", ID_ALTER_TABLE_CMDS, R_ALTER_TABLE_CMDS_2);
	}
	;

DropOpFamilyStmt
	: DROP OPERATOR FAMILY any_name USING access_method opt_drop_behavior {
		JOUT("SYN: DropOpFamilyStmt -> DROP_OPERATOR_FAMILY_any_name_USING_access_method_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DropOpFamilyStmt", ID_DROPOPFAMILYSTMT, R_DROPOPFAMILYSTMT_1);
	}
	| DROP OPERATOR FAMILY IF_P EXISTS any_name USING access_method opt_drop_behavior {
		JOUT("SYN: DropOpFamilyStmt -> DROP_OPERATOR_FAMILY_IF_P_EXISTS_any_name_USING_access_method_opt_drop_behavior \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "DropOpFamilyStmt", ID_DROPOPFAMILYSTMT, R_DROPOPFAMILYSTMT_2);
	}
	;

RuleActionMulti
	: RuleActionMulti SQL_SEMI RuleActionStmtOrEmpty {
		JOUT("SYN: RuleActionMulti -> RuleActionMulti_SQL_SEMI_RuleActionStmtOrEmpty \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "RuleActionMulti", ID_RULEACTIONMULTI, R_RULEACTIONMULTI_1);
	}
	| RuleActionStmtOrEmpty {
		JOUT("SYN: RuleActionMulti -> RuleActionStmtOrEmpty \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionMulti", ID_RULEACTIONMULTI, R_RULEACTIONMULTI_2);
	}
	;

aggr_args
	: SQL_LP type_list SQL_RP {
		JOUT("SYN: aggr_args -> SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "aggr_args", ID_AGGR_ARGS, R_AGGR_ARGS_1);
	}
	| SQL_LP SQL_MUL SQL_RP {
		JOUT("SYN: aggr_args -> SQL_LP_SQL_MUL_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "aggr_args", ID_AGGR_ARGS, R_AGGR_ARGS_2);
	}
	;

def_arg
	: func_type {
		JOUT("SYN: def_arg -> func_type \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "def_arg", ID_DEF_ARG, R_DEF_ARG_1);
	}
	| reserved_keyword {
		JOUT("SYN: def_arg -> reserved_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "def_arg", ID_DEF_ARG, R_DEF_ARG_2);
	}
	| qual_all_Op {
		JOUT("SYN: def_arg -> qual_all_Op \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "def_arg", ID_DEF_ARG, R_DEF_ARG_3);
	}
	| NumericOnly {
		JOUT("SYN: def_arg -> NumericOnly \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "def_arg", ID_DEF_ARG, R_DEF_ARG_4);
	}
	| Sconst {
		JOUT("SYN: def_arg -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "def_arg", ID_DEF_ARG, R_DEF_ARG_5);
	}
	;

explain_option_elem
	: explain_option_name explain_option_arg {
		JOUT("SYN: explain_option_elem -> explain_option_name_explain_option_arg \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "explain_option_elem", ID_EXPLAIN_OPTION_ELEM, R_EXPLAIN_OPTION_ELEM_1);
	}
	;

func_arg
	: arg_class param_name func_type {
		JOUT("SYN: func_arg -> arg_class_param_name_func_type \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_arg", ID_FUNC_ARG, R_FUNC_ARG_1);
	}
	| param_name arg_class func_type {
		JOUT("SYN: func_arg -> param_name_arg_class_func_type \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_arg", ID_FUNC_ARG, R_FUNC_ARG_2);
	}
	| param_name func_type {
		JOUT("SYN: func_arg -> param_name_func_type \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "func_arg", ID_FUNC_ARG, R_FUNC_ARG_3);
	}
	| arg_class func_type {
		JOUT("SYN: func_arg -> arg_class_func_type \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "func_arg", ID_FUNC_ARG, R_FUNC_ARG_4);
	}
	| func_type {
		JOUT("SYN: func_arg -> func_type \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_arg", ID_FUNC_ARG, R_FUNC_ARG_5);
	}
	;

opt_inline_handler
	: INLINE_P handler_name {
		JOUT("SYN: opt_inline_handler -> INLINE_P_handler_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_inline_handler", ID_OPT_INLINE_HANDLER, R_OPT_INLINE_HANDLER_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_inline_handler -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_inline_handler", ID_OPT_INLINE_HANDLER, R_OPT_INLINE_HANDLER__NULL);
	}
	;

opt_no_inherit
	: NO INHERIT {
		JOUT("SYN: opt_no_inherit -> NO_INHERIT \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_no_inherit", ID_OPT_NO_INHERIT, R_OPT_NO_INHERIT_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_no_inherit -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_no_inherit", ID_OPT_NO_INHERIT, R_OPT_NO_INHERIT__NULL);
	}
	;

opt_procedural
	: PROCEDURAL {
		JOUT("SYN: opt_procedural -> PROCEDURAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_procedural", ID_OPT_PROCEDURAL, R_OPT_PROCEDURAL_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_procedural -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_procedural", ID_OPT_PROCEDURAL, R_OPT_PROCEDURAL__NULL);
	}
	;

insert_rest
	: SelectStmt {
		JOUT("SYN: insert_rest -> SelectStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "insert_rest", ID_INSERT_REST, R_INSERT_REST_1);
	}
	| SQL_LP insert_column_list SQL_RP SelectStmt {
		JOUT("SYN: insert_rest -> SQL_LP_insert_column_list_SQL_RP_SelectStmt \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "insert_rest", ID_INSERT_REST, R_INSERT_REST_2);
	}
	| DEFAULT VALUES {
		JOUT("SYN: insert_rest -> DEFAULT_VALUES \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "insert_rest", ID_INSERT_REST, R_INSERT_REST_3);
	}
	;

fdw_options
	: fdw_option {
		JOUT("SYN: fdw_options -> fdw_option \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "fdw_options", ID_FDW_OPTIONS, R_FDW_OPTIONS_1);
	}
	| fdw_options fdw_option {
		JOUT("SYN: fdw_options -> fdw_options_fdw_option \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fdw_options", ID_FDW_OPTIONS, R_FDW_OPTIONS_2);
	}
	;

DeleteStmt
	: opt_with_clause DELETE_P FROM relation_expr_opt_alias_list using_clause where_or_current_clause returning_clause {
		JOUT("SYN: DeleteStmt -> opt_with_clause_DELETE_P_FROM_relation_expr_opt_alias_using_clause_where_or_current_clause_returning_clause \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DeleteStmt", ID_DELETESTMT, R_DELETESTMT_1);
	}
	| opt_with_clause DELETE_P relation_expr_opt_alias_list using_clause where_or_current_clause returning_clause {
		JOUT("SYN: DeleteStmt -> opt_with_clause_DELETE_P_relation_expr_opt_alias_using_clause_where_or_current_clause_returning_clause \n");
		// todo3
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DeleteStmt", ID_DELETESTMT, R_DELETESTMT_2);
	}
	| opt_with_clause DELETE_P relation_expr_opt_alias FROM relation_expr_opt_alias_list using_clause where_or_current_clause returning_clause {
		JOUT("SYN: DeleteStmt -> opt_with_clause_DELETE_P_DTNAME_FROM_relation_expr_opt_alias_using_clause_where_or_current_clause_returning_clause \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "DeleteStmt", ID_DELETESTMT, R_DELETESTMT_3);
	}	
	;

TriggerForType
	: ROW {
		JOUT("SYN: TriggerForType -> ROW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerForType", ID_TRIGGERFORTYPE, R_TRIGGERFORTYPE_1);
	}
	| STATEMENT {
		JOUT("SYN: TriggerForType -> STATEMENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerForType", ID_TRIGGERFORTYPE, R_TRIGGERFORTYPE_2);
	}
	;

DropRoleStmt
	: DROP ROLE name_list {
		JOUT("SYN: DropRoleStmt -> DROP_ROLE_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DropRoleStmt", ID_DROPROLESTMT, R_DROPROLESTMT_1);
	}
	| DROP ROLE IF_P EXISTS name_list {
		JOUT("SYN: DropRoleStmt -> DROP_ROLE_IF_P_EXISTS_name_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropRoleStmt", ID_DROPROLESTMT, R_DROPROLESTMT_2);
	}
	;

generic_option_arg
	: Sconst {
		JOUT("SYN: generic_option_arg -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "generic_option_arg", ID_GENERIC_OPTION_ARG, R_GENERIC_OPTION_ARG_1);
	}
	;

FetchStmt
	: FETCH fetch_args {
		JOUT("SYN: FetchStmt -> FETCH_fetch_args \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "FetchStmt", ID_FETCHSTMT, R_FETCHSTMT_1);
	}
	| MOVE fetch_args {
		JOUT("SYN: FetchStmt -> MOVE_fetch_args \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "FetchStmt", ID_FETCHSTMT, R_FETCHSTMT_2);
	}
	;

opt_class
	: any_name {
		JOUT("SYN: opt_class -> any_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_class", ID_OPT_CLASS, R_OPT_CLASS_1);
	}
	| USING any_name {
		JOUT("SYN: opt_class -> USING_any_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_class", ID_OPT_CLASS, R_OPT_CLASS_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_class -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_class", ID_OPT_CLASS, R_OPT_CLASS__NULL);
	}
	;

constraints_set_mode
	: DEFERRED {
		JOUT("SYN: constraints_set_mode -> DEFERRED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "constraints_set_mode", ID_CONSTRAINTS_SET_MODE, R_CONSTRAINTS_SET_MODE_1);
	}
	| IMMEDIATE {
		JOUT("SYN: constraints_set_mode -> IMMEDIATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "constraints_set_mode", ID_CONSTRAINTS_SET_MODE, R_CONSTRAINTS_SET_MODE_2);
	}
	;

any_name_list
	: any_name {
		JOUT("SYN: any_name_list -> any_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "any_name_list", ID_ANY_NAME_LIST, R_ANY_NAME_LIST_1);
	}
	| any_name_list SQL_COMMA any_name {
		JOUT("SYN: any_name_list -> any_name_list_SQL_COMMA_any_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "any_name_list", ID_ANY_NAME_LIST, R_ANY_NAME_LIST_2);
	}
	;

access_method
	: ColId {
		JOUT("SYN: access_method -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "access_method", ID_ACCESS_METHOD, R_ACCESS_METHOD_1);
	}
	;

TableConstraint
	: CONSTRAINT name ConstraintElem {
		JOUT("SYN: TableConstraint -> CONSTRAINT_name_ConstraintElem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TableConstraint", ID_TABLECONSTRAINT, R_TABLECONSTRAINT_1);
	}
	| ConstraintElem {
		JOUT("SYN: TableConstraint -> ConstraintElem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableConstraint", ID_TABLECONSTRAINT, R_TABLECONSTRAINT_2);
	}
	;

RuleActionStmt
	: SelectStmt {
		JOUT("SYN: RuleActionStmt -> SelectStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionStmt", ID_RULEACTIONSTMT, R_RULEACTIONSTMT_1);
	}
	| InsertStmt {
		JOUT("SYN: RuleActionStmt -> InsertStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionStmt", ID_RULEACTIONSTMT, R_RULEACTIONSTMT_2);
	}
	| UpdateStmt {
		JOUT("SYN: RuleActionStmt -> UpdateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionStmt", ID_RULEACTIONSTMT, R_RULEACTIONSTMT_3);
	}
	| DeleteStmt {
		JOUT("SYN: RuleActionStmt -> DeleteStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionStmt", ID_RULEACTIONSTMT, R_RULEACTIONSTMT_4);
	}
	| NotifyStmt {
		JOUT("SYN: RuleActionStmt -> NotifyStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionStmt", ID_RULEACTIONSTMT, R_RULEACTIONSTMT_5);
	}
	;

ConstCharacter
	: CharacterWithLength {
		JOUT("SYN: ConstCharacter -> CharacterWithLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstCharacter", ID_CONSTCHARACTER, R_CONSTCHARACTER_1);
	}
	| CharacterWithoutLength {
		JOUT("SYN: ConstCharacter -> CharacterWithoutLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstCharacter", ID_CONSTCHARACTER, R_CONSTCHARACTER_2);
	}
	;

join_qual
	: USING SQL_LP name_list SQL_RP {
		JOUT("SYN: join_qual -> USING_SQL_LP_name_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "join_qual", ID_JOIN_QUAL, R_JOIN_QUAL_1);
	}
	| ON a_expr {
		JOUT("SYN: join_qual -> ON_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "join_qual", ID_JOIN_QUAL, R_JOIN_QUAL_2);
	}
	;

LockStmt
	: LOCK_P opt_table relation_expr_list opt_lock opt_nowait {
		JOUT("SYN: LockStmt -> LOCK_P_opt_table_relation_expr_list_opt_lock_opt_nowait \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "LockStmt", ID_LOCKSTMT, R_LOCKSTMT_1);
	}
	;

TableFuncElementList
	: TableFuncElement {
		JOUT("SYN: TableFuncElementList -> TableFuncElement \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableFuncElementList", ID_TABLEFUNCELEMENTLIST, R_TABLEFUNCELEMENTLIST_1);
	}
	| TableFuncElementList SQL_COMMA TableFuncElement {
		JOUT("SYN: TableFuncElementList -> TableFuncElementList_SQL_COMMA_TableFuncElement \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TableFuncElementList", ID_TABLEFUNCELEMENTLIST, R_TABLEFUNCELEMENTLIST_2);
	}
	;


// modify add sample_clause
target_el
	: a_expr AS ColLabel sample_clause {
		JOUT("SYN: target_el -> a_expr_AS_ColLabel \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "target_el", ID_TARGET_EL, R_TARGET_EL_1);
	}
	| a_expr IDENT sample_clause {
		JOUT("SYN: target_el -> a_expr_IDENT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "target_el", ID_TARGET_EL, R_TARGET_EL_2);
	}
	| a_expr sample_clause {
		// modify
		JOUT("SYN: target_el -> a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "target_el", ID_TARGET_EL, R_TARGET_EL_3);
	}
	| SQL_MUL {
		JOUT("SYN: target_el -> SQL_MUL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "target_el", ID_TARGET_EL, R_TARGET_EL_4);
	}
	| a_expr AS Sconst {
		// todo3
		JOUT("SYN: target_el -> a_expr AS Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "target_el", ID_TARGET_EL, R_TARGET_EL_5);
	}
	;

validator_clause
	: VALIDATOR handler_name {
		JOUT("SYN: validator_clause -> VALIDATOR_handler_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "validator_clause", ID_VALIDATOR_CLAUSE, R_VALIDATOR_CLAUSE_1);
	}
	| NO VALIDATOR {
		JOUT("SYN: validator_clause -> NO_VALIDATOR \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "validator_clause", ID_VALIDATOR_CLAUSE, R_VALIDATOR_CLAUSE_2);
	}
	;

function_with_argtypes
	: func_name func_args {
		JOUT("SYN: function_with_argtypes -> func_name_func_args \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "function_with_argtypes", ID_FUNCTION_WITH_ARGTYPES, R_FUNCTION_WITH_ARGTYPES_1);
	}
	;

opt_float
	: SQL_LP Iconst SQL_RP {
		JOUT("SYN: opt_float -> SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_float", ID_OPT_FLOAT, R_OPT_FLOAT_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_float -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_float", ID_OPT_FLOAT, R_OPT_FLOAT__NULL);
	}
	;

alias_clause
	: AS ColId SQL_LP name_list SQL_RP {
		JOUT("SYN: alias_clause -> AS_ColId_SQL_LP_name_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "alias_clause", ID_ALIAS_CLAUSE, R_ALIAS_CLAUSE_1);
	}
	| AS ColId {
		JOUT("SYN: alias_clause -> AS_ColId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alias_clause", ID_ALIAS_CLAUSE, R_ALIAS_CLAUSE_2);
	}
	| ColId SQL_LP name_list SQL_RP {
		JOUT("SYN: alias_clause -> ColId_SQL_LP_name_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alias_clause", ID_ALIAS_CLAUSE, R_ALIAS_CLAUSE_3);
	}
	| ColId {
		JOUT("SYN: alias_clause -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "alias_clause", ID_ALIAS_CLAUSE, R_ALIAS_CLAUSE_4);
	}
	;

func_args
	: SQL_LP func_args_list SQL_RP {
		JOUT("SYN: func_args -> SQL_LP_func_args_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_args", ID_FUNC_ARGS, R_FUNC_ARGS_1);
	}
	| SQL_LP SQL_RP {
		JOUT("SYN: func_args -> SQL_LP_SQL_RP \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "func_args", ID_FUNC_ARGS, R_FUNC_ARGS_2);
	}
	;

case_expr
	: CASE case_arg when_clause_list case_default END_P {
		JOUT("SYN: case_expr -> CASE_case_arg_when_clause_list_case_default_END_P \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "case_expr", ID_CASE_EXPR, R_CASE_EXPR_1);
	}
	;

file_name
	: Sconst {
		JOUT("SYN: file_name -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "file_name", ID_FILE_NAME, R_FILE_NAME_1);
	}
	;

for_locking_items
	: for_locking_item {
		JOUT("SYN: for_locking_items -> for_locking_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "for_locking_items", ID_FOR_LOCKING_ITEMS, R_FOR_LOCKING_ITEMS_1);
	}
	| for_locking_items for_locking_item {
		JOUT("SYN: for_locking_items -> for_locking_items_for_locking_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "for_locking_items", ID_FOR_LOCKING_ITEMS, R_FOR_LOCKING_ITEMS_2);
	}
	;

multiple_set_clause
	: SQL_LP set_target_list SQL_RP SQL_EQ ctext_row {
		JOUT("SYN: multiple_set_clause -> SQL_LP_set_target_list_SQL_RP_SQL_EQ_ctext_row \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "multiple_set_clause", ID_MULTIPLE_SET_CLAUSE, R_MULTIPLE_SET_CLAUSE_1);
	}
	;

opt_force
	: FORCE {
		JOUT("SYN: opt_force -> FORCE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_force", ID_OPT_FORCE, R_OPT_FORCE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_force -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_force", ID_OPT_FORCE, R_OPT_FORCE__NULL);
	}
	;

group_clause
	: GROUP_P BY expr_list {
		JOUT("SYN: group_clause -> GROUP_P_BY_expr_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "group_clause", ID_GROUP_CLAUSE, R_GROUP_CLAUSE_1);
	}
	| GROUP_P BY TD_GROUPING TD_SETS expr_list {
		// todo3
		JOUT("SYN: group_clause -> GROUP_P_BY_TD_GROUPING TD_SETS expr_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "group_clause", ID_GROUP_CLAUSE, R_GROUP_CLAUSE_2);
	}
	| /* empty */ {
		JOUT("SYN: group_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "group_clause", ID_GROUP_CLAUSE, R_GROUP_CLAUSE__NULL);
	}
	;

opt_alias_clause
	: alias_clause {
		JOUT("SYN: opt_alias_clause -> alias_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_alias_clause", ID_OPT_ALIAS_CLAUSE, R_OPT_ALIAS_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_alias_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_alias_clause", ID_OPT_ALIAS_CLAUSE, R_OPT_ALIAS_CLAUSE__NULL);
	}
	;

createfunc_opt_item
	: AS func_as {
		JOUT("SYN: createfunc_opt_item -> AS_func_as \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "createfunc_opt_item", ID_CREATEFUNC_OPT_ITEM, R_CREATEFUNC_OPT_ITEM_1);
	}
	| LANGUAGE ColId_or_Sconst {
		JOUT("SYN: createfunc_opt_item -> LANGUAGE_ColId_or_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "createfunc_opt_item", ID_CREATEFUNC_OPT_ITEM, R_CREATEFUNC_OPT_ITEM_2);
	}
	| WINDOW {
		JOUT("SYN: createfunc_opt_item -> WINDOW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "createfunc_opt_item", ID_CREATEFUNC_OPT_ITEM, R_CREATEFUNC_OPT_ITEM_3);
	}
	| common_func_opt_item {
		JOUT("SYN: createfunc_opt_item -> common_func_opt_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "createfunc_opt_item", ID_CREATEFUNC_OPT_ITEM, R_CREATEFUNC_OPT_ITEM_4);
	}
	;

opt_recheck
	: RECHECK {
		JOUT("SYN: opt_recheck -> RECHECK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_recheck", ID_OPT_RECHECK, R_OPT_RECHECK_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_recheck -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_recheck", ID_OPT_RECHECK, R_OPT_RECHECK__NULL);
	}
	;

TypedTableElement
	: columnOptions {
		JOUT("SYN: TypedTableElement -> columnOptions \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TypedTableElement", ID_TYPEDTABLEELEMENT, R_TYPEDTABLEELEMENT_1);
	}
	| TableConstraint {
		JOUT("SYN: TypedTableElement -> TableConstraint \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TypedTableElement", ID_TYPEDTABLEELEMENT, R_TYPEDTABLEELEMENT_2);
	}
	;

OptTableFuncElementList
	: TableFuncElementList {
		JOUT("SYN: OptTableFuncElementList -> TableFuncElementList \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptTableFuncElementList", ID_OPTTABLEFUNCELEMENTLIST, R_OPTTABLEFUNCELEMENTLIST_1);
	}
	| /* empty */ {
		JOUT("SYN: OptTableFuncElementList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptTableFuncElementList", ID_OPTTABLEFUNCELEMENTLIST, R_OPTTABLEFUNCELEMENTLIST__NULL);
	}
	;

CreatePLangStmt
	: CREATE opt_or_replace opt_trusted opt_procedural LANGUAGE ColId_or_Sconst {
		JOUT("SYN: CreatePLangStmt -> CREATE_opt_or_replace_opt_trusted_opt_procedural_LANGUAGE_ColId_or_Sconst \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CreatePLangStmt", ID_CREATEPLANGSTMT, R_CREATEPLANGSTMT_1);
	}
	| CREATE opt_or_replace opt_trusted opt_procedural LANGUAGE ColId_or_Sconst HANDLER handler_name opt_inline_handler opt_validator {
		JOUT("SYN: CreatePLangStmt -> CREATE_opt_or_replace_opt_trusted_opt_procedural_LANGUAGE_ColId_or_Sconst_HANDLER_handler_name_opt_inline_handler_opt_validator \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "CreatePLangStmt", ID_CREATEPLANGSTMT, R_CREATEPLANGSTMT_2);
	}
	;

AlterCompositeTypeStmt
	: ALTER TYPE_P any_name alter_type_cmds {
		JOUT("SYN: AlterCompositeTypeStmt -> ALTER_TYPE_P_any_name_alter_type_cmds \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterCompositeTypeStmt", ID_ALTERCOMPOSITETYPESTMT, R_ALTERCOMPOSITETYPESTMT_1);
	}
	;

AlterEnumStmt
	: ALTER TYPE_P any_name ADD_P VALUE_P Sconst {
		JOUT("SYN: AlterEnumStmt -> ALTER_TYPE_P_any_name_ADD_P_VALUE_P_Sconst \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterEnumStmt", ID_ALTERENUMSTMT, R_ALTERENUMSTMT_1);
	}
	| ALTER TYPE_P any_name ADD_P VALUE_P Sconst BEFORE Sconst {
		JOUT("SYN: AlterEnumStmt -> ALTER_TYPE_P_any_name_ADD_P_VALUE_P_Sconst_BEFORE_Sconst \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterEnumStmt", ID_ALTERENUMSTMT, R_ALTERENUMSTMT_2);
	}
	| ALTER TYPE_P any_name ADD_P VALUE_P Sconst AFTER Sconst {
		JOUT("SYN: AlterEnumStmt -> ALTER_TYPE_P_any_name_ADD_P_VALUE_P_Sconst_AFTER_Sconst \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterEnumStmt", ID_ALTERENUMSTMT, R_ALTERENUMSTMT_3);
	}
	;

func_type
	: Typename {
		JOUT("SYN: func_type -> Typename \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_type", ID_FUNC_TYPE, R_FUNC_TYPE_1);
	}
	| type_function_name attrs SQL_MOD TYPE_P {
		JOUT("SYN: func_type -> type_function_name_attrs_SQL_MOD_TYPE_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_type", ID_FUNC_TYPE, R_FUNC_TYPE_2);
	}
	| SETOF type_function_name attrs SQL_MOD TYPE_P {
		JOUT("SYN: func_type -> SETOF_type_function_name_attrs_SQL_MOD_TYPE_P \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_type", ID_FUNC_TYPE, R_FUNC_TYPE_3);
	}
	;

copy_delimiter
	: opt_using DELIMITERS Sconst {
		JOUT("SYN: copy_delimiter -> opt_using_DELIMITERS_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_delimiter", ID_COPY_DELIMITER, R_COPY_DELIMITER_1);
	}
	| /* empty */ {
		JOUT("SYN: copy_delimiter -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "copy_delimiter", ID_COPY_DELIMITER, R_COPY_DELIMITER__NULL);
	}
	;

CheckPointStmt
	: CHECKPOINT {
		JOUT("SYN: CheckPointStmt -> CHECKPOINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "CheckPointStmt", ID_CHECKPOINTSTMT, R_CHECKPOINTSTMT_1);
	}
	;

opt_all
	: ALL {
		JOUT("SYN: opt_all -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_all", ID_OPT_ALL, R_OPT_ALL_1);
	}
	| DISTINCT {
		JOUT("SYN: opt_all -> DISTINCT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_all", ID_OPT_ALL, R_OPT_ALL_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_all -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_all", ID_OPT_ALL, R_OPT_ALL__NULL);
	}
	;

key_actions
	: key_update {
		JOUT("SYN: key_actions -> key_update \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "key_actions", ID_KEY_ACTIONS, R_KEY_ACTIONS_1);
	}
	| key_delete {
		JOUT("SYN: key_actions -> key_delete \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "key_actions", ID_KEY_ACTIONS, R_KEY_ACTIONS_2);
	}
	| key_update key_delete {
		JOUT("SYN: key_actions -> key_update_key_delete \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_actions", ID_KEY_ACTIONS, R_KEY_ACTIONS_3);
	}
	| key_delete key_update {
		JOUT("SYN: key_actions -> key_delete_key_update \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_actions", ID_KEY_ACTIONS, R_KEY_ACTIONS_4);
	}
	| /* empty */ {
		JOUT("SYN: key_actions -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "key_actions", ID_KEY_ACTIONS, R_KEY_ACTIONS__NULL);
	}
	;

CreateOpFamilyStmt
	: CREATE OPERATOR FAMILY any_name USING access_method {
		JOUT("SYN: CreateOpFamilyStmt -> CREATE_OPERATOR_FAMILY_any_name_USING_access_method \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CreateOpFamilyStmt", ID_CREATEOPFAMILYSTMT, R_CREATEOPFAMILYSTMT_1);
	}
	;

opt_column_list
	: SQL_LP columnList SQL_RP {
		JOUT("SYN: opt_column_list -> SQL_LP_columnList_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_column_list", ID_OPT_COLUMN_LIST, R_OPT_COLUMN_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_column_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_column_list", ID_OPT_COLUMN_LIST, R_OPT_COLUMN_LIST__NULL);
	}
	;

ListenStmt
	: LISTEN ColId {
		JOUT("SYN: ListenStmt -> LISTEN_ColId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ListenStmt", ID_LISTENSTMT, R_LISTENSTMT_1);
	}
	;

OptConstrFromTable
	: FROM qualified_name {
		JOUT("SYN: OptConstrFromTable -> FROM_qualified_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptConstrFromTable", ID_OPTCONSTRFROMTABLE, R_OPTCONSTRFROMTABLE_1);
	}
	| /* empty */ {
		JOUT("SYN: OptConstrFromTable -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptConstrFromTable", ID_OPTCONSTRFROMTABLE, R_OPTCONSTRFROMTABLE__NULL);
	}
	;

window_specification
	: SQL_LP opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause SQL_RP {
		JOUT("SYN: window_specification -> SQL_LP_opt_existing_window_name_opt_partition_clause_opt_sort_clause_opt_frame_clause_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "window_specification", ID_WINDOW_SPECIFICATION, R_WINDOW_SPECIFICATION_1);
	}
	;

values_clause
	: VALUES ctext_row {
		JOUT("SYN: values_clause -> VALUES_ctext_row \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "values_clause", ID_VALUES_CLAUSE, R_VALUES_CLAUSE_1);
	}
	| values_clause SQL_COMMA ctext_row {
		JOUT("SYN: values_clause -> values_clause_SQL_COMMA_ctext_row \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "values_clause", ID_VALUES_CLAUSE, R_VALUES_CLAUSE_2);
	}
	;

BitWithLength
	: BIT opt_varying SQL_LP expr_list SQL_RP {
		JOUT("SYN: BitWithLength -> BIT_opt_varying_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "BitWithLength", ID_BITWITHLENGTH, R_BITWITHLENGTH_1);
	}
	;

from_list
	: table_ref {
		JOUT("SYN: from_list -> table_ref \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "from_list", ID_FROM_LIST, R_FROM_LIST_1);
	}
	| from_list SQL_COMMA table_ref {
		JOUT("SYN: from_list -> from_list_SQL_COMMA_table_ref \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "from_list", ID_FROM_LIST, R_FROM_LIST_2);
	}
	;

AlterDefaultPrivilegesStmt
	: ALTER DEFAULT PRIVILEGES DefACLOptionList DefACLAction {
		JOUT("SYN: AlterDefaultPrivilegesStmt -> ALTER_DEFAULT_PRIVILEGES_DefACLOptionList_DefACLAction \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterDefaultPrivilegesStmt", ID_ALTERDEFAULTPRIVILEGESSTMT, R_ALTERDEFAULTPRIVILEGESSTMT_1);
	}
	;

Character
	: CharacterWithLength {
		JOUT("SYN: Character -> CharacterWithLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Character", ID_CHARACTER_BIG, R_CHARACTER_BIG_1);
	}
	| CharacterWithoutLength {
		JOUT("SYN: Character -> CharacterWithoutLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Character", ID_CHARACTER_BIG, R_CHARACTER_BIG_2);
	}
	;

RemoveOperStmt
	: DROP OPERATOR any_operator oper_argtypes opt_drop_behavior {
		JOUT("SYN: RemoveOperStmt -> DROP_OPERATOR_any_operator_oper_argtypes_opt_drop_behavior \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "RemoveOperStmt", ID_REMOVEOPERSTMT, R_REMOVEOPERSTMT_1);
	}
	| DROP OPERATOR IF_P EXISTS any_operator oper_argtypes opt_drop_behavior {
		JOUT("SYN: RemoveOperStmt -> DROP_OPERATOR_IF_P_EXISTS_any_operator_oper_argtypes_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RemoveOperStmt", ID_REMOVEOPERSTMT, R_REMOVEOPERSTMT_2);
	}
	;

AlterObjectSchemaStmt
	: ALTER AGGREGATE func_name aggr_args SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_AGGREGATE_func_name_aggr_args_SET_SCHEMA_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_1);
	}
	| ALTER COLLATION any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_COLLATION_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_2);
	}
	| ALTER CONVERSION_P any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_CONVERSION_P_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_3);
	}
	| ALTER DOMAIN_P any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_DOMAIN_P_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_4);
	}
	| ALTER EXTENSION any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_EXTENSION_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_5);
	}
	| ALTER FUNCTION function_with_argtypes SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_FUNCTION_function_with_argtypes_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_6);
	}
	| ALTER OPERATOR any_operator oper_argtypes SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_OPERATOR_any_operator_oper_argtypes_SET_SCHEMA_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_7);
	}
	| ALTER OPERATOR CLASS any_name USING access_method SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_OPERATOR_CLASS_any_name_USING_access_method_SET_SCHEMA_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_8);
	}
	| ALTER OPERATOR FAMILY any_name USING access_method SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_OPERATOR_FAMILY_any_name_USING_access_method_SET_SCHEMA_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_9);
	}
	| ALTER TABLE relation_expr SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_TABLE_relation_expr_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_10);
	}
	| ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_TABLE_IF_P_EXISTS_relation_expr_SET_SCHEMA_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_11);
	}
	| ALTER TEXT_P SEARCH PARSER any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_TEXT_P_SEARCH_PARSER_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_12);
	}
	| ALTER TEXT_P SEARCH DICTIONARY any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_TEXT_P_SEARCH_DICTIONARY_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_13);
	}
	| ALTER TEXT_P SEARCH TEMPLATE any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_TEXT_P_SEARCH_TEMPLATE_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_14);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_15);
	}
	| ALTER SEQUENCE qualified_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_SEQUENCE_qualified_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_16);
	}
	| ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_SEQUENCE_IF_P_EXISTS_qualified_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_17);
	}
	| ALTER VIEW qualified_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_VIEW_qualified_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_18);
	}
	| ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_VIEW_IF_P_EXISTS_qualified_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_19);
	}
	| ALTER FOREIGN TABLE relation_expr SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_FOREIGN_TABLE_relation_expr_SET_SCHEMA_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_20);
	}
	| ALTER FOREIGN TABLE IF_P EXISTS relation_expr SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_FOREIGN_TABLE_IF_P_EXISTS_relation_expr_SET_SCHEMA_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_21);
	}
	| ALTER TYPE_P any_name SET SCHEMA name {
		JOUT("SYN: AlterObjectSchemaStmt -> ALTER_TYPE_P_any_name_SET_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterObjectSchemaStmt", ID_ALTEROBJECTSCHEMASTMT, R_ALTEROBJECTSCHEMASTMT_22);
	}
	;

sortby_list
	: sortby {
		JOUT("SYN: sortby_list -> sortby \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "sortby_list", ID_SORTBY_LIST, R_SORTBY_LIST_1);
	}
	| sortby_list SQL_COMMA sortby {
		JOUT("SYN: sortby_list -> sortby_list_SQL_COMMA_sortby \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "sortby_list", ID_SORTBY_LIST, R_SORTBY_LIST_2);
	}
	;

ColConstraintElem
	: NOT NULL_P {
		JOUT("SYN: ColConstraintElem -> NOT_NULL_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ColConstraintElem", ID_COLCONSTRAINTELEM, R_COLCONSTRAINTELEM_1);
	}
	| NULL_P {
		JOUT("SYN: ColConstraintElem -> NULL_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColConstraintElem", ID_COLCONSTRAINTELEM, R_COLCONSTRAINTELEM_2);
	}
	| UNIQUE opt_definition OptConsTableSpace {
		JOUT("SYN: ColConstraintElem -> UNIQUE_opt_definition_OptConsTableSpace \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ColConstraintElem", ID_COLCONSTRAINTELEM, R_COLCONSTRAINTELEM_3);
	}
	| PRIMARY KEY opt_definition OptConsTableSpace {
		JOUT("SYN: ColConstraintElem -> PRIMARY_KEY_opt_definition_OptConsTableSpace \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ColConstraintElem", ID_COLCONSTRAINTELEM, R_COLCONSTRAINTELEM_4);
	}
	| CHECK SQL_LP a_expr SQL_RP opt_no_inherit {
		JOUT("SYN: ColConstraintElem -> CHECK_SQL_LP_a_expr_SQL_RP_opt_no_inherit \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "ColConstraintElem", ID_COLCONSTRAINTELEM, R_COLCONSTRAINTELEM_5);
	}
	| DEFAULT b_expr {
		JOUT("SYN: ColConstraintElem -> DEFAULT_b_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ColConstraintElem", ID_COLCONSTRAINTELEM, R_COLCONSTRAINTELEM_6);
	}
	| REFERENCES qualified_name opt_column_list key_match key_actions {
		JOUT("SYN: ColConstraintElem -> REFERENCES_qualified_name_opt_column_list_key_match_key_actions \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "ColConstraintElem", ID_COLCONSTRAINTELEM, R_COLCONSTRAINTELEM_7);
	} 
	;

reindex_type
	: INDEX {
		JOUT("SYN: reindex_type -> INDEX \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reindex_type", ID_REINDEX_TYPE, R_REINDEX_TYPE_1);
	}
	| TABLE {
		JOUT("SYN: reindex_type -> TABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reindex_type", ID_REINDEX_TYPE, R_REINDEX_TYPE_2);
	}
	;

CreateSeqStmt
	: CREATE OptTemp SEQUENCE qualified_name OptSeqOptList {
		JOUT("SYN: CreateSeqStmt -> CREATE_OptTemp_SEQUENCE_qualified_name_OptSeqOptList \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CreateSeqStmt", ID_CREATESEQSTMT, R_CREATESEQSTMT_1);
	}
	;

CreateCastStmt
	: CREATE CAST SQL_LP Typename AS Typename SQL_RP WITH FUNCTION function_with_argtypes cast_context {
		JOUT("SYN: CreateCastStmt -> CREATE_CAST_SQL_LP_Typename_AS_Typename_SQL_RP_WITH_FUNCTION_function_with_argtypes_cast_context \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "CreateCastStmt", ID_CREATECASTSTMT, R_CREATECASTSTMT_1);
	}
	| CREATE CAST SQL_LP Typename AS Typename SQL_RP WITHOUT FUNCTION cast_context {
		JOUT("SYN: CreateCastStmt -> CREATE_CAST_SQL_LP_Typename_AS_Typename_SQL_RP_WITHOUT_FUNCTION_cast_context \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "CreateCastStmt", ID_CREATECASTSTMT, R_CREATECASTSTMT_2);
	}
	| CREATE CAST SQL_LP Typename AS Typename SQL_RP WITH INOUT cast_context {
		JOUT("SYN: CreateCastStmt -> CREATE_CAST_SQL_LP_Typename_AS_Typename_SQL_RP_WITH_INOUT_cast_context \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "CreateCastStmt", ID_CREATECASTSTMT, R_CREATECASTSTMT_3);
	}
	;

auth_ident
	: CURRENT_USER {
		JOUT("SYN: auth_ident -> CURRENT_USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "auth_ident", ID_AUTH_IDENT, R_AUTH_IDENT_1);
	}
	| USER {
		JOUT("SYN: auth_ident -> USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "auth_ident", ID_AUTH_IDENT, R_AUTH_IDENT_2);
	}
	| RoleId {
		JOUT("SYN: auth_ident -> RoleId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "auth_ident", ID_AUTH_IDENT, R_AUTH_IDENT_3);
	}
	;

substr_from
	: FROM a_expr {
		JOUT("SYN: substr_from -> FROM_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "substr_from", ID_SUBSTR_FROM, R_SUBSTR_FROM_1);
	}
	;

unreserved_keyword
	: ABORT_P {
		JOUT("SYN: unreserved_keyword -> ABORT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_1);
	}
	| ABSOLUTE_P {
		JOUT("SYN: unreserved_keyword -> ABSOLUTE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_2);
	}
	| ACCESS {
		JOUT("SYN: unreserved_keyword -> ACCESS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_3);
	}
	| ACTION {
		JOUT("SYN: unreserved_keyword -> ACTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_4);
	}
	| ADD_P {
		JOUT("SYN: unreserved_keyword -> ADD_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_5);
	}
	| ADMIN {
		JOUT("SYN: unreserved_keyword -> ADMIN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_6);
	}
	| AFTER {
		JOUT("SYN: unreserved_keyword -> AFTER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_7);
	}
	| AGGREGATE {
		JOUT("SYN: unreserved_keyword -> AGGREGATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_8);
	}
	| ALSO {
		JOUT("SYN: unreserved_keyword -> ALSO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_9);
	}
	| ALTER {
		JOUT("SYN: unreserved_keyword -> ALTER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_10);
	}
	| ALWAYS {
		JOUT("SYN: unreserved_keyword -> ALWAYS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_11);
	}
	| ASSERTION {
		JOUT("SYN: unreserved_keyword -> ASSERTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_12);
	}
	| ASSIGNMENT {
		JOUT("SYN: unreserved_keyword -> ASSIGNMENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_13);
	}
	| AT {
		JOUT("SYN: unreserved_keyword -> AT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_14);
	}
	| ATTRIBUTE {
		JOUT("SYN: unreserved_keyword -> ATTRIBUTE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_15);
	}
	| BACKWARD {
		JOUT("SYN: unreserved_keyword -> BACKWARD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_16);
	}
	| BEFORE {
		JOUT("SYN: unreserved_keyword -> BEFORE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_17);
	}
	| BEGIN_P {
		JOUT("SYN: unreserved_keyword -> BEGIN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_18);
	}
	| BY {
		JOUT("SYN: unreserved_keyword -> BY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_19);
	}
	| CACHE {
		JOUT("SYN: unreserved_keyword -> CACHE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_20);
	}
	| CALLED {
		JOUT("SYN: unreserved_keyword -> CALLED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_21);
	}
	| CASCADE {
		JOUT("SYN: unreserved_keyword -> CASCADE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_22);
	}
	| CASCADED {
		JOUT("SYN: unreserved_keyword -> CASCADED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_23);
	}
	| CATALOG_P {
		JOUT("SYN: unreserved_keyword -> CATALOG_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_24);
	}
	| CHAIN {
		JOUT("SYN: unreserved_keyword -> CHAIN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_25);
	}
	| CHARACTERISTICS {
		JOUT("SYN: unreserved_keyword -> CHARACTERISTICS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_26);
	}
	| CHECKPOINT {
		JOUT("SYN: unreserved_keyword -> CHECKPOINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_27);
	}
	| CLASS {
		JOUT("SYN: unreserved_keyword -> CLASS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_28);
	}
	| CLOSE {
		JOUT("SYN: unreserved_keyword -> CLOSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_29);
	}
	| CLUSTER {
		JOUT("SYN: unreserved_keyword -> CLUSTER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_30);
	}
	| COMMENT {
		JOUT("SYN: unreserved_keyword -> COMMENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_31);
	}
	| COMMENTS {
		JOUT("SYN: unreserved_keyword -> COMMENTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_32);
	}
	| COMMIT {
		JOUT("SYN: unreserved_keyword -> COMMIT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_33);
	}
	| COMMITTED {
		JOUT("SYN: unreserved_keyword -> COMMITTED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_34);
	}
	| CONFIGURATION {
		JOUT("SYN: unreserved_keyword -> CONFIGURATION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_35);
	}
	| CONNECTION {
		JOUT("SYN: unreserved_keyword -> CONNECTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_36);
	}
	| CONSTRAINTS {
		JOUT("SYN: unreserved_keyword -> CONSTRAINTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_37);
	}
	| CONTENT_P {
		JOUT("SYN: unreserved_keyword -> CONTENT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_38);
	}
	| CONTINUE_P {
		JOUT("SYN: unreserved_keyword -> CONTINUE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_39);
	}
	| CONVERSION_P {
		JOUT("SYN: unreserved_keyword -> CONVERSION_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_40);
	}
	| COPY {
		JOUT("SYN: unreserved_keyword -> COPY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_41);
	}
	| COST {
		JOUT("SYN: unreserved_keyword -> COST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_42);
	}
	| CSV {
		JOUT("SYN: unreserved_keyword -> CSV \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_43);
	}
	| CURRENT_P {
		JOUT("SYN: unreserved_keyword -> CURRENT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_44);
	}
	| CURSOR {
		JOUT("SYN: unreserved_keyword -> CURSOR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_45);
	}
	| CYCLE {
		JOUT("SYN: unreserved_keyword -> CYCLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_46);
	}
	| DATA_P {
		JOUT("SYN: unreserved_keyword -> DATA_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_47);
	}
	| DATABASE {
		JOUT("SYN: unreserved_keyword -> DATABASE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_48);
	}
	| DAY_P {
		JOUT("SYN: unreserved_keyword -> DAY_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_49);
	}
	| DEALLOCATE {
		JOUT("SYN: unreserved_keyword -> DEALLOCATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_50);
	}
	| DECLARE {
		JOUT("SYN: unreserved_keyword -> DECLARE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_51);
	}
	| DEFAULTS {
		JOUT("SYN: unreserved_keyword -> DEFAULTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_52);
	}
	| DEFERRED {
		JOUT("SYN: unreserved_keyword -> DEFERRED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_53);
	}
	| DEFINER {
		JOUT("SYN: unreserved_keyword -> DEFINER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_54);
	}
	| DELETE_P {
		JOUT("SYN: unreserved_keyword -> DELETE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_55);
	}
	| DELIMITER {
		JOUT("SYN: unreserved_keyword -> DELIMITER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_56);
	}
	| DELIMITERS {
		JOUT("SYN: unreserved_keyword -> DELIMITERS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_57);
	}
	| DICTIONARY {
		JOUT("SYN: unreserved_keyword -> DICTIONARY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_58);
	}
	| DISABLE_P {
		JOUT("SYN: unreserved_keyword -> DISABLE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_59);
	}
	| DISCARD {
		JOUT("SYN: unreserved_keyword -> DISCARD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_60);
	}
	| DOCUMENT_P {
		JOUT("SYN: unreserved_keyword -> DOCUMENT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_61);
	}
	| DOMAIN_P {
		JOUT("SYN: unreserved_keyword -> DOMAIN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_62);
	}
	| DOUBLE_P {
		JOUT("SYN: unreserved_keyword -> DOUBLE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_63);
	}
	| DROP {
		JOUT("SYN: unreserved_keyword -> DROP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_64);
	}
	| EACH {
		JOUT("SYN: unreserved_keyword -> EACH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_65);
	}
	| ENABLE_P {
		JOUT("SYN: unreserved_keyword -> ENABLE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_66);
	}
	| ENCODING {
		JOUT("SYN: unreserved_keyword -> ENCODING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_67);
	}
	| ENCRYPTED {
		JOUT("SYN: unreserved_keyword -> ENCRYPTED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_68);
	}
	| ENUM_P {
		JOUT("SYN: unreserved_keyword -> ENUM_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_69);
	}
	| ESCAPE {
		JOUT("SYN: unreserved_keyword -> ESCAPE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_70);
	}
	| EXCLUDE {
		JOUT("SYN: unreserved_keyword -> EXCLUDE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_71);
	}
	| EXCLUDING {
		JOUT("SYN: unreserved_keyword -> EXCLUDING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_72);
	}
	| EXCLUSIVE {
		JOUT("SYN: unreserved_keyword -> EXCLUSIVE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_73);
	}
	| EXECUTE {
		JOUT("SYN: unreserved_keyword -> EXECUTE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_74);
	}
	| EXPLAIN {
		JOUT("SYN: unreserved_keyword -> EXPLAIN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_75);
	}
	| EXTENSION {
		JOUT("SYN: unreserved_keyword -> EXTENSION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_76);
	}
	| EXTERNAL {
		JOUT("SYN: unreserved_keyword -> EXTERNAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_77);
	}
	| FAMILY {
		JOUT("SYN: unreserved_keyword -> FAMILY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_78);
	}
	| FIRST_P {
		JOUT("SYN: unreserved_keyword -> FIRST_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_79);
	}
	| FOLLOWING {
		JOUT("SYN: unreserved_keyword -> FOLLOWING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_80);
	}
	| FORCE {
		JOUT("SYN: unreserved_keyword -> FORCE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_81);
	}
	| FORWARD {
		JOUT("SYN: unreserved_keyword -> FORWARD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_82);
	}
	| FUNCTION {
		JOUT("SYN: unreserved_keyword -> FUNCTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_83);
	}
	| FUNCTIONS {
		JOUT("SYN: unreserved_keyword -> FUNCTIONS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_84);
	}
	| GLOBAL {
		JOUT("SYN: unreserved_keyword -> GLOBAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_85);
	}
	| GRANTED {
		JOUT("SYN: unreserved_keyword -> GRANTED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_86);
	}
	| HANDLER {
		JOUT("SYN: unreserved_keyword -> HANDLER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_87);
	}
	| HEADER_P {
		JOUT("SYN: unreserved_keyword -> HEADER_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_88);
	}
	| HOLD {
		JOUT("SYN: unreserved_keyword -> HOLD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_89);
	}
	| HOUR_P {
		JOUT("SYN: unreserved_keyword -> HOUR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_90);
	}
	| IDENTITY_P {
		JOUT("SYN: unreserved_keyword -> IDENTITY_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_91);
	}
	| IF_P {
		JOUT("SYN: unreserved_keyword -> IF_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_92);
	}
	| IMMEDIATE {
		JOUT("SYN: unreserved_keyword -> IMMEDIATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_93);
	}
	| IMMUTABLE {
		JOUT("SYN: unreserved_keyword -> IMMUTABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_94);
	}
	| IMPLICIT_P {
		JOUT("SYN: unreserved_keyword -> IMPLICIT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_95);
	}
	| INCLUDING {
		JOUT("SYN: unreserved_keyword -> INCLUDING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_96);
	}
	| INCREMENT {
		JOUT("SYN: unreserved_keyword -> INCREMENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_97);
	}
	/*
	| INDEX {
		JOUT("SYN: unreserved_keyword -> INDEX \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_98);
	}*/
	| INDEXES {
		JOUT("SYN: unreserved_keyword -> INDEXES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_99);
	}
	| INHERIT {
		JOUT("SYN: unreserved_keyword -> INHERIT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_100);
	}
	| INHERITS {
		JOUT("SYN: unreserved_keyword -> INHERITS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_101);
	}
	| INLINE_P {
		JOUT("SYN: unreserved_keyword -> INLINE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_102);
	}
	| INPUT_P {
		JOUT("SYN: unreserved_keyword -> INPUT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_103);
	}
	| INSENSITIVE {
		JOUT("SYN: unreserved_keyword -> INSENSITIVE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_104);
	}
	| INSERT {
		JOUT("SYN: unreserved_keyword -> INSERT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_105);
	}
	| INSTEAD {
		JOUT("SYN: unreserved_keyword -> INSTEAD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_106);
	}
	| INVOKER {
		JOUT("SYN: unreserved_keyword -> INVOKER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_107);
	}
	| ISOLATION {
		JOUT("SYN: unreserved_keyword -> ISOLATION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_108);
	}
	| KEY {
		JOUT("SYN: unreserved_keyword -> KEY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_109);
	}
	| LABEL {
		JOUT("SYN: unreserved_keyword -> LABEL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_110);
	}
	| LANGUAGE {
		JOUT("SYN: unreserved_keyword -> LANGUAGE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_111);
	}
	| LARGE_P {
		JOUT("SYN: unreserved_keyword -> LARGE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_112);
	}
	| LAST_P {
		JOUT("SYN: unreserved_keyword -> LAST_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_113);
	}
	| LC_COLLATE_P {
		JOUT("SYN: unreserved_keyword -> LC_COLLATE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_114);
	}
	| LC_CTYPE_P {
		JOUT("SYN: unreserved_keyword -> LC_CTYPE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_115);
	}
	| LEAKPROOF {
		JOUT("SYN: unreserved_keyword -> LEAKPROOF \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_116);
	}
	| LEVEL {
		JOUT("SYN: unreserved_keyword -> LEVEL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_117);
	}
	| LISTEN {
		JOUT("SYN: unreserved_keyword -> LISTEN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_118);
	}
	| LOAD {
		JOUT("SYN: unreserved_keyword -> LOAD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_119);
	}
	| LOCAL {
		JOUT("SYN: unreserved_keyword -> LOCAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_120);
	}
	| LOCATION {
		JOUT("SYN: unreserved_keyword -> LOCATION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_121);
	}
	| LOCK_P {
		JOUT("SYN: unreserved_keyword -> LOCK_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_122);
	}
	| MAPPING {
		JOUT("SYN: unreserved_keyword -> MAPPING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_123);
	}
	| MATCH {
		JOUT("SYN: unreserved_keyword -> MATCH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_124);
	}
	| MAXVALUE {
		JOUT("SYN: unreserved_keyword -> MAXVALUE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_125);
	}
	| MINUTE_P {
		JOUT("SYN: unreserved_keyword -> MINUTE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_126);
	}
	| MINVALUE {
		JOUT("SYN: unreserved_keyword -> MINVALUE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_127);
	}
	| MODE {
		JOUT("SYN: unreserved_keyword -> MODE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_128);
	}
	| MONTH_P {
		JOUT("SYN: unreserved_keyword -> MONTH_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_129);
	}
	| MOVE {
		JOUT("SYN: unreserved_keyword -> MOVE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_130);
	}
	| NAME_P {
		JOUT("SYN: unreserved_keyword -> NAME_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_131);
	}
	| NAMES {
		JOUT("SYN: unreserved_keyword -> NAMES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_132);
	}
	| NEXT {
		JOUT("SYN: unreserved_keyword -> NEXT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_133);
	}
	| NO {
		JOUT("SYN: unreserved_keyword -> NO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_134);
	}
	| NOTHING {
		JOUT("SYN: unreserved_keyword -> NOTHING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_135);
	}
	| NOTIFY {
		JOUT("SYN: unreserved_keyword -> NOTIFY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_136);
	}
	| NOWAIT {
		JOUT("SYN: unreserved_keyword -> NOWAIT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_137);
	}
	| NULLS_P {
		JOUT("SYN: unreserved_keyword -> NULLS_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_138);
	}
	| OBJECT_P {
		JOUT("SYN: unreserved_keyword -> OBJECT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_139);
	}
	| OF {
		JOUT("SYN: unreserved_keyword -> OF \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_140);
	}
	| OFF {
		JOUT("SYN: unreserved_keyword -> OFF \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_141);
	}
	| OIDS {
		JOUT("SYN: unreserved_keyword -> OIDS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_142);
	}
	| OPERATOR {
		JOUT("SYN: unreserved_keyword -> OPERATOR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_143);
	}
	| OPTION {
		JOUT("SYN: unreserved_keyword -> OPTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_144);
	}
	| OPTIONS {
		JOUT("SYN: unreserved_keyword -> OPTIONS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_145);
	}
	| OWNED {
		JOUT("SYN: unreserved_keyword -> OWNED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_146);
	}
	| OWNER {
		JOUT("SYN: unreserved_keyword -> OWNER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_147);
	}
	| PARSER {
		JOUT("SYN: unreserved_keyword -> PARSER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_148);
	}
	| PARTIAL {
		JOUT("SYN: unreserved_keyword -> PARTIAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_149);
	}
	| PARTITION {
		JOUT("SYN: unreserved_keyword -> PARTITION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_150);
	}
	| PASSING {
		JOUT("SYN: unreserved_keyword -> PASSING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_151);
	}
	| PASSWORD {
		JOUT("SYN: unreserved_keyword -> PASSWORD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_152);
	}
	| PLANS {
		JOUT("SYN: unreserved_keyword -> PLANS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_153);
	}
	| PRECEDING {
		JOUT("SYN: unreserved_keyword -> PRECEDING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_154);
	}
	| PREPARE {
		JOUT("SYN: unreserved_keyword -> PREPARE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_155);
	}
	| PREPARED {
		JOUT("SYN: unreserved_keyword -> PREPARED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_156);
	}
	| PRESERVE {
		JOUT("SYN: unreserved_keyword -> PRESERVE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_157);
	}
	| PRIOR {
		JOUT("SYN: unreserved_keyword -> PRIOR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_158);
	}
	| PRIVILEGES {
		JOUT("SYN: unreserved_keyword -> PRIVILEGES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_159);
	}
	| PROCEDURAL {
		JOUT("SYN: unreserved_keyword -> PROCEDURAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_160);
	}
	| PROCEDURE {
		JOUT("SYN: unreserved_keyword -> PROCEDURE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_161);
	}
	| QUOTE {
		JOUT("SYN: unreserved_keyword -> QUOTE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_162);
	}
	| RANGE {
		JOUT("SYN: unreserved_keyword -> RANGE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_163);
	}
	| READ {
		JOUT("SYN: unreserved_keyword -> READ \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_164);
	}
	| REASSIGN {
		JOUT("SYN: unreserved_keyword -> REASSIGN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_165);
	}
	| RECHECK {
		JOUT("SYN: unreserved_keyword -> RECHECK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_166);
	}
	| RECURSIVE {
		JOUT("SYN: unreserved_keyword -> RECURSIVE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_167);
	}
	| REF {
		JOUT("SYN: unreserved_keyword -> REF \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_168);
	}
	| REINDEX {
		JOUT("SYN: unreserved_keyword -> REINDEX \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_169);
	}
	| RELATIVE_P {
		JOUT("SYN: unreserved_keyword -> RELATIVE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_170);
	}
	| RELEASE {
		JOUT("SYN: unreserved_keyword -> RELEASE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_171);
	}
	| RENAME {
		JOUT("SYN: unreserved_keyword -> RENAME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_172);
	}
	| REPEATABLE {
		JOUT("SYN: unreserved_keyword -> REPEATABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_173);
	}
	| REPLACE {
		JOUT("SYN: unreserved_keyword -> REPLACE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_174);
	}
	| REPLICA {
		JOUT("SYN: unreserved_keyword -> REPLICA \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_175);
	}
	| RESET {
		JOUT("SYN: unreserved_keyword -> RESET \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_176);
	}
	| RESTART {
		JOUT("SYN: unreserved_keyword -> RESTART \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_177);
	}
	| RESTRICT {
		JOUT("SYN: unreserved_keyword -> RESTRICT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_178);
	}
	| RETURNS {
		JOUT("SYN: unreserved_keyword -> RETURNS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_179);
	}
	| REVOKE {
		JOUT("SYN: unreserved_keyword -> REVOKE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_180);
	}
	| ROLE {
		JOUT("SYN: unreserved_keyword -> ROLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_181);
	}
	| ROLLBACK {
		JOUT("SYN: unreserved_keyword -> ROLLBACK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_182);
	}
	| ROWS {
		JOUT("SYN: unreserved_keyword -> ROWS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_183);
	}
	| RULE {
		JOUT("SYN: unreserved_keyword -> RULE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_184);
	}
	| SAVEPOINT {
		JOUT("SYN: unreserved_keyword -> SAVEPOINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_185);
	}
	| SCHEMA {
		JOUT("SYN: unreserved_keyword -> SCHEMA \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_186);
	}
	| SCROLL {
		JOUT("SYN: unreserved_keyword -> SCROLL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_187);
	}
	| SEARCH {
		JOUT("SYN: unreserved_keyword -> SEARCH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_188);
	}
	| SECOND_P {
		JOUT("SYN: unreserved_keyword -> SECOND_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_189);
	}
	| SECURITY {
		JOUT("SYN: unreserved_keyword -> SECURITY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_190);
	}
	| SEQUENCE {
		JOUT("SYN: unreserved_keyword -> SEQUENCE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_191);
	}
	| SEQUENCES {
		JOUT("SYN: unreserved_keyword -> SEQUENCES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_192);
	}
	| SERIALIZABLE {
		JOUT("SYN: unreserved_keyword -> SERIALIZABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_193);
	}
	| SERVER {
		JOUT("SYN: unreserved_keyword -> SERVER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_194);
	}
	| SESSION {
		JOUT("SYN: unreserved_keyword -> SESSION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_195);
	}
	/* MODIFY
	| SET {
		JOUT("SYN: unreserved_keyword -> SET \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_196);
	}
	*/
	| SHARE {
		JOUT("SYN: unreserved_keyword -> SHARE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_197);
	}
	| SHOW {
		JOUT("SYN: unreserved_keyword -> SHOW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_198);
	}
	| SIMPLE {
		JOUT("SYN: unreserved_keyword -> SIMPLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_199);
	}
	| SNAPSHOT {
		JOUT("SYN: unreserved_keyword -> SNAPSHOT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_200);
	}
	| STABLE {
		JOUT("SYN: unreserved_keyword -> STABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_201);
	}
	| STANDALONE_P {
		JOUT("SYN: unreserved_keyword -> STANDALONE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_202);
	}
	| START {
		JOUT("SYN: unreserved_keyword -> START \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_203);
	}
	| STATEMENT {
		JOUT("SYN: unreserved_keyword -> STATEMENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_204);
	}
	| STATISTICS {
		JOUT("SYN: unreserved_keyword -> STATISTICS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_205);
	}
	| STDIN {
		JOUT("SYN: unreserved_keyword -> STDIN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_206);
	}
	| STDOUT {
		JOUT("SYN: unreserved_keyword -> STDOUT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_207);
	}
	| STORAGE {
		JOUT("SYN: unreserved_keyword -> STORAGE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_208);
	}
	| STRICT_P {
		JOUT("SYN: unreserved_keyword -> STRICT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_209);
	}
	| STRIP_P {
		JOUT("SYN: unreserved_keyword -> STRIP_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_210);
	}
	| SYSID {
		JOUT("SYN: unreserved_keyword -> SYSID \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_211);
	}
	| SYSTEM_P {
		JOUT("SYN: unreserved_keyword -> SYSTEM_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_212);
	}
	| TABLES {
		JOUT("SYN: unreserved_keyword -> TABLES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_213);
	}
	| TABLESPACE {
		JOUT("SYN: unreserved_keyword -> TABLESPACE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_214);
	}
	| TEMP {
		JOUT("SYN: unreserved_keyword -> TEMP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_215);
	}
	| TEMPLATE {
		JOUT("SYN: unreserved_keyword -> TEMPLATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_216);
	}
	| TEMPORARY {
		JOUT("SYN: unreserved_keyword -> TEMPORARY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_217);
	}
	| TEXT_P {
		JOUT("SYN: unreserved_keyword -> TEXT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_218);
	}
	| TRANSACTION {
		JOUT("SYN: unreserved_keyword -> TRANSACTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_219);
	}
	| TRIGGER {
		JOUT("SYN: unreserved_keyword -> TRIGGER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_220);
	}
	| TRUNCATE {
		JOUT("SYN: unreserved_keyword -> TRUNCATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_221);
	}
	| TRUSTED {
		JOUT("SYN: unreserved_keyword -> TRUSTED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_222);
	}
	| TYPE_P {
		JOUT("SYN: unreserved_keyword -> TYPE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_223);
	}
	| TYPES_P {
		JOUT("SYN: unreserved_keyword -> TYPES_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_224);
	}
	| UNBOUNDED {
		JOUT("SYN: unreserved_keyword -> UNBOUNDED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_225);
	}
	| UNCOMMITTED {
		JOUT("SYN: unreserved_keyword -> UNCOMMITTED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_226);
	}
	| UNENCRYPTED {
		JOUT("SYN: unreserved_keyword -> UNENCRYPTED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_227);
	}
	| UNKNOWN {
		JOUT("SYN: unreserved_keyword -> UNKNOWN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_228);
	}
	| UNLISTEN {
		JOUT("SYN: unreserved_keyword -> UNLISTEN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_229);
	}
	| UNLOGGED {
		JOUT("SYN: unreserved_keyword -> UNLOGGED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_230);
	}
	| UNTIL {
		JOUT("SYN: unreserved_keyword -> UNTIL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_231);
	}
	| UPDATE {
		JOUT("SYN: unreserved_keyword -> UPDATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_232);
	}
	| VACUUM {
		JOUT("SYN: unreserved_keyword -> VACUUM \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_233);
	}
	| VALID {
		JOUT("SYN: unreserved_keyword -> VALID \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_234);
	}
	| VALIDATE {
		JOUT("SYN: unreserved_keyword -> VALIDATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_235);
	}
	| VALIDATOR {
		JOUT("SYN: unreserved_keyword -> VALIDATOR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_236);
	}
	| VALUE_P {
		JOUT("SYN: unreserved_keyword -> VALUE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_237);
	}
	| VARYING {
		JOUT("SYN: unreserved_keyword -> VARYING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_238);
	}
	| VERSION_P {
		JOUT("SYN: unreserved_keyword -> VERSION_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_239);
	}
	| VIEW {
		JOUT("SYN: unreserved_keyword -> VIEW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_240);
	}
	| VOLATILE {
		JOUT("SYN: unreserved_keyword -> VOLATILE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_241);
	}
	| WHITESPACE_P {
		JOUT("SYN: unreserved_keyword -> WHITESPACE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_242);
	}
	| WITHOUT {
		JOUT("SYN: unreserved_keyword -> WITHOUT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_243);
	}
	| WORK {
		JOUT("SYN: unreserved_keyword -> WORK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_244);
	}
	| WRAPPER {
		JOUT("SYN: unreserved_keyword -> WRAPPER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_245);
	}
	| WRITE {
		JOUT("SYN: unreserved_keyword -> WRITE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_246);
	}
	| XML_P {
		JOUT("SYN: unreserved_keyword -> XML_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_247);
	}
	| YEAR_P {
		JOUT("SYN: unreserved_keyword -> YEAR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_248);
	}
	| YES_P {
		JOUT("SYN: unreserved_keyword -> YES_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_249);
	}
	| ZONE {
		JOUT("SYN: unreserved_keyword -> ZONE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_250);
	}
	| TD_FALLBACK {
		// todo3
		JOUT("SYN: unreserved_keyword -> TD_FALLBACK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_251);
	}
	| TD_PROTECTION {
		JOUT("SYN: unreserved_keyword -> TD_PROTECTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_252);
	}
	| TD_LOG {
		JOUT("SYN: unreserved_keyword -> TD_LOG \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_253);
	}
	| TD_CHECKSUM {
		JOUT("SYN: unreserved_keyword -> TD_CHECKSUM \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_254);
	}
	| TD_FREESPACE {
		JOUT("SYN: unreserved_keyword -> TD_FREESPACE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_255);
	}
	| TD_JOURNAL {
		JOUT("SYN: unreserved_keyword -> TD_JOURNAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_256);
	}
	| TD_DUAL {
		JOUT("SYN: unreserved_keyword -> TD_DUAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_257);
	}
	| TD_PERCENT {
		JOUT("SYN: unreserved_keyword -> TD_PERCENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_258);
	}
	| EVENT {
		JOUT("SYN: unreserved_keyword -> EVENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_259);
	}
	| FORMAT {
		// todo3
		JOUT("SYN: unreserved_keyword -> FORMAT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_260);
	}
	| TD_MERGEBLOCKRATIO {
		// todo3
		JOUT("SYN: unreserved_keyword -> TD_MERGEBLOCKRATIO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "unreserved_keyword", ID_UNRESERVED_KEYWORD, R_UNRESERVED_KEYWORD_261);
	}
	;

document_or_content
	: DOCUMENT_P {
		JOUT("SYN: document_or_content -> DOCUMENT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "document_or_content", ID_DOCUMENT_OR_CONTENT, R_DOCUMENT_OR_CONTENT_1);
	}
	| CONTENT_P {
		JOUT("SYN: document_or_content -> CONTENT_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "document_or_content", ID_DOCUMENT_OR_CONTENT, R_DOCUMENT_OR_CONTENT_2);
	}
	;

Bit
	: BitWithLength {
		JOUT("SYN: Bit -> BitWithLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Bit", ID_BIT, R_BIT_1);
	}
	| BitWithoutLength {
		JOUT("SYN: Bit -> BitWithoutLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Bit", ID_BIT, R_BIT_2);
	}
	;

alter_generic_options
	: OPTIONS SQL_LP alter_generic_option_list SQL_RP {
		JOUT("SYN: alter_generic_options -> OPTIONS_SQL_LP_alter_generic_option_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_generic_options", ID_ALTER_GENERIC_OPTIONS, R_ALTER_GENERIC_OPTIONS_1);
	}
	;

opt_nulls_order
	: NULLS_FIRST {
		JOUT("SYN: opt_nulls_order -> NULLS_FIRST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_nulls_order", ID_OPT_NULLS_ORDER, R_OPT_NULLS_ORDER_1);
	}
	| NULLS_LAST {
		JOUT("SYN: opt_nulls_order -> NULLS_LAST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_nulls_order", ID_OPT_NULLS_ORDER, R_OPT_NULLS_ORDER_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_nulls_order -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_nulls_order", ID_OPT_NULLS_ORDER, R_OPT_NULLS_ORDER__NULL);
	}
	;

opt_default
	: DEFAULT {
		JOUT("SYN: opt_default -> DEFAULT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_default", ID_OPT_DEFAULT, R_OPT_DEFAULT_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_default -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_default", ID_OPT_DEFAULT, R_OPT_DEFAULT__NULL);
	}
	;

first_or_next
	: FIRST_P {
		JOUT("SYN: first_or_next -> FIRST_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "first_or_next", ID_FIRST_OR_NEXT, R_FIRST_OR_NEXT_1);
	}
	| NEXT {
		JOUT("SYN: first_or_next -> NEXT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "first_or_next", ID_FIRST_OR_NEXT, R_FIRST_OR_NEXT_2);
	}
	;

old_aggr_elem
	: IDENT SQL_EQ def_arg {
		JOUT("SYN: old_aggr_elem -> IDENT_SQL_EQ_def_arg \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "old_aggr_elem", ID_OLD_AGGR_ELEM, R_OLD_AGGR_ELEM_1);
	}
	;

opt_collate_clause
	: COLLATE any_name {
		JOUT("SYN: opt_collate_clause -> COLLATE_any_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_collate_clause", ID_OPT_COLLATE_CLAUSE, R_OPT_COLLATE_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_collate_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_collate_clause", ID_OPT_COLLATE_CLAUSE, R_OPT_COLLATE_CLAUSE__NULL);
	}
	;

TruncateStmt
	: TRUNCATE opt_table relation_expr_list opt_restart_seqs opt_drop_behavior {
		JOUT("SYN: TruncateStmt -> TRUNCATE_opt_table_relation_expr_list_opt_restart_seqs_opt_drop_behavior \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "TruncateStmt", ID_TRUNCATESTMT, R_TRUNCATESTMT_1);
	}
	;

alterfunc_opt_list
	: common_func_opt_item {
		JOUT("SYN: alterfunc_opt_list -> common_func_opt_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "alterfunc_opt_list", ID_ALTERFUNC_OPT_LIST, R_ALTERFUNC_OPT_LIST_1);
	}
	| alterfunc_opt_list common_func_opt_item {
		JOUT("SYN: alterfunc_opt_list -> alterfunc_opt_list_common_func_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alterfunc_opt_list", ID_ALTERFUNC_OPT_LIST, R_ALTERFUNC_OPT_LIST_2);
	}
	;

attr_name
	: ColLabel {
		JOUT("SYN: attr_name -> ColLabel \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "attr_name", ID_ATTR_NAME, R_ATTR_NAME_1);
	}
	;

alter_extension_opt_list
	: alter_extension_opt_list alter_extension_opt_item {
		JOUT("SYN: alter_extension_opt_list -> alter_extension_opt_list_alter_extension_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_extension_opt_list", ID_ALTER_EXTENSION_OPT_LIST, R_ALTER_EXTENSION_OPT_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: alter_extension_opt_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "alter_extension_opt_list", ID_ALTER_EXTENSION_OPT_LIST, R_ALTER_EXTENSION_OPT_LIST__NULL);
	}
	;

PrepareStmt
	: PREPARE name prep_type_clause AS PreparableStmt {
		JOUT("SYN: PrepareStmt -> PREPARE_name_prep_type_clause_AS_PreparableStmt \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "PrepareStmt", ID_PREPARESTMT, R_PREPARESTMT_1);
	}
	;

oper_argtypes
	: SQL_LP Typename SQL_RP {
		JOUT("SYN: oper_argtypes -> SQL_LP_Typename_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "oper_argtypes", ID_OPER_ARGTYPES, R_OPER_ARGTYPES_1);
	}
	| SQL_LP Typename SQL_COMMA Typename SQL_RP {
		JOUT("SYN: oper_argtypes -> SQL_LP_Typename_SQL_COMMA_Typename_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "oper_argtypes", ID_OPER_ARGTYPES, R_OPER_ARGTYPES_2);
	}
	| SQL_LP NONE SQL_COMMA Typename SQL_RP {
		JOUT("SYN: oper_argtypes -> SQL_LP_NONE_SQL_COMMA_Typename_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "oper_argtypes", ID_OPER_ARGTYPES, R_OPER_ARGTYPES_3);
	}
	| SQL_LP Typename SQL_COMMA NONE SQL_RP {
		JOUT("SYN: oper_argtypes -> SQL_LP_Typename_SQL_COMMA_NONE_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "oper_argtypes", ID_OPER_ARGTYPES, R_OPER_ARGTYPES_4);
	}
	;

DiscardStmt
	: DISCARD ALL {
		JOUT("SYN: DiscardStmt -> DISCARD_ALL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DiscardStmt", ID_DISCARDSTMT, R_DISCARDSTMT_1);
	}
	| DISCARD TEMP {
		JOUT("SYN: DiscardStmt -> DISCARD_TEMP \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DiscardStmt", ID_DISCARDSTMT, R_DISCARDSTMT_2);
	}
	| DISCARD TEMPORARY {
		JOUT("SYN: DiscardStmt -> DISCARD_TEMPORARY \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DiscardStmt", ID_DISCARDSTMT, R_DISCARDSTMT_3);
	}
	| DISCARD PLANS {
		JOUT("SYN: DiscardStmt -> DISCARD_PLANS \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DiscardStmt", ID_DISCARDSTMT, R_DISCARDSTMT_4);
	}
	;



CreateSysOptionList
	: CreateSysOptionList SQL_COMMA CreateSysOption {
		// todo3
		JOUT("SYN: CreateSysOptionList -> CreateSysOptionList SQL_COMMA CreateSysOption  \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "CreateSysOptionList", ID_CREATESYSOPTIONLIST, R_CREATESYSOPTIONLIST_1);
	}
	| {
		// empty
		JOUT("SYN: CreateSysOptionList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "CreateSysOptionList", ID_CREATESYSOPTIONLIST, R_CREATESYSOPTIONLIST_2);
	};

fallback_option
	: TD_FALLBACK {
		// todo3
		JOUT("SYN: fallback_option -> TD_FALLBACK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "fallback_option", ID_FALLBACK_OPTION, R_FALLBACK_OPTION_1);
	}
	| NO TD_FALLBACK {
		JOUT("SYN: fallback_option -> NO TD_FALLBACK \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fallback_option", ID_FALLBACK_OPTION, R_FALLBACK_OPTION_2);
	}
	| TD_FALLBACK TD_PROTECTION {
		JOUT("SYN: fallback_option -> TD_FALLBACK TD_PROTECTION \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fallback_option", ID_FALLBACK_OPTION, R_FALLBACK_OPTION_3);
	}
	| NO TD_FALLBACK TD_PROTECTION {
		JOUT("SYN: fallback_option -> NO TD_FALLBACK TD_PROTECTION \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fallback_option", ID_FALLBACK_OPTION, R_FALLBACK_OPTION_4);
	};

log_option 
	: NO TD_LOG {
		// todo3
		JOUT("SYN: log_option -> NO TD_LOG \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "log_option", ID_LOG_OPTION, R_LOG_OPTION_1);
	}
	| TD_LOG {
		JOUT("SYN: log_option -> TD_LOG \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "log_option", ID_LOG_OPTION, R_LOG_OPTION_2);

	}
	;


freespace_option
	: TD_FREESPACE SQL_EQ Iconst {
		// todo3
		JOUT("SYN: freespace_option -> TD_FREESPACE SQL_EQ Iconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "freespace_option", ID_FREESPACE_OPTION, R_FREESPACE_OPTION_1);
	}
	| TD_FREESPACE SQL_EQ Iconst TD_PERCENT {
		JOUT("SYN: freespace_option -> D_FREESPACE SQL_EQ Iconst TD_PERCENT \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "freespace_option", ID_FREESPACE_OPTION, R_FREESPACE_OPTION_2);
	}
	;

journal_option
	: TD_JOURNAL {
		// todo3
		JOUT("SYN: journal_option -> TD_JOURNAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_1);
	}
	| BEFORE TD_JOURNAL {
		JOUT("SYN: journal_option -> BEFORE TD_JOURNAL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_2);
	}
	| NO TD_JOURNAL {
		JOUT("SYN: journal_option -> NO TD_JOURNAL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_3);
	}
	| TD_DUAL TD_JOURNAL {
		JOUT("SYN: journal_option -> TD_DUAL TD_JOURNAL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_4);
	}
	| NO BEFORE TD_JOURNAL {
		JOUT("SYN: journal_option -> NO BEFORE TD_JOURNAL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_5);
	}
	| TD_DUAL BEFORE TD_JOURNAL {
		JOUT("SYN: journal_option -> TD_DUAL BEFORE TD_JOURNAL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_6);
	}
	| AFTER TD_JOURNAL {
		JOUT("SYN: journal_option -> AFTER TD_JOURNAL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_7);
	}
	| NO AFTER TD_JOURNAL {
		JOUT("SYN: journal_option -> NO AFTER TD_JOURNAL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_8);
	}
	| TD_DUAL AFTER TD_JOURNAL {
		JOUT("SYN: journal_option -> TD_DUAL AFTER TD_JOURNAL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_9);
	}
	| LOCAL AFTER TD_JOURNAL {
		JOUT("SYN: journal_option -> LOCAL AFTER TD_JOURNAL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_10);
	}
	| NOT LOCAL AFTER TD_JOURNAL {
		JOUT("SYN: journal_option -> NOT LOCAL AFTER TD_JOURNAL \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "journal_option", ID_JOURNAL_OPTION, R_JOURNAL_OPTION_11);
	}
	;

CreateSysOption
	: TD_CHECKSUM SQL_EQ DEFAULT {
		// todo3
		JOUT("SYN: CreateSysOption ->TD_CHECKSUM SQL_EQ DEFAULT  \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "CreateSysOption", ID_CREATESYSOPTION, R_CREATESYSOPTION_1);
	}
	| fallback_option {
		JOUT("SYN: CreateSysOption ->fallback_option  \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "CreateSysOption", ID_CREATESYSOPTION, R_CREATESYSOPTION_2);
	}
	| log_option {
		JOUT("SYN: CreateSysOption ->log_option  \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "CreateSysOption", ID_CREATESYSOPTION, R_CREATESYSOPTION_3);
	}
	| freespace_option {
		JOUT("SYN: CreateSysOption ->freespace_option  \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "CreateSysOption", ID_CREATESYSOPTION, R_CREATESYSOPTION_4);
	}
	| journal_option {
		JOUT("SYN: CreateSysOption ->journal_option  \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "CreateSysOption", ID_CREATESYSOPTION, R_CREATESYSOPTION_5);
	}
	| DEFAULT TD_MERGEBLOCKRATIO {
		JOUT("SYN: CreateSysOption ->DEFAULT TD_MERGEBLOCKRATIO  \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "CreateSysOption", ID_CREATESYSOPTION, R_CREATESYSOPTION_6);
	}
	;

/* modify this rule, add the opt_index_definition */

// todo3 modify the rule id
// huge modify here !!!


// modify 2012 09 18 10:22  remove OptTableSpace, add opt_partition_clause
CreateStmt
	: CREATE OptSetMultiset OptTemp TABLE qualified_name CreateSysOptionList SQL_LP OptTableElementList SQL_RP OptInherit OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_qualified_name_SQL_LP_OptTableElementList_SQL_RP_OptInherit_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(14, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_5);
	}
	| CREATE OptSetMultiset OptTemp TABLE IF_P NOT EXISTS qualified_name CreateSysOptionList SQL_LP OptTableElementList SQL_RP OptInherit OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_IF_P_NOT_EXISTS_qualified_name_SQL_LP_OptTableElementList_SQL_RP_OptInherit_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(17, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_6);
	}
	| CREATE OptSetMultiset OptTemp TABLE qualified_name OF any_name OptTypedTableElementList OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_qualified_name_OF_any_name_OptTypedTableElementList_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(12, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_7);
	}
	| CREATE OptSetMultiset OptTemp TABLE IF_P NOT EXISTS qualified_name OF any_name OptTypedTableElementList OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_IF_P_NOT_EXISTS_qualified_name_OF_any_name_OptTypedTableElementList_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(15, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_8);
	}
	| CREATE OptTemp TABLE qualified_name SQL_LP OptTableElementList SQL_RP OptInherit OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_qualified_name_SQL_LP_OptTableElementList_SQL_RP_OptInherit_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(12, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_1);
	}
	| CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name SQL_LP OptTableElementList SQL_RP OptInherit OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_IF_P_NOT_EXISTS_qualified_name_SQL_LP_OptTableElementList_SQL_RP_OptInherit_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(15, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_2);
	}
	| CREATE OptTemp TABLE qualified_name OF any_name OptTypedTableElementList OptWith opt_index_definition opt_partition_clause OnCommitOption {
		// need CreateSysOptionList here?
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_qualified_name_OF_any_name_OptTypedTableElementList_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_3);
	}
	| CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name OF any_name OptTypedTableElementList OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_IF_P_NOT_EXISTS_qualified_name_OF_any_name_OptTypedTableElementList_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(14, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_4);
	}
	| CREATE OptTemp TABLE qualified_name CreateSysOptionList SQL_COMMA CreateSysOption SQL_LP OptTableElementList SQL_RP OptInherit OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_qualified_name_SQL_LP_OptTableElementList_SQL_RP_OptInherit_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(15, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_9);
	}
	| CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name CreateSysOptionList SQL_COMMA CreateSysOption SQL_LP OptTableElementList SQL_RP OptInherit OptWith opt_index_definition opt_partition_clause OnCommitOption {
		JOUT("SYN: CreateStmt -> CREATE_OptTemp_TABLE_IF_P_NOT_EXISTS_qualified_name_SQL_LP_OptTableElementList_SQL_RP_OptInherit_OptWith_OnCommitOption_OptTableSpace \n");
		$$ = cons_subtree(18, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
		set_content(&$$, @$.first_line, "CreateStmt", ID_CREATESTMT, R_CREATESTMT_10);
	}
	;

security_label_type
	: COLUMN {
		JOUT("SYN: security_label_type -> COLUMN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_1);
	}
	| DATABASE {
		JOUT("SYN: security_label_type -> DATABASE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_2);
	}
	| EVENT TRIGGER {
		JOUT("SYN: security_label_type -> EVENT_TRIGGER \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_3);
	}
	| FOREIGN TABLE {
		JOUT("SYN: security_label_type -> FOREIGN_TABLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_4);
	}
	| SCHEMA {
		JOUT("SYN: security_label_type -> SCHEMA \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_5);
	}
	| SEQUENCE {
		JOUT("SYN: security_label_type -> SEQUENCE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_6);
	}
	| TABLE {
		JOUT("SYN: security_label_type -> TABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_7);
	}
	| DOMAIN_P {
		JOUT("SYN: security_label_type -> DOMAIN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_8);
	}
	| ROLE {
		JOUT("SYN: security_label_type -> ROLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_9);
	}
	| TABLESPACE {
		JOUT("SYN: security_label_type -> TABLESPACE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_10);
	}
	| TYPE_P {
		JOUT("SYN: security_label_type -> TYPE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_11);
	}
	| VIEW {
		JOUT("SYN: security_label_type -> VIEW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label_type", ID_SECURITY_LABEL_TYPE, R_SECURITY_LABEL_TYPE_12);
	}
	;

all_Op
	: Op {
		JOUT("SYN: all_Op -> Op \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "all_Op", ID_ALL_OP, R_ALL_OP_1);
	}
	| MathOp {
		JOUT("SYN: all_Op -> MathOp \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "all_Op", ID_ALL_OP, R_ALL_OP_2);
	}
	;

func_arg_expr
	: a_expr {
		JOUT("SYN: func_arg_expr -> a_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_arg_expr", ID_FUNC_ARG_EXPR, R_FUNC_ARG_EXPR_1);
	}
	| param_name COLON_EQUALS a_expr {
		JOUT("SYN: func_arg_expr -> param_name_COLON_EQUALS_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_arg_expr", ID_FUNC_ARG_EXPR, R_FUNC_ARG_EXPR_2);
	}
	| CharacterWithLength {
		JOUT("SYN: func_arg_expr -> CharacterWithLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_arg_expr", ID_FUNC_ARG_EXPR, R_FUNC_ARG_EXPR_3);
	}
	;

CreateConversionStmt
	: CREATE opt_default CONVERSION_P any_name FOR Sconst TO Sconst FROM any_name {
		JOUT("SYN: CreateConversionStmt -> CREATE_opt_default_CONVERSION_P_any_name_FOR_Sconst_TO_Sconst_FROM_any_name \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "CreateConversionStmt", ID_CREATECONVERSIONSTMT, R_CREATECONVERSIONSTMT_1);
	}
	;

func_args_with_defaults
	: SQL_LP func_args_with_defaults_list SQL_RP {
		JOUT("SYN: func_args_with_defaults -> SQL_LP_func_args_with_defaults_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_args_with_defaults", ID_FUNC_ARGS_WITH_DEFAULTS, R_FUNC_ARGS_WITH_DEFAULTS_1);
	}
	| SQL_LP SQL_RP {
		JOUT("SYN: func_args_with_defaults -> SQL_LP_SQL_RP \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "func_args_with_defaults", ID_FUNC_ARGS_WITH_DEFAULTS, R_FUNC_ARGS_WITH_DEFAULTS_2);
	}
	;

AlterUserMappingStmt
	: ALTER USER MAPPING FOR auth_ident SERVER name alter_generic_options {
		JOUT("SYN: AlterUserMappingStmt -> ALTER_USER_MAPPING_FOR_auth_ident_SERVER_name_alter_generic_options \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterUserMappingStmt", ID_ALTERUSERMAPPINGSTMT, R_ALTERUSERMAPPINGSTMT_1);
	}
	;

TableLikeOptionList
	: TableLikeOptionList INCLUDING TableLikeOption {
		JOUT("SYN: TableLikeOptionList -> TableLikeOptionList_INCLUDING_TableLikeOption \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TableLikeOptionList", ID_TABLELIKEOPTIONLIST, R_TABLELIKEOPTIONLIST_1);
	}
	| TableLikeOptionList EXCLUDING TableLikeOption {
		JOUT("SYN: TableLikeOptionList -> TableLikeOptionList_EXCLUDING_TableLikeOption \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TableLikeOptionList", ID_TABLELIKEOPTIONLIST, R_TABLELIKEOPTIONLIST_2);
	}
	| /* empty */ {
		JOUT("SYN: TableLikeOptionList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "TableLikeOptionList", ID_TABLELIKEOPTIONLIST, R_TABLELIKEOPTIONLIST__NULL);
	}
	;

ExclusionWhereClause
	: WHERE SQL_LP a_expr SQL_RP {
		JOUT("SYN: ExclusionWhereClause -> WHERE_SQL_LP_a_expr_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ExclusionWhereClause", ID_EXCLUSIONWHERECLAUSE, R_EXCLUSIONWHERECLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: ExclusionWhereClause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "ExclusionWhereClause", ID_EXCLUSIONWHERECLAUSE, R_EXCLUSIONWHERECLAUSE__NULL);
	}
	;

ConstraintsSetStmt
	: SET CONSTRAINTS constraints_set_list constraints_set_mode {
		JOUT("SYN: ConstraintsSetStmt -> SET_CONSTRAINTS_constraints_set_list_constraints_set_mode \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ConstraintsSetStmt", ID_CONSTRAINTSSETSTMT, R_CONSTRAINTSSETSTMT_1);
	}
	;

opt_grant_admin_option
	: WITH ADMIN OPTION {
		JOUT("SYN: opt_grant_admin_option -> WITH_ADMIN_OPTION \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_grant_admin_option", ID_OPT_GRANT_ADMIN_OPTION, R_OPT_GRANT_ADMIN_OPTION_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_grant_admin_option -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_grant_admin_option", ID_OPT_GRANT_ADMIN_OPTION, R_OPT_GRANT_ADMIN_OPTION__NULL);
	}
	;

opt_type_modifiers
	: SQL_LP expr_list SQL_RP {
		JOUT("SYN: opt_type_modifiers -> SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_type_modifiers", ID_OPT_TYPE_MODIFIERS, R_OPT_TYPE_MODIFIERS_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_type_modifiers -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_type_modifiers", ID_OPT_TYPE_MODIFIERS, R_OPT_TYPE_MODIFIERS__NULL);
	}
	;

ConstBit
	: BitWithLength {
		JOUT("SYN: ConstBit -> BitWithLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstBit", ID_CONSTBIT, R_CONSTBIT_1);
	}
	| BitWithoutLength {
		JOUT("SYN: ConstBit -> BitWithoutLength \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstBit", ID_CONSTBIT, R_CONSTBIT_2);
	}
	;

CreateEventTrigStmt
	: CREATE EVENT TRIGGER name ON ColLabel EXECUTE PROCEDURE func_name SQL_LP SQL_RP {
		JOUT("SYN: CreateEventTrigStmt -> CREATE_EVENT_TRIGGER_name_ON_ColLabel_EXECUTE_PROCEDURE_func_name_SQL_LP_SQL_RP \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "CreateEventTrigStmt", ID_CREATEEVENTTRIGSTMT, R_CREATEEVENTTRIGSTMT_1);
	}
	| CREATE EVENT TRIGGER name ON ColLabel WHEN event_trigger_when_list EXECUTE PROCEDURE func_name SQL_LP SQL_RP {
		JOUT("SYN: CreateEventTrigStmt -> CREATE_EVENT_TRIGGER_name_ON_ColLabel_WHEN_event_trigger_when_list_EXECUTE_PROCEDURE_func_name_SQL_LP_SQL_RP \n");
		$$ = cons_subtree(13, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
		set_content(&$$, @$.first_line, "CreateEventTrigStmt", ID_CREATEEVENTTRIGSTMT, R_CREATEEVENTTRIGSTMT_2);
	}
	;

set_target_list
	: set_target {
		JOUT("SYN: set_target_list -> set_target \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "set_target_list", ID_SET_TARGET_LIST, R_SET_TARGET_LIST_1);
	}
	| set_target_list SQL_COMMA set_target {
		JOUT("SYN: set_target_list -> set_target_list_SQL_COMMA_set_target \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_target_list", ID_SET_TARGET_LIST, R_SET_TARGET_LIST_2);
	}
	;

overlay_list
	: a_expr overlay_placing substr_from substr_for {
		JOUT("SYN: overlay_list -> a_expr_overlay_placing_substr_from_substr_for \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "overlay_list", ID_OVERLAY_LIST, R_OVERLAY_LIST_1);
	}
	| a_expr overlay_placing substr_from {
		JOUT("SYN: overlay_list -> a_expr_overlay_placing_substr_from \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "overlay_list", ID_OVERLAY_LIST, R_OVERLAY_LIST_2);
	}
	;

func_table
	: func_expr {
		JOUT("SYN: func_table -> func_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_table", ID_FUNC_TABLE, R_FUNC_TABLE_1);
	}
	;

CreateUserMappingStmt
	: CREATE USER MAPPING FOR auth_ident SERVER name create_generic_options {
		JOUT("SYN: CreateUserMappingStmt -> CREATE_USER_MAPPING_FOR_auth_ident_SERVER_name_create_generic_options \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CreateUserMappingStmt", ID_CREATEUSERMAPPINGSTMT, R_CREATEUSERMAPPINGSTMT_1);
	}
	;

AlterFunctionStmt
	: ALTER FUNCTION function_with_argtypes alterfunc_opt_list opt_restrict {
		JOUT("SYN: AlterFunctionStmt -> ALTER_FUNCTION_function_with_argtypes_alterfunc_opt_list_opt_restrict \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterFunctionStmt", ID_ALTERFUNCTIONSTMT, R_ALTERFUNCTIONSTMT_1);
	}
	;

opt_as
	: AS {
		JOUT("SYN: opt_as -> AS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_as", ID_OPT_AS, R_OPT_AS_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_as -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_as", ID_OPT_AS, R_OPT_AS__NULL);
	}
	;

single_set_clause
	: set_target SQL_EQ ctext_expr {
		JOUT("SYN: single_set_clause -> set_target_SQL_EQ_ctext_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "single_set_clause", ID_SINGLE_SET_CLAUSE, R_SINGLE_SET_CLAUSE_1);
	}
	;

paren_func_expr 
	: func_name SQL_LP SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_SQL_RP_over_clause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_1);
	}
	| func_name SQL_LP func_arg_list SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_func_arg_list_SQL_RP_over_clause \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_2);
	}
	| func_name SQL_LP VARIADIC func_arg_expr SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_VARIADIC_func_arg_expr_SQL_RP_over_clause \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_3);
	}
	| func_name SQL_LP func_arg_list SQL_COMMA VARIADIC func_arg_expr SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_func_arg_list_SQL_COMMA_VARIADIC_func_arg_expr_SQL_RP_over_clause \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_4);
	}
	| func_name SQL_LP func_arg_list sort_clause SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_func_arg_list_sort_clause_SQL_RP_over_clause \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_5);
	}
	| func_name SQL_LP ALL func_arg_list opt_sort_clause SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_ALL_func_arg_list_opt_sort_clause_SQL_RP_over_clause \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $6, $7);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_6);
	}
	| func_name SQL_LP DISTINCT func_arg_list opt_sort_clause SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_DISTINCT_func_arg_list_opt_sort_clause_SQL_RP_over_clause \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $6, $7);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_7);
	}
	| func_name SQL_LP SQL_MUL SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> func_name_SQL_LP_SQL_MUL_SQL_RP_over_clause \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_8);
	}
	| COLLATION FOR SQL_LP a_expr SQL_RP {
		JOUT("SYN: paren_func_expr -> COLLATION_FOR_SQL_LP_a_expr_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_9);
	}
	| CURRENT_TIME SQL_LP Iconst SQL_RP {
		JOUT("SYN: paren_func_expr -> CURRENT_TIME_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_10);
	}
	| CURRENT_TIMESTAMP SQL_LP Iconst SQL_RP {
		JOUT("SYN: paren_func_expr -> CURRENT_TIMESTAMP_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_11);
	}
	| LOCALTIME SQL_LP Iconst SQL_RP {
		JOUT("SYN: paren_func_expr -> LOCALTIME_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_12);
	}
	| LOCALTIMESTAMP SQL_LP Iconst SQL_RP {
		JOUT("SYN: paren_func_expr -> LOCALTIMESTAMP_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_13);
	}
	| CAST SQL_LP a_expr AS Typename SQL_RP {
		JOUT("SYN: paren_func_expr -> CAST_SQL_LP_a_expr_AS_Typename_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_14);
	}
	| EXTRACT SQL_LP extract_list SQL_RP {
		JOUT("SYN: paren_func_expr -> EXTRACT_SQL_LP_extract_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_15);
	}
	| OVERLAY SQL_LP overlay_list SQL_RP {
		JOUT("SYN: paren_func_expr -> OVERLAY_SQL_LP_overlay_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_16);
	}
	| POSITION SQL_LP position_list SQL_RP {
		JOUT("SYN: paren_func_expr -> POSITION_SQL_LP_position_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_17);
	}
	| SUBSTRING SQL_LP substr_list SQL_RP {
		JOUT("SYN: paren_func_expr -> SUBSTRING_SQL_LP_substr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_18);
	}
	| TREAT SQL_LP a_expr AS Typename SQL_RP {
		JOUT("SYN: paren_func_expr -> TREAT_SQL_LP_a_expr_AS_Typename_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_19);
	}
	| TRIM SQL_LP BOTH trim_list SQL_RP {
		JOUT("SYN: paren_func_expr -> TRIM_SQL_LP_BOTH_trim_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_20);
	}
	| TRIM SQL_LP LEADING trim_list SQL_RP {
		JOUT("SYN: paren_func_expr -> TRIM_SQL_LP_LEADING_trim_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_21);
	}
	| TRIM SQL_LP TRAILING trim_list SQL_RP {
		JOUT("SYN: paren_func_expr -> TRIM_SQL_LP_TRAILING_trim_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_22);
	}
	| TRIM SQL_LP trim_list SQL_RP {
		JOUT("SYN: paren_func_expr -> TRIM_SQL_LP_trim_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_23);
	}
	| NULLIF SQL_LP a_expr SQL_COMMA a_expr SQL_RP {
		JOUT("SYN: paren_func_expr -> NULLIF_SQL_LP_a_expr_SQL_COMMA_a_expr_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_24);
	}
	| COALESCE SQL_LP expr_list SQL_RP {
		JOUT("SYN: paren_func_expr -> COALESCE_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_25);
	}
	| GREATEST SQL_LP expr_list SQL_RP {
		JOUT("SYN: paren_func_expr -> GREATEST_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_26);
	}
	| LEAST SQL_LP expr_list SQL_RP {
		JOUT("SYN: paren_func_expr -> LEAST_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_27);
	}
	| MAX_FUNC SQL_LP a_expr SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> MAX_FUNC SQL_LP c_expr SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_28);
	} 
	| SUM_FUNC SQL_LP a_expr SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> SUM_FUNC SQL_LP c_expr SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_29);
	}
	| MIN_FUNC SQL_LP a_expr SQL_RP over_clause {
		JOUT("SYN: paren_func_expr -> MIN_FUNC SQL_LP c_expr SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_30);

	} 
	| TRANSLATE_CHK SQL_LP any_name USING TranslationsTypes SQL_RP {
		// todo3
		JOUT("SYN: paren_func_expr -> TRANSLATE_CHK SQL_LP any_name USING TranslationsTypes SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_31);
	}
	| TRANSLATE SQL_LP any_name USING TranslationsTypes WITH ERROR_P SQL_RP {
		// todo3
		JOUT("SYN: paren_func_expr -> TRANSLATE SQL_LP any_name USING TranslationsTypes WITH ERROR_P SQL_RP \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_32);
	}
	| TRANSLATE SQL_LP any_name USING TranslationsTypes SQL_RP {
		// todo3 
		JOUT("SYN: paren_func_expr -> TRANSLATE SQL_LP any_name USING TranslationsTypes SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_33);
	}
	| SQL_MOD SQL_LP a_expr SQL_COMMA a_expr SQL_RP {
		// todo3
		JOUT("SYN: paren_func_expr -> SQL_MOD SQL_LP a_expr SQL_COMMA a_expr SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "paren_func_expr", ID_PAREN_FUNC_EXPR, R_PAREN_FUNC_EXPR_34);
	}
	;

func_expr
	: func_name SQL_LP SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_SQL_RP_over_clause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_1);
	}
	| func_name SQL_LP func_arg_list SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_func_arg_list_SQL_RP_over_clause \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_2);
	}
	| func_name SQL_LP VARIADIC func_arg_expr SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_VARIADIC_func_arg_expr_SQL_RP_over_clause \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_3);
	}
	| func_name SQL_LP func_arg_list SQL_COMMA VARIADIC func_arg_expr SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_func_arg_list_SQL_COMMA_VARIADIC_func_arg_expr_SQL_RP_over_clause \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_4);
	}
	| func_name SQL_LP func_arg_list sort_clause SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_func_arg_list_sort_clause_SQL_RP_over_clause \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_5);
	}
	| func_name SQL_LP ALL func_arg_list opt_sort_clause SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_ALL_func_arg_list_opt_sort_clause_SQL_RP_over_clause \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_6);
	}
	| func_name SQL_LP DISTINCT func_arg_list opt_sort_clause SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_DISTINCT_func_arg_list_opt_sort_clause_SQL_RP_over_clause \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_7);
	}
	| func_name SQL_LP SQL_MUL SQL_RP over_clause {
		JOUT("SYN: func_expr -> func_name_SQL_LP_SQL_MUL_SQL_RP_over_clause \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_8);
	}
	| COLLATION FOR SQL_LP a_expr SQL_RP {
		JOUT("SYN: func_expr -> COLLATION_FOR_SQL_LP_a_expr_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_9);
	}
	| CURRENT_DATE {
		JOUT("SYN: func_expr -> CURRENT_DATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_10);
	}
	| CURRENT_TIME {
		JOUT("SYN: func_expr -> CURRENT_TIME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_11);
	}
	| CURRENT_TIME SQL_LP Iconst SQL_RP {
		JOUT("SYN: func_expr -> CURRENT_TIME_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_12);
	}
	| CURRENT_TIMESTAMP {
		JOUT("SYN: func_expr -> CURRENT_TIMESTAMP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_13);
	}
	| CURRENT_TIMESTAMP SQL_LP Iconst SQL_RP {
		JOUT("SYN: func_expr -> CURRENT_TIMESTAMP_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_14);
	}
	| LOCALTIME {
		JOUT("SYN: func_expr -> LOCALTIME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_15);
	}
	| LOCALTIME SQL_LP Iconst SQL_RP {
		JOUT("SYN: func_expr -> LOCALTIME_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_16);
	}
	| LOCALTIMESTAMP {
		JOUT("SYN: func_expr -> LOCALTIMESTAMP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_17);
	}
	| LOCALTIMESTAMP SQL_LP Iconst SQL_RP {
		JOUT("SYN: func_expr -> LOCALTIMESTAMP_SQL_LP_Iconst_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_18);
	}
	| CURRENT_ROLE {
		JOUT("SYN: func_expr -> CURRENT_ROLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_19);
	}
	| CURRENT_USER {
		JOUT("SYN: func_expr -> CURRENT_USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_20);
	}
	| SESSION_USER {
		JOUT("SYN: func_expr -> SESSION_USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_21);
	}
	| USER {
		JOUT("SYN: func_expr -> USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_22);
	}
	| CURRENT_CATALOG {
		JOUT("SYN: func_expr -> CURRENT_CATALOG \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_23);
	}
	| CURRENT_SCHEMA {
		JOUT("SYN: func_expr -> CURRENT_SCHEMA \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_24);
	}
	| CAST SQL_LP a_expr AS Typename SQL_RP {
		JOUT("SYN: func_expr -> CAST_SQL_LP_a_expr_AS_Typename_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_25);
	}
	| EXTRACT SQL_LP extract_list SQL_RP {
		JOUT("SYN: func_expr -> EXTRACT_SQL_LP_extract_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_26);
	}
	| OVERLAY SQL_LP overlay_list SQL_RP {
		JOUT("SYN: func_expr -> OVERLAY_SQL_LP_overlay_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_27);
	}
	| POSITION SQL_LP position_list SQL_RP {
		JOUT("SYN: func_expr -> POSITION_SQL_LP_position_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_28);
	}
	| SUBSTRING SQL_LP substr_list SQL_RP {
		JOUT("SYN: func_expr -> SUBSTRING_SQL_LP_substr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_29);
	}
	| TREAT SQL_LP a_expr AS Typename SQL_RP {
		JOUT("SYN: func_expr -> TREAT_SQL_LP_a_expr_AS_Typename_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_30);
	}
	| TRIM SQL_LP BOTH trim_list SQL_RP {
		JOUT("SYN: func_expr -> TRIM_SQL_LP_BOTH_trim_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_31);
	}
	| TRIM SQL_LP LEADING trim_list SQL_RP {
		JOUT("SYN: func_expr -> TRIM_SQL_LP_LEADING_trim_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_32);
	}
	| TRIM SQL_LP TRAILING trim_list SQL_RP {
		JOUT("SYN: func_expr -> TRIM_SQL_LP_TRAILING_trim_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_33);
	}
	| TRIM SQL_LP trim_list SQL_RP {
		JOUT("SYN: func_expr -> TRIM_SQL_LP_trim_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_34);
	}
	| NULLIF SQL_LP a_expr SQL_COMMA a_expr SQL_RP {
		JOUT("SYN: func_expr -> NULLIF_SQL_LP_a_expr_SQL_COMMA_a_expr_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_35);
	}
	| COALESCE SQL_LP expr_list SQL_RP {
		JOUT("SYN: func_expr -> COALESCE_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_36);
	}
	| GREATEST SQL_LP expr_list SQL_RP {
		JOUT("SYN: func_expr -> GREATEST_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_37);
	}
	| LEAST SQL_LP expr_list SQL_RP {
		JOUT("SYN: func_expr -> LEAST_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_38);
	}
	| XMLCONCAT SQL_LP expr_list SQL_RP {
		JOUT("SYN: func_expr -> XMLCONCAT_SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_39);
	}
	| XMLELEMENT SQL_LP NAME_P ColLabel SQL_RP {
		JOUT("SYN: func_expr -> XMLELEMENT_SQL_LP_NAME_P_ColLabel_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_40);
	}
	| XMLELEMENT SQL_LP NAME_P ColLabel SQL_COMMA xml_attributes SQL_RP {
		JOUT("SYN: func_expr -> XMLELEMENT_SQL_LP_NAME_P_ColLabel_SQL_COMMA_xml_attributes_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_41);
	}
	| XMLELEMENT SQL_LP NAME_P ColLabel SQL_COMMA expr_list SQL_RP {
		JOUT("SYN: func_expr -> XMLELEMENT_SQL_LP_NAME_P_ColLabel_SQL_COMMA_expr_list_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_42);
	}
	| XMLELEMENT SQL_LP NAME_P ColLabel SQL_COMMA xml_attributes SQL_COMMA expr_list SQL_RP {
		JOUT("SYN: func_expr -> XMLELEMENT_SQL_LP_NAME_P_ColLabel_SQL_COMMA_xml_attributes_SQL_COMMA_expr_list_SQL_RP \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_43);
	}
	| XMLEXISTS SQL_LP c_expr xmlexists_argument SQL_RP {
		JOUT("SYN: func_expr -> XMLEXISTS_SQL_LP_c_expr_xmlexists_argument_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_44);
	}
	| XMLFOREST SQL_LP xml_attribute_list SQL_RP {
		JOUT("SYN: func_expr -> XMLFOREST_SQL_LP_xml_attribute_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_45);
	}
	| XMLPARSE SQL_LP document_or_content a_expr xml_whitespace_option SQL_RP {
		JOUT("SYN: func_expr -> XMLPARSE_SQL_LP_document_or_content_a_expr_xml_whitespace_option_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_46);
	}
	| XMLPI SQL_LP NAME_P ColLabel SQL_RP {
		JOUT("SYN: func_expr -> XMLPI_SQL_LP_NAME_P_ColLabel_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_47);
	}
	| XMLPI SQL_LP NAME_P ColLabel SQL_COMMA a_expr SQL_RP {
		JOUT("SYN: func_expr -> XMLPI_SQL_LP_NAME_P_ColLabel_SQL_COMMA_a_expr_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_48);
	}
	| XMLROOT SQL_LP a_expr SQL_COMMA xml_root_version opt_xml_root_standalone SQL_RP {
		JOUT("SYN: func_expr -> XMLROOT_SQL_LP_a_expr_SQL_COMMA_xml_root_version_opt_xml_root_standalone_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_49);
	}
	| XMLSERIALIZE SQL_LP document_or_content a_expr AS SimpleTypename SQL_RP {
		JOUT("SYN: func_expr -> XMLSERIALIZE_SQL_LP_document_or_content_a_expr_AS_SimpleTypename_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_50);
	}
	| MAX_FUNC SQL_LP a_expr SQL_RP over_clause {
		JOUT("SYN: func_expr -> MAX_FUNC SQL_LP c_expr SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_51);
	} 
	| SUM_FUNC SQL_LP a_expr SQL_RP over_clause {
		JOUT("SYN: func_expr -> SUM_FUNC SQL_LP c_expr SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_52);

	}
	| MIN_FUNC SQL_LP a_expr SQL_RP over_clause {
		JOUT("SYN: func_expr -> MIN_FUNC SQL_LP c_expr SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_53);

	} 
	| TRANSLATE_CHK SQL_LP any_name USING TranslationsTypes SQL_RP {
		// todo3
		JOUT("SYN: func_expr -> TRANSLATE_CHK SQL_LP any_name USING TranslationsTypes SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_54);
	}
	| TRANSLATE SQL_LP any_name USING TranslationsTypes WITH ERROR_P SQL_RP {
		// todo3
		JOUT("SYN: func_expr -> TRANSLATE SQL_LP any_name USING TranslationsTypes WITH ERROR_P SQL_RP \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_55);
	}
	| TRANSLATE SQL_LP any_name USING TranslationsTypes SQL_RP {
		// todo3
		JOUT("SYN: func_expr -> TRANSLATE SQL_LP any_name USING TranslationsTypes SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_56);
	}
	| TD_DATE {
		// date IS BOTH A TYPE AND A SYSTEM CALL
		JOUT("SYN: func_expr -> TD_DATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_57);
	}
	| DATETIME {
		//todo3
		JOUT("SYN: func_expr -> DATETIME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_58);

	}
	| SQL_MOD SQL_LP a_expr SQL_COMMA a_expr SQL_RP {
		// todo3
		JOUT("SYN: func_expr -> SQL_MOD SQL_LP a_expr SQL_COMMA a_expr SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_59);
	}
	| func_name SQL_LP DECIMAL_P SQL_LP expr_list SQL_RP SQL_RP {
		// todo 3
		// use a trick here, we assum the transformation between typs is a function;
		JOUT("SYN: func_expr -> type transformate DECIMAL_P \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_60);
	}
	| Iconst SQL_LP DECIMAL_P SQL_LP expr_list SQL_RP SQL_RP {
		// todo 3
		// use a trick here, we assum the transformation between typs is a function;
		JOUT("SYN: func_expr -> type transformate DECIMAL_P \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "func_expr", ID_FUNC_EXPR, R_FUNC_EXPR_61);
	}
	;

opclass_drop
	: OPERATOR Iconst SQL_LP type_list SQL_RP {
		JOUT("SYN: opclass_drop -> OPERATOR_Iconst_SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "opclass_drop", ID_OPCLASS_DROP, R_OPCLASS_DROP_1);
	}
	| FUNCTION Iconst SQL_LP type_list SQL_RP {
		JOUT("SYN: opclass_drop -> FUNCTION_Iconst_SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "opclass_drop", ID_OPCLASS_DROP, R_OPCLASS_DROP_2);
	}
	;

AexprConst
	: Iconst {
		JOUT("SYN: AexprConst -> Iconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_1);
	}
	| FCONST {
		JOUT("SYN: AexprConst -> FCONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_2);
	}
	| Sconst {
		JOUT("SYN: AexprConst -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_3);
	}
	| BCONST {
		JOUT("SYN: AexprConst -> BCONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_4);
	}
	| XCONST {
		JOUT("SYN: AexprConst -> XCONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_5);
	}
	| func_name Sconst {
		JOUT("SYN: AexprConst -> func_name_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_6);
	}
	| func_name SQL_LP func_arg_list SQL_RP Sconst {
		JOUT("SYN: AexprConst -> func_name_SQL_LP_func_arg_list_SQL_RP_Sconst \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_7);
	}
	| ConstTypename Sconst {
		JOUT("SYN: AexprConst -> ConstTypename_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_8);
	}
	| ConstInterval Sconst opt_interval {
		JOUT("SYN: AexprConst -> ConstInterval_Sconst_opt_interval \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_9);
	}
	| ConstInterval SQL_LP Iconst SQL_RP Sconst opt_interval {
		JOUT("SYN: AexprConst -> ConstInterval_SQL_LP_Iconst_SQL_RP_Sconst_opt_interval \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_10);
	}
	| TRUE_P {
		JOUT("SYN: AexprConst -> TRUE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_11);
	}
	| FALSE_P {
		JOUT("SYN: AexprConst -> FALSE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_12);
	}
	| NULL_P {
		JOUT("SYN: AexprConst -> NULL_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AexprConst", ID_AEXPRCONST, R_AEXPRCONST_13);
	}
	;

xml_attributes
	: XMLATTRIBUTES SQL_LP xml_attribute_list SQL_RP {
		JOUT("SYN: xml_attributes -> XMLATTRIBUTES_SQL_LP_xml_attribute_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "xml_attributes", ID_XML_ATTRIBUTES, R_XML_ATTRIBUTES_1);
	}
	;

ReassignOwnedStmt
	: REASSIGN OWNED BY name_list TO name {
		JOUT("SYN: ReassignOwnedStmt -> REASSIGN_OWNED_BY_name_list_TO_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "ReassignOwnedStmt", ID_REASSIGNOWNEDSTMT, R_REASSIGNOWNEDSTMT_1);
	}
	;

access_method_clause
	: USING access_method {
		JOUT("SYN: access_method_clause -> USING_access_method \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "access_method_clause", ID_ACCESS_METHOD_CLAUSE, R_ACCESS_METHOD_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: access_method_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "access_method_clause", ID_ACCESS_METHOD_CLAUSE, R_ACCESS_METHOD_CLAUSE__NULL);
	}
	;

copy_generic_opt_list
	: copy_generic_opt_elem {
		JOUT("SYN: copy_generic_opt_list -> copy_generic_opt_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_generic_opt_list", ID_COPY_GENERIC_OPT_LIST, R_COPY_GENERIC_OPT_LIST_1);
	}
	| copy_generic_opt_list SQL_COMMA copy_generic_opt_elem {
		JOUT("SYN: copy_generic_opt_list -> copy_generic_opt_list_SQL_COMMA_copy_generic_opt_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_generic_opt_list", ID_COPY_GENERIC_OPT_LIST, R_COPY_GENERIC_OPT_LIST_2);
	}
	;

columnList
	: columnElem {
		JOUT("SYN: columnList -> columnElem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "columnList", ID_COLUMNLIST, R_COLUMNLIST_1);
	}
	| columnList SQL_COMMA columnElem {
		JOUT("SYN: columnList -> columnList_SQL_COMMA_columnElem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "columnList", ID_COLUMNLIST, R_COLUMNLIST_2);
	}
	;

TypedTableElementList
	: TypedTableElement {
		JOUT("SYN: TypedTableElementList -> TypedTableElement \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TypedTableElementList", ID_TYPEDTABLEELEMENTLIST, R_TYPEDTABLEELEMENTLIST_1);
	}
	| TypedTableElementList SQL_COMMA TypedTableElement {
		JOUT("SYN: TypedTableElementList -> TypedTableElementList_SQL_COMMA_TypedTableElement \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TypedTableElementList", ID_TYPEDTABLEELEMENTLIST, R_TYPEDTABLEELEMENTLIST_2);
	}
	;

opt_varying
	: VARYING {
		JOUT("SYN: opt_varying -> VARYING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_varying", ID_OPT_VARYING, R_OPT_VARYING_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_varying -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_varying", ID_OPT_VARYING, R_OPT_VARYING__NULL);
	}
	;

a_expr
	: c_expr {
		JOUT("SYN: a_expr -> c_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_1);
	}
	| a_expr SQL_TYPECAST Typename {
		JOUT("SYN: a_expr -> a_expr_TYPECAST_Typename \n");
		$$ = cons_subtree(2, $1, $2);//, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_2);
	}
	| a_expr COLLATE any_name {
		JOUT("SYN: a_expr -> a_expr_COLLATE_any_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_3);
	}
	| a_expr AT TIME ZONE a_expr %prec AT {
		JOUT("SYN: a_expr -> a_expr_AT_TIME_ZONE_a_expr \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_4);
	}
	| SQL_PLUS a_expr %prec UMINUS {
		JOUT("SYN: a_expr -> SQL_PLUS_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_5);
	}
	| SQL_MINUS a_expr %prec UMINUS {
		JOUT("SYN: a_expr -> SQL_MINUS_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_6);
	}
	| a_expr SQL_PLUS a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_PLUS_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_7);
	}
	| a_expr SQL_MINUS a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_MINUS_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_8);
	}
	| a_expr SQL_MUL a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_MUL_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_9);
	}
	| a_expr SQL_DIV a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_DIV_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_10);
	}
	| a_expr SQL_MOD a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_MOD_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_11);
	}
	| a_expr SQL_POWER a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_POWER_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_12);
	}
	| a_expr SQL_LT a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_LT_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_13);
	}
	| a_expr SQL_GT a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_GT_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_14);
	}
	| a_expr SQL_EQ a_expr {
		JOUT("SYN: a_expr -> a_expr_SQL_EQ_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_15);
	}
	| a_expr qual_Op a_expr %prec Op {
		JOUT("SYN: a_expr -> a_expr_qual_Op_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_16);
	}
	| qual_Op a_expr %prec Op {
		JOUT("SYN: a_expr -> qual_Op_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_17);
	}
	| a_expr qual_Op %prec POSTFIXOP {
		JOUT("SYN: a_expr -> a_expr_qual_Op \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_18);
	}
	| a_expr AND a_expr {
		JOUT("SYN: a_expr -> a_expr_AND_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_19);
	}
	| a_expr OR a_expr {
		JOUT("SYN: a_expr -> a_expr_OR_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_20);
	}
	| NOT a_expr {
		JOUT("SYN: a_expr -> NOT_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_21);
	}
	| a_expr LIKE a_expr {
		JOUT("SYN: a_expr -> a_expr_LIKE_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_22);
	}
	| a_expr LIKE a_expr ESCAPE a_expr {
		JOUT("SYN: a_expr -> a_expr_LIKE_a_expr_ESCAPE_a_expr \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_23);
	}
	| a_expr NOT LIKE a_expr {
		JOUT("SYN: a_expr -> a_expr_NOT_LIKE_a_expr \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_24);
	}
	| a_expr NOT LIKE a_expr ESCAPE a_expr {
		JOUT("SYN: a_expr -> a_expr_NOT_LIKE_a_expr_ESCAPE_a_expr \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_25);
	}
	| a_expr ILIKE a_expr {
		JOUT("SYN: a_expr -> a_expr_ILIKE_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_26);
	}
	| a_expr ILIKE a_expr ESCAPE a_expr {
		JOUT("SYN: a_expr -> a_expr_ILIKE_a_expr_ESCAPE_a_expr \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_27);
	}
	| a_expr NOT ILIKE a_expr {
		JOUT("SYN: a_expr -> a_expr_NOT_ILIKE_a_expr \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_28);
	}
	| a_expr NOT ILIKE a_expr ESCAPE a_expr {
		JOUT("SYN: a_expr -> a_expr_NOT_ILIKE_a_expr_ESCAPE_a_expr \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_29);
	}
	| a_expr SIMILAR TO a_expr %prec SIMILAR {
		JOUT("SYN: a_expr -> a_expr_SIMILAR_TO_a_expr \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_30);
	}
	| a_expr SIMILAR TO a_expr ESCAPE a_expr {
		JOUT("SYN: a_expr -> a_expr_SIMILAR_TO_a_expr_ESCAPE_a_expr \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_31);
	}
	| a_expr NOT SIMILAR TO a_expr %prec SIMILAR {
		JOUT("SYN: a_expr -> a_expr_NOT_SIMILAR_TO_a_expr \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_32);
	}
	| a_expr NOT SIMILAR TO a_expr ESCAPE a_expr {
		JOUT("SYN: a_expr -> a_expr_NOT_SIMILAR_TO_a_expr_ESCAPE_a_expr \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_33);
	}
	| a_expr IS NULL_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NULL_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_34);
	}
	| a_expr ISNULL {
		JOUT("SYN: a_expr -> a_expr_ISNULL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_35);
	}
	| a_expr IS NOT NULL_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NOT_NULL_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_36);
	}
	| a_expr NOTNULL {
		JOUT("SYN: a_expr -> a_expr_NOTNULL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_37);
	}
	| row OVERLAPS row {
		JOUT("SYN: a_expr -> row_OVERLAPS_row \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_38);
	}
	| a_expr IS TRUE_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_TRUE_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_39);
	}
	| a_expr IS NOT TRUE_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NOT_TRUE_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_40);
	}
	| a_expr IS FALSE_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_FALSE_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_41);
	}
	| a_expr IS NOT FALSE_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NOT_FALSE_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_42);
	}
	| a_expr IS UNKNOWN %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_UNKNOWN \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_43);
	}
	| a_expr IS NOT UNKNOWN %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NOT_UNKNOWN \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_44);
	}
	| a_expr IS DISTINCT FROM a_expr %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_DISTINCT_FROM_a_expr \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_45);
	}
	| a_expr IS NOT DISTINCT FROM a_expr %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NOT_DISTINCT_FROM_a_expr \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_46);
	}
	| a_expr IS OF SQL_LP type_list SQL_RP %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_OF_SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_47);
	}
	| a_expr IS NOT OF SQL_LP type_list SQL_RP %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NOT_OF_SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_48);
	}
	| a_expr BETWEEN opt_asymmetric b_expr AND b_expr %prec BETWEEN {
		JOUT("SYN: a_expr -> a_expr_BETWEEN_opt_asymmetric_b_expr_AND_b_expr \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_49);
	}
	| a_expr NOT BETWEEN opt_asymmetric b_expr AND b_expr %prec BETWEEN {
		JOUT("SYN: a_expr -> a_expr_NOT_BETWEEN_opt_asymmetric_b_expr_AND_b_expr \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_50);
	}
	| a_expr BETWEEN SYMMETRIC b_expr AND b_expr %prec BETWEEN {
		JOUT("SYN: a_expr -> a_expr_BETWEEN_SYMMETRIC_b_expr_AND_b_expr \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_51);
	}
	| a_expr NOT BETWEEN SYMMETRIC b_expr AND b_expr %prec BETWEEN {
		JOUT("SYN: a_expr -> a_expr_NOT_BETWEEN_SYMMETRIC_b_expr_AND_b_expr \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_52);
	}
	| a_expr IN_P in_expr {
		JOUT("SYN: a_expr -> a_expr_IN_P_in_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_53);
	}
	| a_expr NOT IN_P in_expr {
		JOUT("SYN: a_expr -> a_expr_NOT_IN_P_in_expr \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_54);
	}
	| a_expr subquery_Op sub_type select_with_parens %prec Op {
		JOUT("SYN: a_expr -> a_expr_subquery_Op_sub_type_select_with_parens \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_55);
	}
	| a_expr subquery_Op sub_type SQL_LP expr_list SQL_RP %prec Op {
		// modify the '..sub_type SQL_LP a_expr SQL_RP'
		// 	to ' ... sub_type SQL_LP expr_list SQL_RP'
		JOUT("SYN: a_expr -> a_expr_subquery_Op_sub_type_SQL_LP_a_expr_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_56);
	}
	| UNIQUE select_with_parens {
		JOUT("SYN: a_expr -> UNIQUE_select_with_parens \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_57);
	}
	| a_expr IS DOCUMENT_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_DOCUMENT_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_58);
	}
	| a_expr IS NOT DOCUMENT_P %prec IS {
		JOUT("SYN: a_expr -> a_expr_IS_NOT_DOCUMENT_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_59);

	}
	| a_expr SQL_LE a_expr {
		JOUT("SYN: a_expr -> a_expr SQL_LE a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_60);

	}
	| a_expr SQL_GE a_expr {
		JOUT("SYN: a_expr -> a_expr SQL_GE a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_61);

	}
	| a_expr SQL_NE a_expr {
		JOUT("SYN: a_expr -> a_expr SQL_NE a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_62);
	}
	| SQL_LP a_expr SQL_RP SQL_LP Typename SQL_RP {
		// todo3 type trans
		JOUT("SYN: a_expr -> SQL_LP a_expr SQL_RP SQL_LP Typename SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_63);
	}
	| SQL_LP a_expr SQL_RP td_trans_date_time {
		// todo3 datetime trans
		JOUT("SYN: a_expr -> SQL_LP a_expr SQL_RP td_trans_date_time \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_64);
	}
	| TD_GROUPING SQL_LP expr_list SQL_RP {
		//TODO3
		JOUT("SYN: a_expr -> TD_GROUPING SQL_LP expr_list SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "a_expr", ID_A_EXPR, R_A_EXPR_65);
	}
	;

alter_generic_option_elem
	: generic_option_elem {
		JOUT("SYN: alter_generic_option_elem -> generic_option_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "alter_generic_option_elem", ID_ALTER_GENERIC_OPTION_ELEM, R_ALTER_GENERIC_OPTION_ELEM_1);
	}
	| SET generic_option_elem {
		JOUT("SYN: alter_generic_option_elem -> SET_generic_option_elem \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_generic_option_elem", ID_ALTER_GENERIC_OPTION_ELEM, R_ALTER_GENERIC_OPTION_ELEM_2);
	}
	| ADD_P generic_option_elem {
		JOUT("SYN: alter_generic_option_elem -> ADD_P_generic_option_elem \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_generic_option_elem", ID_ALTER_GENERIC_OPTION_ELEM, R_ALTER_GENERIC_OPTION_ELEM_3);
	}
	| DROP generic_option_name {
		JOUT("SYN: alter_generic_option_elem -> DROP_generic_option_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_generic_option_elem", ID_ALTER_GENERIC_OPTION_ELEM, R_ALTER_GENERIC_OPTION_ELEM_4);
	}
	;

with_clause
	: WITH cte_list {
		JOUT("SYN: with_clause -> WITH_cte_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "with_clause", ID_WITH_CLAUSE, R_WITH_CLAUSE_1);
	}
	| WITH RECURSIVE cte_list {
		JOUT("SYN: with_clause -> WITH_RECURSIVE_cte_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "with_clause", ID_WITH_CLAUSE, R_WITH_CLAUSE_2);
	}
	;

PreparableStmt
	: SelectStmt {
		JOUT("SYN: PreparableStmt -> SelectStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "PreparableStmt", ID_PREPARABLESTMT, R_PREPARABLESTMT_1);
	}
	| InsertStmt {
		JOUT("SYN: PreparableStmt -> InsertStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "PreparableStmt", ID_PREPARABLESTMT, R_PREPARABLESTMT_2);
	}
	| UpdateStmt {
		JOUT("SYN: PreparableStmt -> UpdateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "PreparableStmt", ID_PREPARABLESTMT, R_PREPARABLESTMT_3);
	}
	| DeleteStmt {
		JOUT("SYN: PreparableStmt -> DeleteStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "PreparableStmt", ID_PREPARABLESTMT, R_PREPARABLESTMT_4);
	}
	;

def_elem
	: ColLabel SQL_EQ def_arg {
		JOUT("SYN: def_elem -> ColLabel_SQL_EQ_def_arg \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "def_elem", ID_DEF_ELEM, R_DEF_ELEM_1);
	}
	| ColLabel {
		JOUT("SYN: def_elem -> ColLabel \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "def_elem", ID_DEF_ELEM, R_DEF_ELEM_2);
	}
	;

AlterOwnerStmt
	: ALTER AGGREGATE func_name aggr_args OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_AGGREGATE_func_name_aggr_args_OWNER_TO_RoleId \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_1);
	}
	| ALTER COLLATION any_name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_COLLATION_any_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_2);
	}
	| ALTER CONVERSION_P any_name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_CONVERSION_P_any_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_3);
	}
	| ALTER DATABASE database_name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_DATABASE_database_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_4);
	}
	| ALTER DOMAIN_P any_name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_DOMAIN_P_any_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_5);
	}
	| ALTER FUNCTION function_with_argtypes OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_FUNCTION_function_with_argtypes_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_6);
	}
	| ALTER opt_procedural LANGUAGE name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_opt_procedural_LANGUAGE_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_7);
	}
	| ALTER LARGE_P OBJECT_P NumericOnly OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_LARGE_P_OBJECT_P_NumericOnly_OWNER_TO_RoleId \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_8);
	}
	| ALTER OPERATOR any_operator oper_argtypes OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_OPERATOR_any_operator_oper_argtypes_OWNER_TO_RoleId \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_9);
	}
	| ALTER OPERATOR CLASS any_name USING access_method OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_OPERATOR_CLASS_any_name_USING_access_method_OWNER_TO_RoleId \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_10);
	}
	| ALTER OPERATOR FAMILY any_name USING access_method OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_OPERATOR_FAMILY_any_name_USING_access_method_OWNER_TO_RoleId \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_11);
	}
	| ALTER SCHEMA name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_SCHEMA_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_12);
	}
	| ALTER TYPE_P any_name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_TYPE_P_any_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_13);
	}
	| ALTER TABLESPACE name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_TABLESPACE_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_14);
	}
	| ALTER TEXT_P SEARCH DICTIONARY any_name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_TEXT_P_SEARCH_DICTIONARY_any_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_15);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_16);
	}
	| ALTER FOREIGN DATA_P WRAPPER name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_FOREIGN_DATA_P_WRAPPER_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_17);
	}
	| ALTER SERVER name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_SERVER_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_18);
	}
	| ALTER EVENT TRIGGER name OWNER TO RoleId {
		JOUT("SYN: AlterOwnerStmt -> ALTER_EVENT_TRIGGER_name_OWNER_TO_RoleId \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterOwnerStmt", ID_ALTEROWNERSTMT, R_ALTEROWNERSTMT_19);
	}
	;

CreateForeignServerStmt
	: CREATE SERVER name opt_type opt_foreign_server_version FOREIGN DATA_P WRAPPER name create_generic_options {
		JOUT("SYN: CreateForeignServerStmt -> CREATE_SERVER_name_opt_type_opt_foreign_server_version_FOREIGN_DATA_P_WRAPPER_name_create_generic_options \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "CreateForeignServerStmt", ID_CREATEFOREIGNSERVERSTMT, R_CREATEFOREIGNSERVERSTMT_1);
	}
	;

database_name
	: ColId {
		JOUT("SYN: database_name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "database_name", ID_DATABASE_NAME, R_DATABASE_NAME_1);
	}
	;

CreateGroupStmt
	: CREATE GROUP_P RoleId opt_with OptRoleList {
		JOUT("SYN: CreateGroupStmt -> CREATE_GROUP_P_RoleId_opt_with_OptRoleList \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CreateGroupStmt", ID_CREATEGROUPSTMT, R_CREATEGROUPSTMT_1);
	}
	;

opt_restart_seqs
	: CONTINUE_P IDENTITY_P {
		JOUT("SYN: opt_restart_seqs -> CONTINUE_P_IDENTITY_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_restart_seqs", ID_OPT_RESTART_SEQS, R_OPT_RESTART_SEQS_1);
	}
	| RESTART IDENTITY_P {
		JOUT("SYN: opt_restart_seqs -> RESTART_IDENTITY_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_restart_seqs", ID_OPT_RESTART_SEQS, R_OPT_RESTART_SEQS_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_restart_seqs -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_restart_seqs", ID_OPT_RESTART_SEQS, R_OPT_RESTART_SEQS__NULL);
	}
	;

opt_select_fetch_first_value
	: SignedIconst {
		JOUT("SYN: opt_select_fetch_first_value -> SignedIconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_select_fetch_first_value", ID_OPT_SELECT_FETCH_FIRST_VALUE, R_OPT_SELECT_FETCH_FIRST_VALUE_1);
	}
	| SQL_LP a_expr SQL_RP {
		JOUT("SYN: opt_select_fetch_first_value -> SQL_LP_a_expr_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_select_fetch_first_value", ID_OPT_SELECT_FETCH_FIRST_VALUE, R_OPT_SELECT_FETCH_FIRST_VALUE_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_select_fetch_first_value -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_select_fetch_first_value", ID_OPT_SELECT_FETCH_FIRST_VALUE, R_OPT_SELECT_FETCH_FIRST_VALUE__NULL);
	}
	;

row_or_rows
	: ROW {
		JOUT("SYN: row_or_rows -> ROW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "row_or_rows", ID_ROW_OR_ROWS, R_ROW_OR_ROWS_1);
	}
	| ROWS {
		JOUT("SYN: row_or_rows -> ROWS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "row_or_rows", ID_ROW_OR_ROWS, R_ROW_OR_ROWS_2);
	}
	;

opt_array_bounds
	: opt_array_bounds SQL_LB SQL_RB {
		JOUT("SYN: opt_array_bounds -> opt_array_bounds_SQL_LB_SQL_RB \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_array_bounds", ID_OPT_ARRAY_BOUNDS, R_OPT_ARRAY_BOUNDS_1);
	}
	| opt_array_bounds SQL_LB Iconst SQL_RB {
		JOUT("SYN: opt_array_bounds -> opt_array_bounds_SQL_LB_Iconst_SQL_RB \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opt_array_bounds", ID_OPT_ARRAY_BOUNDS, R_OPT_ARRAY_BOUNDS_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_array_bounds -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_array_bounds", ID_OPT_ARRAY_BOUNDS, R_OPT_ARRAY_BOUNDS__NULL);
	}
	;

opt_indirection
	: /* empty */ {
		JOUT("SYN: opt_indirection -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_indirection", ID_OPT_INDIRECTION, R_OPT_INDIRECTION__NULL);
	}
	| opt_indirection indirection_el {
		JOUT("SYN: opt_indirection -> opt_indirection_indirection_el \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_indirection", ID_OPT_INDIRECTION, R_OPT_INDIRECTION_2);
	}
	;

AlterOpFamilyStmt
	: ALTER OPERATOR FAMILY any_name USING access_method ADD_P opclass_item_list {
		JOUT("SYN: AlterOpFamilyStmt -> ALTER_OPERATOR_FAMILY_any_name_USING_access_method_ADD_P_opclass_item_list \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterOpFamilyStmt", ID_ALTEROPFAMILYSTMT, R_ALTEROPFAMILYSTMT_1);
	}
	| ALTER OPERATOR FAMILY any_name USING access_method DROP opclass_drop_list {
		JOUT("SYN: AlterOpFamilyStmt -> ALTER_OPERATOR_FAMILY_any_name_USING_access_method_DROP_opclass_drop_list \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterOpFamilyStmt", ID_ALTEROPFAMILYSTMT, R_ALTEROPFAMILYSTMT_2);
	}
	;

ConstraintAttr
	: DEFERRABLE {
		JOUT("SYN: ConstraintAttr -> DEFERRABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstraintAttr", ID_CONSTRAINTATTR, R_CONSTRAINTATTR_1);
	}
	| NOT DEFERRABLE {
		JOUT("SYN: ConstraintAttr -> NOT_DEFERRABLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttr", ID_CONSTRAINTATTR, R_CONSTRAINTATTR_2);
	}
	| INITIALLY DEFERRED {
		JOUT("SYN: ConstraintAttr -> INITIALLY_DEFERRED \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttr", ID_CONSTRAINTATTR, R_CONSTRAINTATTR_3);
	}
	| INITIALLY IMMEDIATE {
		JOUT("SYN: ConstraintAttr -> INITIALLY_IMMEDIATE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttr", ID_CONSTRAINTATTR, R_CONSTRAINTATTR_4);
	}
	;

columnElem
	: ColId {
		JOUT("SYN: columnElem -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "columnElem", ID_COLUMNELEM, R_COLUMNELEM_1);
	}
	;

opt_index_name
	: index_name {
		JOUT("SYN: opt_index_name -> index_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_index_name", ID_OPT_INDEX_NAME, R_OPT_INDEX_NAME_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_index_name -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_index_name", ID_OPT_INDEX_NAME, R_OPT_INDEX_NAME__NULL);
	}
	;


func_return
	: func_type {
		JOUT("SYN: func_return -> func_type \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_return", ID_FUNC_RETURN, R_FUNC_RETURN_1);
	}
	;

create_generic_options
	: OPTIONS SQL_LP generic_option_list SQL_RP {
		JOUT("SYN: create_generic_options -> OPTIONS_SQL_LP_generic_option_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "create_generic_options", ID_CREATE_GENERIC_OPTIONS, R_CREATE_GENERIC_OPTIONS_1);
	}
	| /* empty */ {
		JOUT("SYN: create_generic_options -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "create_generic_options", ID_CREATE_GENERIC_OPTIONS, R_CREATE_GENERIC_OPTIONS__NULL);
	}
	;

SecLabelStmt
	: SECURITY LABEL opt_provider ON security_label_type any_name IS security_label {
		JOUT("SYN: SecLabelStmt -> SECURITY_LABEL_opt_provider_ON_security_label_type_any_name_IS_security_label \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "SecLabelStmt", ID_SECLABELSTMT, R_SECLABELSTMT_1);
	}
	| SECURITY LABEL opt_provider ON AGGREGATE func_name aggr_args IS security_label {
		JOUT("SYN: SecLabelStmt -> SECURITY_LABEL_opt_provider_ON_AGGREGATE_func_name_aggr_args_IS_security_label \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "SecLabelStmt", ID_SECLABELSTMT, R_SECLABELSTMT_2);
	}
	| SECURITY LABEL opt_provider ON FUNCTION func_name func_args IS security_label {
		JOUT("SYN: SecLabelStmt -> SECURITY_LABEL_opt_provider_ON_FUNCTION_func_name_func_args_IS_security_label \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "SecLabelStmt", ID_SECLABELSTMT, R_SECLABELSTMT_3);
	}
	| SECURITY LABEL opt_provider ON LARGE_P OBJECT_P NumericOnly IS security_label {
		JOUT("SYN: SecLabelStmt -> SECURITY_LABEL_opt_provider_ON_LARGE_P_OBJECT_P_NumericOnly_IS_security_label \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "SecLabelStmt", ID_SECLABELSTMT, R_SECLABELSTMT_4);
	}
	| SECURITY LABEL opt_provider ON opt_procedural LANGUAGE any_name IS security_label {
		JOUT("SYN: SecLabelStmt -> SECURITY_LABEL_opt_provider_ON_opt_procedural_LANGUAGE_any_name_IS_security_label \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "SecLabelStmt", ID_SECLABELSTMT, R_SECLABELSTMT_5);
	}
	;

generic_option_name
	: ColLabel {
		JOUT("SYN: generic_option_name -> ColLabel \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "generic_option_name", ID_GENERIC_OPTION_NAME, R_GENERIC_OPTION_NAME_1);
	}
	;

xml_whitespace_option
	: PRESERVE WHITESPACE_P {
		JOUT("SYN: xml_whitespace_option -> PRESERVE_WHITESPACE_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "xml_whitespace_option", ID_XML_WHITESPACE_OPTION, R_XML_WHITESPACE_OPTION_1);
	}
	| STRIP_P WHITESPACE_P {
		JOUT("SYN: xml_whitespace_option -> STRIP_P_WHITESPACE_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "xml_whitespace_option", ID_XML_WHITESPACE_OPTION, R_XML_WHITESPACE_OPTION_2);
	}
	| /* empty */ {
		JOUT("SYN: xml_whitespace_option -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "xml_whitespace_option", ID_XML_WHITESPACE_OPTION, R_XML_WHITESPACE_OPTION__NULL);
	}
	;

var_name
	: ColId {
		JOUT("SYN: var_name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "var_name", ID_VAR_NAME, R_VAR_NAME_1);
	}
	| var_name SQL_DOT ColId {
		JOUT("SYN: var_name -> var_name_SQL_DOT_ColId \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "var_name", ID_VAR_NAME, R_VAR_NAME_2);
	}
	;

privilege
	: SELECT opt_column_list {
		JOUT("SYN: privilege -> SELECT_opt_column_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege", ID_PRIVILEGE, R_PRIVILEGE_1);
	}
	| REFERENCES opt_column_list {
		JOUT("SYN: privilege -> REFERENCES_opt_column_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege", ID_PRIVILEGE, R_PRIVILEGE_2);
	}
	| CREATE opt_column_list {
		JOUT("SYN: privilege -> CREATE_opt_column_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege", ID_PRIVILEGE, R_PRIVILEGE_3);
	}
	| ColId opt_column_list {
		JOUT("SYN: privilege -> ColId_opt_column_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "privilege", ID_PRIVILEGE, R_PRIVILEGE_4);
	}
	;



table_ref
	: relation_expr opt_alias_clause sample_clause {
		// modify add sample_clause
		JOUT("SYN: table_ref -> relation_expr_opt_alias_clause sample_clause \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "table_ref", ID_TABLE_REF, R_TABLE_REF_1);
	}
	| func_table func_alias_clause {
		JOUT("SYN: table_ref -> func_table_func_alias_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "table_ref", ID_TABLE_REF, R_TABLE_REF_2);
	}
	| LATERAL_P func_table func_alias_clause {
		JOUT("SYN: table_ref -> LATERAL_P_func_table_func_alias_clause \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "table_ref", ID_TABLE_REF, R_TABLE_REF_3);
	}
	| select_with_parens opt_alias_clause {
		JOUT("SYN: table_ref -> select_with_parens_opt_alias_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "table_ref", ID_TABLE_REF, R_TABLE_REF_4);
	}
	| LATERAL_P select_with_parens opt_alias_clause {
		JOUT("SYN: table_ref -> LATERAL_P_select_with_parens_opt_alias_clause \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "table_ref", ID_TABLE_REF, R_TABLE_REF_5);
	}
	| joined_table {
		JOUT("SYN: table_ref -> joined_table \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "table_ref", ID_TABLE_REF, R_TABLE_REF_6);
	}
	| SQL_LP joined_table SQL_RP alias_clause {
		JOUT("SYN: table_ref -> SQL_LP_joined_table_SQL_RP_alias_clause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "table_ref", ID_TABLE_REF, R_TABLE_REF_7);
	}
	;

extract_list
	: extract_arg FROM a_expr {
		JOUT("SYN: extract_list -> extract_arg_FROM_a_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "extract_list", ID_EXTRACT_LIST, R_EXTRACT_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: extract_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "extract_list", ID_EXTRACT_LIST, R_EXTRACT_LIST__NULL);
	}
	;

old_aggr_list
	: old_aggr_elem {
		JOUT("SYN: old_aggr_list -> old_aggr_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "old_aggr_list", ID_OLD_AGGR_LIST, R_OLD_AGGR_LIST_1);
	}
	| old_aggr_list SQL_COMMA old_aggr_elem {
		JOUT("SYN: old_aggr_list -> old_aggr_list_SQL_COMMA_old_aggr_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "old_aggr_list", ID_OLD_AGGR_LIST, R_OLD_AGGR_LIST_2);
	}
	;

CommentStmt
	: COMMENT ON comment_type any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_comment_type_any_name_IS_comment_text \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_1);
	}
	| COMMENT ON AGGREGATE func_name aggr_args IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_AGGREGATE_func_name_aggr_args_IS_comment_text \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_2);
	}
	| COMMENT ON FUNCTION func_name func_args IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_FUNCTION_func_name_func_args_IS_comment_text \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_3);
	}
	| COMMENT ON OPERATOR any_operator oper_argtypes IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_OPERATOR_any_operator_oper_argtypes_IS_comment_text \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_4);
	}
	| COMMENT ON CONSTRAINT name ON any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_CONSTRAINT_name_ON_any_name_IS_comment_text \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_5);
	}
	| COMMENT ON RULE name ON any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_RULE_name_ON_any_name_IS_comment_text \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_6);
	}
	| COMMENT ON RULE name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_RULE_name_IS_comment_text \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_7);
	}
	| COMMENT ON TRIGGER name ON any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_TRIGGER_name_ON_any_name_IS_comment_text \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_8);
	}
	| COMMENT ON OPERATOR CLASS any_name USING access_method IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_OPERATOR_CLASS_any_name_USING_access_method_IS_comment_text \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_9);
	}
	| COMMENT ON OPERATOR FAMILY any_name USING access_method IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_OPERATOR_FAMILY_any_name_USING_access_method_IS_comment_text \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_10);
	}
	| COMMENT ON LARGE_P OBJECT_P NumericOnly IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_LARGE_P_OBJECT_P_NumericOnly_IS_comment_text \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_11);
	}
	| COMMENT ON CAST SQL_LP Typename AS Typename SQL_RP IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_CAST_SQL_LP_Typename_AS_Typename_SQL_RP_IS_comment_text \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_12);
	}
	| COMMENT ON opt_procedural LANGUAGE any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_opt_procedural_LANGUAGE_any_name_IS_comment_text \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_13);
	}
	| COMMENT ON TEXT_P SEARCH PARSER any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_TEXT_P_SEARCH_PARSER_any_name_IS_comment_text \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_14);
	}
	| COMMENT ON TEXT_P SEARCH DICTIONARY any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_TEXT_P_SEARCH_DICTIONARY_any_name_IS_comment_text \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_15);
	}
	| COMMENT ON TEXT_P SEARCH TEMPLATE any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_TEXT_P_SEARCH_TEMPLATE_any_name_IS_comment_text \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_16);
	}
	| COMMENT ON TEXT_P SEARCH CONFIGURATION any_name IS comment_text {
		JOUT("SYN: CommentStmt -> COMMENT_ON_TEXT_P_SEARCH_CONFIGURATION_any_name_IS_comment_text \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CommentStmt", ID_COMMENTSTMT, R_COMMENTSTMT_17);
	}
	;

grantee_list
	: grantee {
		JOUT("SYN: grantee_list -> grantee \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "grantee_list", ID_GRANTEE_LIST, R_GRANTEE_LIST_1);
	}
	| grantee_list SQL_COMMA grantee {
		JOUT("SYN: grantee_list -> grantee_list_SQL_COMMA_grantee \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "grantee_list", ID_GRANTEE_LIST, R_GRANTEE_LIST_2);
	}
	;

ConstraintAttributeSpec
	: /* empty */ {
		JOUT("SYN: ConstraintAttributeSpec -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "ConstraintAttributeSpec", ID_CONSTRAINTATTRIBUTESPEC, R_CONSTRAINTATTRIBUTESPEC__NULL);
	}
	| ConstraintAttributeSpec ConstraintAttributeElem {
		JOUT("SYN: ConstraintAttributeSpec -> ConstraintAttributeSpec_ConstraintAttributeElem \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttributeSpec", ID_CONSTRAINTATTRIBUTESPEC, R_CONSTRAINTATTRIBUTESPEC_2);
	}
	;

over_clause
	: OVER window_specification {
		JOUT("SYN: over_clause -> OVER_window_specification \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "over_clause", ID_OVER_CLAUSE, R_OVER_CLAUSE_1);
	}
	| OVER ColId {
		JOUT("SYN: over_clause -> OVER_ColId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "over_clause", ID_OVER_CLAUSE, R_OVER_CLAUSE_2);
	}
	| /* empty */ {
		JOUT("SYN: over_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "over_clause", ID_OVER_CLAUSE, R_OVER_CLAUSE__NULL);
	}
	;

frame_bound
	: UNBOUNDED PRECEDING {
		JOUT("SYN: frame_bound -> UNBOUNDED_PRECEDING \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "frame_bound", ID_FRAME_BOUND, R_FRAME_BOUND_1);
	}
	| UNBOUNDED FOLLOWING {
		JOUT("SYN: frame_bound -> UNBOUNDED_FOLLOWING \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "frame_bound", ID_FRAME_BOUND, R_FRAME_BOUND_2);
	}
	| CURRENT_P ROW {
		JOUT("SYN: frame_bound -> CURRENT_P_ROW \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "frame_bound", ID_FRAME_BOUND, R_FRAME_BOUND_3);
	}
	| a_expr PRECEDING {
		JOUT("SYN: frame_bound -> a_expr_PRECEDING \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "frame_bound", ID_FRAME_BOUND, R_FRAME_BOUND_4);
	}
	| a_expr FOLLOWING {
		JOUT("SYN: frame_bound -> a_expr_FOLLOWING \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "frame_bound", ID_FRAME_BOUND, R_FRAME_BOUND_5);
	}
	;

key_delete
	: ON DELETE_P key_action {
		JOUT("SYN: key_delete -> ON_DELETE_P_key_action \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "key_delete", ID_KEY_DELETE, R_KEY_DELETE_1);
	}
	;

key_action
	: NO ACTION {
		JOUT("SYN: key_action -> NO_ACTION \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_action", ID_KEY_ACTION, R_KEY_ACTION_1);
	}
	| RESTRICT {
		JOUT("SYN: key_action -> RESTRICT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "key_action", ID_KEY_ACTION, R_KEY_ACTION_2);
	}
	| CASCADE {
		JOUT("SYN: key_action -> CASCADE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "key_action", ID_KEY_ACTION, R_KEY_ACTION_3);
	}
	| SET NULL_P {
		JOUT("SYN: key_action -> SET_NULL_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_action", ID_KEY_ACTION, R_KEY_ACTION_4);
	}
	| SET DEFAULT {
		JOUT("SYN: key_action -> SET_DEFAULT \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "key_action", ID_KEY_ACTION, R_KEY_ACTION_5);
	}
	;

relation_expr_opt_alias_list 
	: relation_expr_opt_alias {
		// todo3
		JOUT("SYN: relation_expr_opt_alias_list -> relation_expr_opt_alias \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "relation_expr_opt_alias_list", ID_RELATION_EXPR_OPT_ALIAS_LIST, R_RELATION_EXPR_OPT_ALIAS_LIST_1);
	}
	| relation_expr_opt_alias_list SQL_COMMA relation_expr_opt_alias {
		JOUT("SYN: relation_expr_opt_alias_list -> relation_expr_opt_alias_list SQL_COMMA \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "relation_expr_opt_alias_list", ID_RELATION_EXPR_OPT_ALIAS_LIST, R_RELATION_EXPR_OPT_ALIAS_LIST_2);
	};

relation_expr_opt_alias
	: relation_expr %prec UMINUS {
		JOUT("SYN: relation_expr_opt_alias -> relation_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "relation_expr_opt_alias", ID_RELATION_EXPR_OPT_ALIAS, R_RELATION_EXPR_OPT_ALIAS_1);
	}
	| relation_expr ColId {
		JOUT("SYN: relation_expr_opt_alias -> relation_expr_ColId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "relation_expr_opt_alias", ID_RELATION_EXPR_OPT_ALIAS, R_RELATION_EXPR_OPT_ALIAS_2);
	}
	| relation_expr AS ColId {
		JOUT("SYN: relation_expr_opt_alias -> relation_expr_AS_ColId \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "relation_expr_opt_alias", ID_RELATION_EXPR_OPT_ALIAS, R_RELATION_EXPR_OPT_ALIAS_3);
	}
	| relation_expr ALL {
		//todo3
		JOUT("SYN: relation_expr_opt_alias ->relation_expr ALL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "relation_expr_opt_alias", ID_RELATION_EXPR_OPT_ALIAS, R_RELATION_EXPR_OPT_ALIAS_4);
	}
	;

join_outer
	: OUTER_P {
		JOUT("SYN: join_outer -> OUTER_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "join_outer", ID_JOIN_OUTER, R_JOIN_OUTER_1);
	}
	| /* empty */ {
		JOUT("SYN: join_outer -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "join_outer", ID_JOIN_OUTER, R_JOIN_OUTER__NULL);
	}
	;

set_clause
	: single_set_clause {
		JOUT("SYN: set_clause -> single_set_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "set_clause", ID_SET_CLAUSE, R_SET_CLAUSE_1);
	}
	| multiple_set_clause {
		JOUT("SYN: set_clause -> multiple_set_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "set_clause", ID_SET_CLAUSE, R_SET_CLAUSE_2);
	}
	;

DropTrigStmt
	: DROP TRIGGER name ON any_name opt_drop_behavior {
		JOUT("SYN: DropTrigStmt -> DROP_TRIGGER_name_ON_any_name_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DropTrigStmt", ID_DROPTRIGSTMT, R_DROPTRIGSTMT_1);
	}
	| DROP TRIGGER IF_P EXISTS name ON any_name opt_drop_behavior {
		JOUT("SYN: DropTrigStmt -> DROP_TRIGGER_IF_P_EXISTS_name_ON_any_name_opt_drop_behavior \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "DropTrigStmt", ID_DROPTRIGSTMT, R_DROPTRIGSTMT_2);
	}
	;

AlterExtensionContentsStmt
	: ALTER EXTENSION name add_drop AGGREGATE func_name aggr_args {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_AGGREGATE_func_name_aggr_args \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_1);
	}
	| ALTER EXTENSION name add_drop CAST SQL_LP Typename AS Typename SQL_RP {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_CAST_SQL_LP_Typename_AS_Typename_SQL_RP \n");
		$$ = cons_subtree(10, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_2);
	}
	| ALTER EXTENSION name add_drop COLLATION any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_COLLATION_any_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_3);
	}
	| ALTER EXTENSION name add_drop CONVERSION_P any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_CONVERSION_P_any_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_4);
	}
	| ALTER EXTENSION name add_drop DOMAIN_P any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_DOMAIN_P_any_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_5);
	}
	| ALTER EXTENSION name add_drop FUNCTION function_with_argtypes {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_FUNCTION_function_with_argtypes \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_6);
	}
	| ALTER EXTENSION name add_drop opt_procedural LANGUAGE name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_opt_procedural_LANGUAGE_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_7);
	}
	| ALTER EXTENSION name add_drop OPERATOR any_operator oper_argtypes {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_OPERATOR_any_operator_oper_argtypes \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_8);
	}
	| ALTER EXTENSION name add_drop OPERATOR CLASS any_name USING access_method {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_OPERATOR_CLASS_any_name_USING_access_method \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_9);
	}
	| ALTER EXTENSION name add_drop OPERATOR FAMILY any_name USING access_method {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_OPERATOR_FAMILY_any_name_USING_access_method \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_10);
	}
	| ALTER EXTENSION name add_drop SCHEMA name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_SCHEMA_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_11);
	}
	| ALTER EXTENSION name add_drop EVENT TRIGGER name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_EVENT_TRIGGER_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_12);
	}
	| ALTER EXTENSION name add_drop TABLE any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_TABLE_any_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_13);
	}
	| ALTER EXTENSION name add_drop TEXT_P SEARCH PARSER any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_TEXT_P_SEARCH_PARSER_any_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_14);
	}
	| ALTER EXTENSION name add_drop TEXT_P SEARCH DICTIONARY any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_TEXT_P_SEARCH_DICTIONARY_any_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_15);
	}
	| ALTER EXTENSION name add_drop TEXT_P SEARCH TEMPLATE any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_TEXT_P_SEARCH_TEMPLATE_any_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_16);
	}
	| ALTER EXTENSION name add_drop TEXT_P SEARCH CONFIGURATION any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_TEXT_P_SEARCH_CONFIGURATION_any_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_17);
	}
	| ALTER EXTENSION name add_drop SEQUENCE any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_SEQUENCE_any_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_18);
	}
	| ALTER EXTENSION name add_drop VIEW any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_VIEW_any_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_19);
	}
	| ALTER EXTENSION name add_drop FOREIGN TABLE any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_FOREIGN_TABLE_any_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_20);
	}
	| ALTER EXTENSION name add_drop FOREIGN DATA_P WRAPPER name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_FOREIGN_DATA_P_WRAPPER_name \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_21);
	}
	| ALTER EXTENSION name add_drop SERVER name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_SERVER_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_22);
	}
	| ALTER EXTENSION name add_drop TYPE_P any_name {
		JOUT("SYN: AlterExtensionContentsStmt -> ALTER_EXTENSION_name_add_drop_TYPE_P_any_name \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterExtensionContentsStmt", ID_ALTEREXTENSIONCONTENTSSTMT, R_ALTEREXTENSIONCONTENTSSTMT_23);
	}
	;

ConstDatetime
	: TIMESTAMP SQL_LP Iconst SQL_RP opt_timezone {
		JOUT("SYN: ConstDatetime -> TIMESTAMP_SQL_LP_Iconst_SQL_RP_opt_timezone \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_1);
	}
	| TIMESTAMP opt_timezone {
		JOUT("SYN: ConstDatetime -> TIMESTAMP_opt_timezone \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_2);
	}
	| TIME SQL_LP Iconst SQL_RP opt_timezone {
		JOUT("SYN: ConstDatetime -> TIME_SQL_LP_Iconst_SQL_RP_opt_timezone \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_3);
	}
	| TIME opt_timezone {
		JOUT("SYN: ConstDatetime -> TIME_opt_timezone \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_4);
	} 
	| TD_DATE format_clause {
		// todo3
		JOUT("SYN: ConstDatetime -> TD_DATE format_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_5);
	}
	| TD_DATE {
		JOUT("SYN: ConstDatetime -> TD_DATE format_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_6);
	} 
	| DATETIME {
		JOUT("SYN: ConstDatetime -> TD_DATE format_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_7);

	}
	// JOE TODO ADD
	| TIMESTAMP SQL_LP Iconst SQL_RP format_clause opt_timezone {
		JOUT("SYN: ConstDatetime -> TIMESTAMP_SQL_LP_Iconst_SQL_RP_opt_timezone format_clause \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_8);
	}
	| TIMESTAMP format_clause opt_timezone {
		JOUT("SYN: ConstDatetime -> TIMESTAMP_opt_timezone format_clause\n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_9);
	}
	| TIME SQL_LP Iconst SQL_RP format_clause opt_timezone {
		JOUT("SYN: ConstDatetime -> TIME_SQL_LP_Iconst_SQL_RP_opt_timezone format_clause\n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_10);
	}
	| TIME format_clause opt_timezone {
		JOUT("SYN: ConstDatetime -> TIME_opt_timezone format_clause\n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_11);
	} 
	| DATETIME format_clause {
		JOUT("SYN: ConstDatetime -> TD_DATE format_clause format_clause\n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstDatetime", ID_CONSTDATETIME, R_CONSTDATETIME_12);

	};

format_clause
	: FORMAT Sconst {
		// todo3
		JOUT("SYN: format_clause -> FORMAT Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "format_clause", ID_FORMAT_CLAUSE, R_FORMAT_CLAUSE_1);
	}
	| SQL_LP format_clause SQL_RP {
		JOUT("SYN: format_clause -> SQL_LP format_clause SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "format_clause", ID_FORMAT_CLAUSE, R_FORMAT_CLAUSE_2);
	};

opclass_item
	: OPERATOR Iconst any_operator opclass_purpose opt_recheck {
		JOUT("SYN: opclass_item -> OPERATOR_Iconst_any_operator_opclass_purpose_opt_recheck \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "opclass_item", ID_OPCLASS_ITEM, R_OPCLASS_ITEM_1);
	}
	| OPERATOR Iconst any_operator oper_argtypes opclass_purpose opt_recheck {
		JOUT("SYN: opclass_item -> OPERATOR_Iconst_any_operator_oper_argtypes_opclass_purpose_opt_recheck \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "opclass_item", ID_OPCLASS_ITEM, R_OPCLASS_ITEM_2);
	}
	| FUNCTION Iconst func_name func_args {
		JOUT("SYN: opclass_item -> FUNCTION_Iconst_func_name_func_args \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opclass_item", ID_OPCLASS_ITEM, R_OPCLASS_ITEM_3);
	}
	| FUNCTION Iconst SQL_LP type_list SQL_RP func_name func_args {
		JOUT("SYN: opclass_item -> FUNCTION_Iconst_SQL_LP_type_list_SQL_RP_func_name_func_args \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "opclass_item", ID_OPCLASS_ITEM, R_OPCLASS_ITEM_4);
	}
	| STORAGE Typename {
		JOUT("SYN: opclass_item -> STORAGE_Typename \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opclass_item", ID_OPCLASS_ITEM, R_OPCLASS_ITEM_5);
	}
	;

reloption_list
	: reloption_elem {
		JOUT("SYN: reloption_list -> reloption_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reloption_list", ID_RELOPTION_LIST, R_RELOPTION_LIST_1);
	}
	| reloption_list SQL_COMMA reloption_elem {
		JOUT("SYN: reloption_list -> reloption_list_SQL_COMMA_reloption_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "reloption_list", ID_RELOPTION_LIST, R_RELOPTION_LIST_2);
	}
	;

opt_transaction
	: WORK {
		JOUT("SYN: opt_transaction -> WORK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_transaction", ID_OPT_TRANSACTION, R_OPT_TRANSACTION_1);
	}
	| TRANSACTION {
		JOUT("SYN: opt_transaction -> TRANSACTION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_transaction", ID_OPT_TRANSACTION, R_OPT_TRANSACTION_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_transaction -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_transaction", ID_OPT_TRANSACTION, R_OPT_TRANSACTION__NULL);
	}
	;

xml_root_version
	: VERSION_P a_expr {
		JOUT("SYN: xml_root_version -> VERSION_P_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "xml_root_version", ID_XML_ROOT_VERSION, R_XML_ROOT_VERSION_1);
	}
	| VERSION_P NO VALUE_P {
		JOUT("SYN: xml_root_version -> VERSION_P_NO_VALUE_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "xml_root_version", ID_XML_ROOT_VERSION, R_XML_ROOT_VERSION_2);
	}
	;

extract_arg
	: IDENT {
		JOUT("SYN: extract_arg -> IDENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_1);
	}
	| YEAR_P {
		JOUT("SYN: extract_arg -> YEAR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_2);
	}
	| MONTH_P {
		JOUT("SYN: extract_arg -> MONTH_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_3);
	}
	| DAY_P {
		JOUT("SYN: extract_arg -> DAY_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_4);
	}
	| HOUR_P {
		JOUT("SYN: extract_arg -> HOUR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_5);
	}
	| MINUTE_P {
		JOUT("SYN: extract_arg -> MINUTE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_6);
	}
	| SECOND_P {
		JOUT("SYN: extract_arg -> SECOND_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_7);
	}
	| Sconst {
		JOUT("SYN: extract_arg -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "extract_arg", ID_EXTRACT_ARG, R_EXTRACT_ARG_8);
	}
	;

any_operator
	: all_Op {
		JOUT("SYN: any_operator -> all_Op \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "any_operator", ID_ANY_OPERATOR, R_ANY_OPERATOR_1);
	}
	| ColId SQL_DOT any_operator {
		JOUT("SYN: any_operator -> ColId_SQL_DOT_any_operator \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "any_operator", ID_ANY_OPERATOR, R_ANY_OPERATOR_2);
	}
	;

sortby
	: a_expr USING qual_all_Op opt_nulls_order {
		JOUT("SYN: sortby -> a_expr_USING_qual_all_Op_opt_nulls_order \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "sortby", ID_SORTBY, R_SORTBY_1);
	}
	| a_expr opt_asc_desc opt_nulls_order {
		JOUT("SYN: sortby -> a_expr_opt_asc_desc_opt_nulls_order \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "sortby", ID_SORTBY, R_SORTBY_2);
	}
	;

opt_enum_val_list
	: enum_val_list {
		JOUT("SYN: opt_enum_val_list -> enum_val_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_enum_val_list", ID_OPT_ENUM_VAL_LIST, R_OPT_ENUM_VAL_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_enum_val_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_enum_val_list", ID_OPT_ENUM_VAL_LIST, R_OPT_ENUM_VAL_LIST__NULL);
	}
	;

trim_list
	: a_expr FROM expr_list {
		JOUT("SYN: trim_list -> a_expr_FROM_expr_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "trim_list", ID_TRIM_LIST, R_TRIM_LIST_1);
	}
	| FROM expr_list {
		JOUT("SYN: trim_list -> FROM_expr_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "trim_list", ID_TRIM_LIST, R_TRIM_LIST_2);
	}
	| expr_list {
		JOUT("SYN: trim_list -> expr_list \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "trim_list", ID_TRIM_LIST, R_TRIM_LIST_3);
	}
	;

substr_for
	: FOR a_expr {
		JOUT("SYN: substr_for -> FOR_a_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "substr_for", ID_SUBSTR_FOR, R_SUBSTR_FOR_1);
	}
	;

opt_sort_clause
	: sort_clause {
		JOUT("SYN: opt_sort_clause -> sort_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_sort_clause", ID_OPT_SORT_CLAUSE, R_OPT_SORT_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_sort_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_sort_clause", ID_OPT_SORT_CLAUSE, R_OPT_SORT_CLAUSE__NULL);
	}
	;

limit_clause
	: LIMIT select_limit_value {
		JOUT("SYN: limit_clause -> LIMIT_select_limit_value \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "limit_clause", ID_LIMIT_CLAUSE, R_LIMIT_CLAUSE_1);
	}
	| LIMIT select_limit_value SQL_COMMA select_offset_value {
		JOUT("SYN: limit_clause -> LIMIT_select_limit_value_SQL_COMMA_select_offset_value \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "limit_clause", ID_LIMIT_CLAUSE, R_LIMIT_CLAUSE_2);
	}
	| FETCH first_or_next opt_select_fetch_first_value row_or_rows ONLY {
		JOUT("SYN: limit_clause -> FETCH_first_or_next_opt_select_fetch_first_value_row_or_rows_ONLY \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "limit_clause", ID_LIMIT_CLAUSE, R_LIMIT_CLAUSE_3);
	}
	;

CharacterWithoutLength
	: character opt_charset {
		JOUT("SYN: CharacterWithoutLength -> character_opt_charset \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "CharacterWithoutLength", ID_CHARACTERWITHOUTLENGTH, R_CHARACTERWITHOUTLENGTH_1);
	}
	;

vacuum_option_elem
	: analyze_keyword {
		JOUT("SYN: vacuum_option_elem -> analyze_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "vacuum_option_elem", ID_VACUUM_OPTION_ELEM, R_VACUUM_OPTION_ELEM_1);
	}
	| VERBOSE {
		JOUT("SYN: vacuum_option_elem -> VERBOSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "vacuum_option_elem", ID_VACUUM_OPTION_ELEM, R_VACUUM_OPTION_ELEM_2);
	}
	| FREEZE {
		JOUT("SYN: vacuum_option_elem -> FREEZE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "vacuum_option_elem", ID_VACUUM_OPTION_ELEM, R_VACUUM_OPTION_ELEM_3);
	}
	| FULL {
		JOUT("SYN: vacuum_option_elem -> FULL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "vacuum_option_elem", ID_VACUUM_OPTION_ELEM, R_VACUUM_OPTION_ELEM_4);
	}
	;

stmtmulti
	: stmtmulti SQL_SEMI stmt {
		JOUT("SYN: stmtmulti -> stmtmulti_SQL_SEMI_stmt \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "stmtmulti", ID_STMTMULTI, R_STMTMULTI_1);
	}
	| stmt {
		JOUT("SYN: stmtmulti -> stmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "stmtmulti", ID_STMTMULTI, R_STMTMULTI_2);
	}
	;

alter_table_cmd
	: ADD_P columnDef {
		JOUT("SYN: alter_table_cmd -> ADD_P_columnDef \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_1);
	}
	| ADD_P COLUMN columnDef {
		JOUT("SYN: alter_table_cmd -> ADD_P_COLUMN_columnDef \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_2);
	}
	| ALTER opt_column ColId alter_column_default {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_alter_column_default \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_3);
	}
	| ALTER opt_column ColId DROP NOT NULL_P {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_DROP_NOT_NULL_P \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_4);
	}
	| ALTER opt_column ColId SET NOT NULL_P {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_SET_NOT_NULL_P \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_5);
	}
	| ALTER opt_column ColId SET STATISTICS SignedIconst {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_SET_STATISTICS_SignedIconst \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_6);
	}
	| ALTER opt_column ColId SET reloptions {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_SET_reloptions \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_7);
	}
	| ALTER opt_column ColId RESET reloptions {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_RESET_reloptions \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_8);
	}
	| ALTER opt_column ColId SET STORAGE ColId {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_SET_STORAGE_ColId \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_9);
	}
	| DROP opt_column IF_P EXISTS ColId opt_drop_behavior {
		JOUT("SYN: alter_table_cmd -> DROP_opt_column_IF_P_EXISTS_ColId_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_10);
	}
	| DROP opt_column ColId opt_drop_behavior {
		JOUT("SYN: alter_table_cmd -> DROP_opt_column_ColId_opt_drop_behavior \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_11);
	}
	| ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_opt_set_data_TYPE_P_Typename_opt_collate_clause_alter_using \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_12);
	}
	| ALTER opt_column ColId alter_generic_options {
		JOUT("SYN: alter_table_cmd -> ALTER_opt_column_ColId_alter_generic_options \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_13);
	}
	| ADD_P TableConstraint {
		JOUT("SYN: alter_table_cmd -> ADD_P_TableConstraint \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_14);
	}
	| VALIDATE CONSTRAINT name {
		JOUT("SYN: alter_table_cmd -> VALIDATE_CONSTRAINT_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_15);
	}
	| DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior {
		JOUT("SYN: alter_table_cmd -> DROP_CONSTRAINT_IF_P_EXISTS_name_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_16);
	}
	| DROP CONSTRAINT name opt_drop_behavior {
		JOUT("SYN: alter_table_cmd -> DROP_CONSTRAINT_name_opt_drop_behavior \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_17);
	}
	| SET WITH OIDS {
		JOUT("SYN: alter_table_cmd -> SET_WITH_OIDS \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_18);
	}
	| SET WITHOUT OIDS {
		JOUT("SYN: alter_table_cmd -> SET_WITHOUT_OIDS \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_19);
	}
	| CLUSTER ON name {
		JOUT("SYN: alter_table_cmd -> CLUSTER_ON_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_20);
	}
	| SET WITHOUT CLUSTER {
		JOUT("SYN: alter_table_cmd -> SET_WITHOUT_CLUSTER \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_21);
	}
	| ENABLE_P TRIGGER name {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_TRIGGER_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_22);
	}
	| ENABLE_P ALWAYS TRIGGER name {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_ALWAYS_TRIGGER_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_23);
	}
	| ENABLE_P REPLICA TRIGGER name {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_REPLICA_TRIGGER_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_24);
	}
	| ENABLE_P TRIGGER ALL {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_TRIGGER_ALL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_25);
	}
	| ENABLE_P TRIGGER USER {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_TRIGGER_USER \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_26);
	}
	| DISABLE_P TRIGGER name {
		JOUT("SYN: alter_table_cmd -> DISABLE_P_TRIGGER_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_27);
	}
	| DISABLE_P TRIGGER ALL {
		JOUT("SYN: alter_table_cmd -> DISABLE_P_TRIGGER_ALL \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_28);
	}
	| DISABLE_P TRIGGER USER {
		JOUT("SYN: alter_table_cmd -> DISABLE_P_TRIGGER_USER \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_29);
	}
	| ENABLE_P RULE name {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_RULE_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_30);
	}
	| ENABLE_P ALWAYS RULE name {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_ALWAYS_RULE_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_31);
	}
	| ENABLE_P REPLICA RULE name {
		JOUT("SYN: alter_table_cmd -> ENABLE_P_REPLICA_RULE_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_32);
	}
	| DISABLE_P RULE name {
		JOUT("SYN: alter_table_cmd -> DISABLE_P_RULE_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_33);
	}
	| INHERIT qualified_name {
		JOUT("SYN: alter_table_cmd -> INHERIT_qualified_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_34);
	}
	| NO INHERIT qualified_name {
		JOUT("SYN: alter_table_cmd -> NO_INHERIT_qualified_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_35);
	}
	| OF any_name {
		JOUT("SYN: alter_table_cmd -> OF_any_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_36);
	}
	| NOT OF {
		JOUT("SYN: alter_table_cmd -> NOT_OF \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_37);
	}
	| OWNER TO RoleId {
		JOUT("SYN: alter_table_cmd -> OWNER_TO_RoleId \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_38);
	}
	| SET TABLESPACE name {
		JOUT("SYN: alter_table_cmd -> SET_TABLESPACE_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_39);
	}
	| SET reloptions {
		JOUT("SYN: alter_table_cmd -> SET_reloptions \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_40);
	}
	| RESET reloptions {
		JOUT("SYN: alter_table_cmd -> RESET_reloptions \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_41);
	}
	| alter_generic_options {
		JOUT("SYN: alter_table_cmd -> alter_generic_options \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "alter_table_cmd", ID_ALTER_TABLE_CMD, R_ALTER_TABLE_CMD_42);
	}
	;

in_expr
	: select_with_parens {
		JOUT("SYN: in_expr -> select_with_parens \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "in_expr", ID_IN_EXPR, R_IN_EXPR_1);
	}
	| SQL_LP expr_list SQL_RP {
		JOUT("SYN: in_expr -> SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "in_expr", ID_IN_EXPR, R_IN_EXPR_2);
	}
	| ICONST {
		JOUT("SYN: in_expr -> ICONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "in_expr", ID_IN_EXPR, R_IN_EXPR_3);
	}
	;

index_name
	: ColId {
		JOUT("SYN: index_name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "index_name", ID_INDEX_NAME, R_INDEX_NAME_1);
	}
	;

AlterUserSetStmt
	: ALTER USER RoleId SetResetClause {
		JOUT("SYN: AlterUserSetStmt -> ALTER_USER_RoleId_SetResetClause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterUserSetStmt", ID_ALTERUSERSETSTMT, R_ALTERUSERSETSTMT_1);
	}
	;

opt_type
	: TYPE_P Sconst {
		JOUT("SYN: opt_type -> TYPE_P_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_type", ID_OPT_TYPE, R_OPT_TYPE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_type -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_type", ID_OPT_TYPE, R_OPT_TYPE__NULL);
	}
	;

OptTypedTableElementList
	: SQL_LP TypedTableElementList SQL_RP {
		JOUT("SYN: OptTypedTableElementList -> SQL_LP_TypedTableElementList_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "OptTypedTableElementList", ID_OPTTYPEDTABLEELEMENTLIST, R_OPTTYPEDTABLEELEMENTLIST_1);
	}
	| /* empty */ {
		JOUT("SYN: OptTypedTableElementList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptTypedTableElementList", ID_OPTTYPEDTABLEELEMENTLIST, R_OPTTYPEDTABLEELEMENTLIST__NULL);
	}
	;

// modify
CreateAsStmt
	: CREATE OptTemp TABLE create_as_target AS SelectStmt opt_with_data {
		JOUT("SYN: CreateAsStmt -> CREATE_OptTemp_TABLE_create_as_target_AS_SelectStmt_opt_with_data \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "CreateAsStmt", ID_CREATEASSTMT, R_CREATEASSTMT_1);
	}
	| CREATE OptSetMultiset OptTemp TABLE qualified_name AS SelectStmt opt_with_data {
		//todo3
		JOUT("SYN: CreateAsStmt -> CREATE_OptTemp_TABLE_create_as_target_AS_SelectStmt_opt_with_data \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CreateAsStmt", ID_CREATEASSTMT, R_CREATEASSTMT_2);
	}
	;

// JOE TODO3
OptSetMultiset
	: MULTISET {
		JOUT("SYN: OptSetMultiset -> MULTISET\n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptSetMultiset", ID_OPTSETMULTISET, R_OPTSETMULTISET_1);
	}
	| SET {
		JOUT("SYN: OptSetMultiset -> SET\n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptSetMultiset", ID_OPTSETMULTISET, R_OPTSETMULTISET_2);
	}
	/*
	| {
		JOUT("SYN: OptSetMultiset -> NULL\n");

	}*/
	;

DropUserMappingStmt
	: DROP USER MAPPING FOR auth_ident SERVER name {
		JOUT("SYN: DropUserMappingStmt -> DROP_USER_MAPPING_FOR_auth_ident_SERVER_name \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DropUserMappingStmt", ID_DROPUSERMAPPINGSTMT, R_DROPUSERMAPPINGSTMT_1);
	}
	| DROP USER MAPPING IF_P EXISTS FOR auth_ident SERVER name {
		JOUT("SYN: DropUserMappingStmt -> DROP_USER_MAPPING_IF_P_EXISTS_FOR_auth_ident_SERVER_name \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "DropUserMappingStmt", ID_DROPUSERMAPPINGSTMT, R_DROPUSERMAPPINGSTMT_2);
	}
	;

reserved_keyword
	: ALL {
		JOUT("SYN: reserved_keyword -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_1);
	}
	| ANALYSE {
		JOUT("SYN: reserved_keyword -> ANALYSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_2);
	}
	| ANALYZE {
		JOUT("SYN: reserved_keyword -> ANALYZE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_3);
	}
	| AND {
		JOUT("SYN: reserved_keyword -> AND \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_4);
	}
	| ANY {
		JOUT("SYN: reserved_keyword -> ANY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_5);
	}
	| ARRAY {
		JOUT("SYN: reserved_keyword -> ARRAY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_6);
	}
	| AS {
		JOUT("SYN: reserved_keyword -> AS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_7);
	}
	| ASC {
		JOUT("SYN: reserved_keyword -> ASC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_8);
	}
	| ASYMMETRIC {
		JOUT("SYN: reserved_keyword -> ASYMMETRIC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_9);
	}
	| BOTH {
		JOUT("SYN: reserved_keyword -> BOTH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_10);
	}
	| CASE {
		JOUT("SYN: reserved_keyword -> CASE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_11);
	}
	| CAST {
		JOUT("SYN: reserved_keyword -> CAST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_12);
	}
	| CHECK {
		JOUT("SYN: reserved_keyword -> CHECK \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_13);
	}
	| COLLATE {
		JOUT("SYN: reserved_keyword -> COLLATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_14);
	}
	| COLUMN {
		JOUT("SYN: reserved_keyword -> COLUMN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_15);
	}
	| CONSTRAINT {
		JOUT("SYN: reserved_keyword -> CONSTRAINT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_16);
	}
	| CREATE {
		JOUT("SYN: reserved_keyword -> CREATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_17);
	}
	| CURRENT_CATALOG {
		JOUT("SYN: reserved_keyword -> CURRENT_CATALOG \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_18);
	}
	| CURRENT_DATE {
		JOUT("SYN: reserved_keyword -> CURRENT_DATE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_19);
	}
	| CURRENT_ROLE {
		JOUT("SYN: reserved_keyword -> CURRENT_ROLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_20);
	}
	| CURRENT_TIME {
		JOUT("SYN: reserved_keyword -> CURRENT_TIME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_21);
	}
	| CURRENT_TIMESTAMP {
		JOUT("SYN: reserved_keyword -> CURRENT_TIMESTAMP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_22);
	}
	| CURRENT_USER {
		JOUT("SYN: reserved_keyword -> CURRENT_USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_23);
	}
	| DEFAULT {
		JOUT("SYN: reserved_keyword -> DEFAULT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_24);
	}
	| DEFERRABLE {
		JOUT("SYN: reserved_keyword -> DEFERRABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_25);
	}
	| DESC {
		JOUT("SYN: reserved_keyword -> DESC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_26);
	}
	| DISTINCT {
		JOUT("SYN: reserved_keyword -> DISTINCT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_27);
	}
	| DO {
		JOUT("SYN: reserved_keyword -> DO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_28);
	}
	| ELSE {
		JOUT("SYN: reserved_keyword -> ELSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_29);
	}
	| END_P {
		JOUT("SYN: reserved_keyword -> END_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_30);
	}
	| EXCEPT {
		JOUT("SYN: reserved_keyword -> EXCEPT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_31);
	}
	| FALSE_P {
		JOUT("SYN: reserved_keyword -> FALSE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_32);
	}
	| FETCH {
		JOUT("SYN: reserved_keyword -> FETCH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_33);
	}
	| FOR {
		JOUT("SYN: reserved_keyword -> FOR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_34);
	}
	| FOREIGN {
		JOUT("SYN: reserved_keyword -> FOREIGN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_35);
	}
	| FROM {
		JOUT("SYN: reserved_keyword -> FROM \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_36);
	}
	| GRANT {
		JOUT("SYN: reserved_keyword -> GRANT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_37);
	}
	| GROUP_P {
		JOUT("SYN: reserved_keyword -> GROUP_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_38);
	}
	| HAVING {
		JOUT("SYN: reserved_keyword -> HAVING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_39);
	}
	| IN_P {
		JOUT("SYN: reserved_keyword -> IN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_40);
	}
	| INITIALLY {
		JOUT("SYN: reserved_keyword -> INITIALLY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_41);
	}
	| INTERSECT {
		JOUT("SYN: reserved_keyword -> INTERSECT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_42);
	}
	| INTO {
		JOUT("SYN: reserved_keyword -> INTO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_43);
	}
	| LATERAL_P {
		JOUT("SYN: reserved_keyword -> LATERAL_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_44);
	}
	| LEADING {
		JOUT("SYN: reserved_keyword -> LEADING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_45);
	}
	| LIMIT {
		JOUT("SYN: reserved_keyword -> LIMIT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_46);
	}
	| LOCALTIME {
		JOUT("SYN: reserved_keyword -> LOCALTIME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_47);
	}
	| LOCALTIMESTAMP {
		JOUT("SYN: reserved_keyword -> LOCALTIMESTAMP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_48);
	}
	| NOT {
		JOUT("SYN: reserved_keyword -> NOT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_49);
	}
	| NULL_P {
		JOUT("SYN: reserved_keyword -> NULL_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_50);
	}
	| OFFSET {
		JOUT("SYN: reserved_keyword -> OFFSET \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_51);
	}
	| ON {
		JOUT("SYN: reserved_keyword -> ON \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_52);
	}
	| ONLY {
		JOUT("SYN: reserved_keyword -> ONLY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_53);
	}
	| OR {
		JOUT("SYN: reserved_keyword -> OR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_54);
	}
	| ORDER {
		JOUT("SYN: reserved_keyword -> ORDER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_55);
	}
	| PLACING {
		JOUT("SYN: reserved_keyword -> PLACING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_56);
	}
	| PRIMARY {
		JOUT("SYN: reserved_keyword -> PRIMARY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_57);
	}
	| REFERENCES {
		JOUT("SYN: reserved_keyword -> REFERENCES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_58);
	}
	| RETURNING {
		JOUT("SYN: reserved_keyword -> RETURNING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_59);
	}
	| SELECT {
		JOUT("SYN: reserved_keyword -> SELECT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_60);
	}
	| SESSION_USER {
		JOUT("SYN: reserved_keyword -> SESSION_USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_61);
	}
	| SOME {
		JOUT("SYN: reserved_keyword -> SOME \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_62);
	}
	| SYMMETRIC {
		JOUT("SYN: reserved_keyword -> SYMMETRIC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_63);
	}
	| TABLE {
		JOUT("SYN: reserved_keyword -> TABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_64);
	}
	| THEN {
		JOUT("SYN: reserved_keyword -> THEN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_65);
	}
	| TO {
		JOUT("SYN: reserved_keyword -> TO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_66);
	}
	| TRAILING {
		JOUT("SYN: reserved_keyword -> TRAILING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_67);
	}
	| TRUE_P {
		JOUT("SYN: reserved_keyword -> TRUE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_68);
	}
	| UNION {
		JOUT("SYN: reserved_keyword -> UNION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_69);
	}
	| UNIQUE {
		JOUT("SYN: reserved_keyword -> UNIQUE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_70);
	}
	| USER {
		JOUT("SYN: reserved_keyword -> USER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_71);
	}
	| USING {
		JOUT("SYN: reserved_keyword -> USING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_72);
	}
	| VARIADIC {
		JOUT("SYN: reserved_keyword -> VARIADIC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_73);
	}
	| WHEN {
		JOUT("SYN: reserved_keyword -> WHEN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_74);
	}
	| WHERE {
		JOUT("SYN: reserved_keyword -> WHERE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_75);
	}
	| WINDOW {
		JOUT("SYN: reserved_keyword -> WINDOW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_76);
	}
	| WITH {
		JOUT("SYN: reserved_keyword -> WITH \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, R_RESERVED_KEYWORD_77);
	} 
	| TD_NAMED {
		JOUT("SYN: reserved_keyword -> TD_NAMED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reserved_keyword", ID_RESERVED_KEYWORD, -1);
	}
	;

set_rest
	: TRANSACTION transaction_mode_list {
		JOUT("SYN: set_rest -> TRANSACTION_transaction_mode_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "set_rest", ID_SET_REST, R_SET_REST_1);
	}
	| SESSION CHARACTERISTICS AS TRANSACTION transaction_mode_list {
		JOUT("SYN: set_rest -> SESSION_CHARACTERISTICS_AS_TRANSACTION_transaction_mode_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "set_rest", ID_SET_REST, R_SET_REST_2);
	}
	| set_rest_more {
		JOUT("SYN: set_rest -> set_rest_more \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "set_rest", ID_SET_REST, R_SET_REST_3);
	}
	;

LoadStmt
	: LOAD file_name {
		JOUT("SYN: LoadStmt -> LOAD_file_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "LoadStmt", ID_LOADSTMT, R_LOADSTMT_1);
	}
	;

explain_option_arg
	: opt_boolean_or_string {
		JOUT("SYN: explain_option_arg -> opt_boolean_or_string \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "explain_option_arg", ID_EXPLAIN_OPTION_ARG, R_EXPLAIN_OPTION_ARG_1);
	}
	| NumericOnly {
		JOUT("SYN: explain_option_arg -> NumericOnly \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "explain_option_arg", ID_EXPLAIN_OPTION_ARG, R_EXPLAIN_OPTION_ARG_2);
	}
	| /* empty */ {
		JOUT("SYN: explain_option_arg -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "explain_option_arg", ID_EXPLAIN_OPTION_ARG, R_EXPLAIN_OPTION_ARG__NULL);
	}
	;

DropGroupStmt
	: DROP GROUP_P name_list {
		JOUT("SYN: DropGroupStmt -> DROP_GROUP_P_name_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DropGroupStmt", ID_DROPGROUPSTMT, R_DROPGROUPSTMT_1);
	}
	| DROP GROUP_P IF_P EXISTS name_list {
		JOUT("SYN: DropGroupStmt -> DROP_GROUP_P_IF_P_EXISTS_name_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropGroupStmt", ID_DROPGROUPSTMT, R_DROPGROUPSTMT_2);
	}
	;

opt_check_option
	: WITH CHECK OPTION {
		JOUT("SYN: opt_check_option -> WITH_CHECK_OPTION \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_check_option", ID_OPT_CHECK_OPTION, R_OPT_CHECK_OPTION_1);
	}
	| WITH CASCADED CHECK OPTION {
		JOUT("SYN: opt_check_option -> WITH_CASCADED_CHECK_OPTION \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opt_check_option", ID_OPT_CHECK_OPTION, R_OPT_CHECK_OPTION_2);
	}
	| WITH LOCAL CHECK OPTION {
		JOUT("SYN: opt_check_option -> WITH_LOCAL_CHECK_OPTION \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opt_check_option", ID_OPT_CHECK_OPTION, R_OPT_CHECK_OPTION_3);
	}
	| /* empty */ {
		JOUT("SYN: opt_check_option -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_check_option", ID_OPT_CHECK_OPTION, R_OPT_CHECK_OPTION__NULL);
	}
	;

TriggerEvents
	: TriggerOneEvent {
		JOUT("SYN: TriggerEvents -> TriggerOneEvent \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerEvents", ID_TRIGGEREVENTS, R_TRIGGEREVENTS_1);
	}
	| TriggerEvents OR TriggerOneEvent {
		JOUT("SYN: TriggerEvents -> TriggerEvents_OR_TriggerOneEvent \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TriggerEvents", ID_TRIGGEREVENTS, R_TRIGGEREVENTS_2);
	}
	;

grantee
	: RoleId {
		JOUT("SYN: grantee -> RoleId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "grantee", ID_GRANTEE, R_GRANTEE_1);
	}
	| GROUP_P RoleId {
		JOUT("SYN: grantee -> GROUP_P_RoleId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "grantee", ID_GRANTEE, R_GRANTEE_2);
	}
	;

any_name
	: ColId {
		JOUT("SYN: any_name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "any_name", ID_ANY_NAME, R_ANY_NAME_1);
	}
	| ColId attrs {
		JOUT("SYN: any_name -> ColId_attrs \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "any_name", ID_ANY_NAME, R_ANY_NAME_2);
	}
	;

TriggerForSpec
	: FOR TriggerForOptEach TriggerForType {
		JOUT("SYN: TriggerForSpec -> FOR_TriggerForOptEach_TriggerForType \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TriggerForSpec", ID_TRIGGERFORSPEC, R_TRIGGERFORSPEC_1);
	}
	| /* empty */ {
		JOUT("SYN: TriggerForSpec -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "TriggerForSpec", ID_TRIGGERFORSPEC, R_TRIGGERFORSPEC__NULL);
	}
	;

MathOp
	: SQL_PLUS {
		JOUT("SYN: MathOp -> SQL_PLUS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_1);
	}
	| SQL_MINUS {
		JOUT("SYN: MathOp -> SQL_MINUS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_2);
	}
	| SQL_MUL {
		JOUT("SYN: MathOp -> SQL_MUL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_3);
	}
	| SQL_DIV {
		JOUT("SYN: MathOp -> SQL_DIV \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_4);
	}
	| SQL_MOD {
		JOUT("SYN: MathOp -> SQL_MOD \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_5);
	}
	| SQL_POWER {
		JOUT("SYN: MathOp -> SQL_POWER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_6);
	}
	| SQL_LT {
		JOUT("SYN: MathOp -> SQL_LT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_7);
	}
	| SQL_GT {
		JOUT("SYN: MathOp -> SQL_GT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_8);
	}
	| SQL_EQ {
		JOUT("SYN: MathOp -> SQL_EQ \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "MathOp", ID_MATHOP, R_MATHOP_9);
	}
	;

OptTableElementList
	: TableElementList {
		JOUT("SYN: OptTableElementList -> TableElementList \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptTableElementList", ID_OPTTABLEELEMENTLIST, R_OPTTABLEELEMENTLIST_1);
	}
	| /* empty */ {
		JOUT("SYN: OptTableElementList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptTableElementList", ID_OPTTABLEELEMENTLIST, R_OPTTABLEELEMENTLIST__NULL);
	}
	;

ColConstraint
	: CONSTRAINT name ColConstraintElem {
		JOUT("SYN: ColConstraint -> CONSTRAINT_name_ColConstraintElem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ColConstraint", ID_COLCONSTRAINT, R_COLCONSTRAINT_1);
	}
	| ColConstraintElem {
		JOUT("SYN: ColConstraint -> ColConstraintElem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColConstraint", ID_COLCONSTRAINT, R_COLCONSTRAINT_2);
	}
	| ConstraintAttr {
		JOUT("SYN: ColConstraint -> ConstraintAttr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColConstraint", ID_COLCONSTRAINT, R_COLCONSTRAINT_3);
	}
	| COLLATE any_name {
		JOUT("SYN: ColConstraint -> COLLATE_any_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ColConstraint", ID_COLCONSTRAINT, R_COLCONSTRAINT_4);
	}
	;

TriggerWhen
	: WHEN SQL_LP a_expr SQL_RP {
		JOUT("SYN: TriggerWhen -> WHEN_SQL_LP_a_expr_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "TriggerWhen", ID_TRIGGERWHEN, R_TRIGGERWHEN_1);
	}
	| /* empty */ {
		JOUT("SYN: TriggerWhen -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "TriggerWhen", ID_TRIGGERWHEN, R_TRIGGERWHEN__NULL);
	}
	;

ExplainStmt
	: EXPLAIN ExplainableStmt {
		JOUT("SYN: ExplainStmt -> EXPLAIN_ExplainableStmt \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ExplainStmt", ID_EXPLAINSTMT, R_EXPLAINSTMT_1);
	}
	| EXPLAIN analyze_keyword opt_verbose ExplainableStmt {
		JOUT("SYN: ExplainStmt -> EXPLAIN_analyze_keyword_opt_verbose_ExplainableStmt \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ExplainStmt", ID_EXPLAINSTMT, R_EXPLAINSTMT_2);
	}
	| EXPLAIN VERBOSE ExplainableStmt {
		JOUT("SYN: ExplainStmt -> EXPLAIN_VERBOSE_ExplainableStmt \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ExplainStmt", ID_EXPLAINSTMT, R_EXPLAINSTMT_3);
	}
	| EXPLAIN SQL_LP explain_option_list SQL_RP ExplainableStmt {
		JOUT("SYN: ExplainStmt -> EXPLAIN_SQL_LP_explain_option_list_SQL_RP_ExplainableStmt \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "ExplainStmt", ID_EXPLAINSTMT, R_EXPLAINSTMT_4);
	}
	;

opt_verbose
	: VERBOSE {
		JOUT("SYN: opt_verbose -> VERBOSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_verbose", ID_OPT_VERBOSE, R_OPT_VERBOSE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_verbose -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_verbose", ID_OPT_VERBOSE, R_OPT_VERBOSE__NULL);
	}
	;

vacuum_option_list
	: vacuum_option_elem {
		JOUT("SYN: vacuum_option_list -> vacuum_option_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "vacuum_option_list", ID_VACUUM_OPTION_LIST, R_VACUUM_OPTION_LIST_1);
	}
	| vacuum_option_list SQL_COMMA vacuum_option_elem {
		JOUT("SYN: vacuum_option_list -> vacuum_option_list_SQL_COMMA_vacuum_option_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "vacuum_option_list", ID_VACUUM_OPTION_LIST, R_VACUUM_OPTION_LIST_2);
	}
	;

defacl_privilege_target
	: TABLES {
		JOUT("SYN: defacl_privilege_target -> TABLES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "defacl_privilege_target", ID_DEFACL_PRIVILEGE_TARGET, R_DEFACL_PRIVILEGE_TARGET_1);
	}
	| FUNCTIONS {
		JOUT("SYN: defacl_privilege_target -> FUNCTIONS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "defacl_privilege_target", ID_DEFACL_PRIVILEGE_TARGET, R_DEFACL_PRIVILEGE_TARGET_2);
	}
	| SEQUENCES {
		JOUT("SYN: defacl_privilege_target -> SEQUENCES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "defacl_privilege_target", ID_DEFACL_PRIVILEGE_TARGET, R_DEFACL_PRIVILEGE_TARGET_3);
	}
	| TYPES_P {
		JOUT("SYN: defacl_privilege_target -> TYPES_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "defacl_privilege_target", ID_DEFACL_PRIVILEGE_TARGET, R_DEFACL_PRIVILEGE_TARGET_4);
	}
	;

AlterTableStmt
	: ALTER TABLE relation_expr alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_TABLE_relation_expr_alter_table_cmds \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_1);
	}
	| ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_TABLE_IF_P_EXISTS_relation_expr_alter_table_cmds \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_2);
	}
	| ALTER INDEX qualified_name alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_INDEX_qualified_name_alter_table_cmds \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_3);
	}
	| ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_INDEX_IF_P_EXISTS_qualified_name_alter_table_cmds \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_4);
	}
	| ALTER SEQUENCE qualified_name alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_SEQUENCE_qualified_name_alter_table_cmds \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_5);
	}
	| ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_SEQUENCE_IF_P_EXISTS_qualified_name_alter_table_cmds \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_6);
	}
	| ALTER VIEW qualified_name alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_VIEW_qualified_name_alter_table_cmds \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_7);
	}
	| ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds {
		JOUT("SYN: AlterTableStmt -> ALTER_VIEW_IF_P_EXISTS_qualified_name_alter_table_cmds \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterTableStmt", ID_ALTERTABLESTMT, R_ALTERTABLESTMT_8);
	}
	;

opt_encoding
	: Sconst {
		JOUT("SYN: opt_encoding -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_encoding", ID_OPT_ENCODING, R_OPT_ENCODING_1);
	}
	| DEFAULT {
		JOUT("SYN: opt_encoding -> DEFAULT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_encoding", ID_OPT_ENCODING, R_OPT_ENCODING_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_encoding -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_encoding", ID_OPT_ENCODING, R_OPT_ENCODING__NULL);
	}
	;

CreateExtensionStmt
	: CREATE EXTENSION name opt_with create_extension_opt_list {
		JOUT("SYN: CreateExtensionStmt -> CREATE_EXTENSION_name_opt_with_create_extension_opt_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CreateExtensionStmt", ID_CREATEEXTENSIONSTMT, R_CREATEEXTENSIONSTMT_1);
	}
	| CREATE EXTENSION IF_P NOT EXISTS name opt_with create_extension_opt_list {
		JOUT("SYN: CreateExtensionStmt -> CREATE_EXTENSION_IF_P_NOT_EXISTS_name_opt_with_create_extension_opt_list \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CreateExtensionStmt", ID_CREATEEXTENSIONSTMT, R_CREATEEXTENSIONSTMT_2);
	}
	;

type_list
	: Typename {
		JOUT("SYN: type_list -> Typename \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "type_list", ID_TYPE_LIST, R_TYPE_LIST_1);
	}
	| type_list SQL_COMMA Typename {
		JOUT("SYN: type_list -> type_list_SQL_COMMA_Typename \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "type_list", ID_TYPE_LIST, R_TYPE_LIST_2);
	}
	;

handler_name
	: name {
		JOUT("SYN: handler_name -> name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "handler_name", ID_HANDLER_NAME, R_HANDLER_NAME_1);
	}
	| name attrs {
		JOUT("SYN: handler_name -> name_attrs \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "handler_name", ID_HANDLER_NAME, R_HANDLER_NAME_2);
	}
	;

CreateForeignTableStmt
	: CREATE FOREIGN TABLE qualified_name OptForeignTableElementList SERVER name create_generic_options {
		JOUT("SYN: CreateForeignTableStmt -> CREATE_FOREIGN_TABLE_qualified_name_OptForeignTableElementList_SERVER_name_create_generic_options \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CreateForeignTableStmt", ID_CREATEFOREIGNTABLESTMT, R_CREATEFOREIGNTABLESTMT_1);
	}
	| CREATE FOREIGN TABLE IF_P NOT EXISTS qualified_name OptForeignTableElementList SERVER name create_generic_options {
		JOUT("SYN: CreateForeignTableStmt -> CREATE_FOREIGN_TABLE_IF_P_NOT_EXISTS_qualified_name_OptForeignTableElementList_SERVER_name_create_generic_options \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "CreateForeignTableStmt", ID_CREATEFOREIGNTABLESTMT, R_CREATEFOREIGNTABLESTMT_2);
	}
	;

opt_nowait
	: NOWAIT {
		JOUT("SYN: opt_nowait -> NOWAIT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_nowait", ID_OPT_NOWAIT, R_OPT_NOWAIT_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_nowait -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_nowait", ID_OPT_NOWAIT, R_OPT_NOWAIT__NULL);
	}
	;

common_table_expr
	: name opt_name_list AS SQL_LP PreparableStmt SQL_RP {
		JOUT("SYN: common_table_expr -> name_opt_name_list_AS_SQL_LP_PreparableStmt_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "common_table_expr", ID_COMMON_TABLE_EXPR, R_COMMON_TABLE_EXPR_1);
	}
	/*
	| EVENT opt_name_list AS SQL_LP PreparableStmt SQL_RP {
		JOUT("SYN: common_table_expr -> EVENT_opt_name_list_AS_SQL_LP_PreparableStmt_SQL_RP \n");
	}
	*/
	;

opt_using
	: USING {
		JOUT("SYN: opt_using -> USING \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_using", ID_OPT_USING, R_OPT_USING_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_using -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_using", ID_OPT_USING, R_OPT_USING__NULL);
	}
	;

OptSchemaName
	: ColId {
		JOUT("SYN: OptSchemaName -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptSchemaName", ID_OPTSCHEMANAME, R_OPTSCHEMANAME_1);
	}
	| /* empty */ {
		JOUT("SYN: OptSchemaName -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptSchemaName", ID_OPTSCHEMANAME, R_OPTSCHEMANAME__NULL);
	}
	;

opt_drop_behavior
	: CASCADE {
		JOUT("SYN: opt_drop_behavior -> CASCADE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_drop_behavior", ID_OPT_DROP_BEHAVIOR, R_OPT_DROP_BEHAVIOR_1);
	}
	| RESTRICT {
		JOUT("SYN: opt_drop_behavior -> RESTRICT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_drop_behavior", ID_OPT_DROP_BEHAVIOR, R_OPT_DROP_BEHAVIOR_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_drop_behavior -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_drop_behavior", ID_OPT_DROP_BEHAVIOR, R_OPT_DROP_BEHAVIOR__NULL);
	}
	;

xml_attribute_el
	: a_expr AS ColLabel {
		JOUT("SYN: xml_attribute_el -> a_expr_AS_ColLabel \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "xml_attribute_el", ID_XML_ATTRIBUTE_EL, R_XML_ATTRIBUTE_EL_1);
	}
	| a_expr {
		JOUT("SYN: xml_attribute_el -> a_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "xml_attribute_el", ID_XML_ATTRIBUTE_EL, R_XML_ATTRIBUTE_EL_2);
	}
	;

copy_from
	: FROM {
		JOUT("SYN: copy_from -> FROM \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_from", ID_COPY_FROM, R_COPY_FROM_1);
	}
	| TO {
		JOUT("SYN: copy_from -> TO \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_from", ID_COPY_FROM, R_COPY_FROM_2);
	}
	;

DefineStmt
	: CREATE AGGREGATE func_name aggr_args definition {
		JOUT("SYN: DefineStmt -> CREATE_AGGREGATE_func_name_aggr_args_definition \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_1);
	}
	| CREATE AGGREGATE func_name old_aggr_definition {
		JOUT("SYN: DefineStmt -> CREATE_AGGREGATE_func_name_old_aggr_definition \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_2);
	}
	| CREATE OPERATOR any_operator definition {
		JOUT("SYN: DefineStmt -> CREATE_OPERATOR_any_operator_definition \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_3);
	}
	| CREATE TYPE_P any_name definition {
		JOUT("SYN: DefineStmt -> CREATE_TYPE_P_any_name_definition \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_4);
	}
	| CREATE TYPE_P any_name {
		JOUT("SYN: DefineStmt -> CREATE_TYPE_P_any_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_5);
	}
	| CREATE TYPE_P any_name AS SQL_LP OptTableFuncElementList SQL_RP {
		JOUT("SYN: DefineStmt -> CREATE_TYPE_P_any_name_AS_SQL_LP_OptTableFuncElementList_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_6);
	}
	| CREATE TYPE_P any_name AS ENUM_P SQL_LP opt_enum_val_list SQL_RP {
		JOUT("SYN: DefineStmt -> CREATE_TYPE_P_any_name_AS_ENUM_P_SQL_LP_opt_enum_val_list_SQL_RP \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_7);
	}
	| CREATE TYPE_P any_name AS RANGE definition {
		JOUT("SYN: DefineStmt -> CREATE_TYPE_P_any_name_AS_RANGE_definition \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_8);
	}
	| CREATE TEXT_P SEARCH PARSER any_name definition {
		JOUT("SYN: DefineStmt -> CREATE_TEXT_P_SEARCH_PARSER_any_name_definition \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_9);
	}
	| CREATE TEXT_P SEARCH DICTIONARY any_name definition {
		JOUT("SYN: DefineStmt -> CREATE_TEXT_P_SEARCH_DICTIONARY_any_name_definition \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_10);
	}
	| CREATE TEXT_P SEARCH TEMPLATE any_name definition {
		JOUT("SYN: DefineStmt -> CREATE_TEXT_P_SEARCH_TEMPLATE_any_name_definition \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_11);
	}
	| CREATE TEXT_P SEARCH CONFIGURATION any_name definition {
		JOUT("SYN: DefineStmt -> CREATE_TEXT_P_SEARCH_CONFIGURATION_any_name_definition \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_12);
	}
	| CREATE COLLATION any_name definition {
		JOUT("SYN: DefineStmt -> CREATE_COLLATION_any_name_definition \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_13);
	}
	| CREATE COLLATION any_name FROM any_name {
		JOUT("SYN: DefineStmt -> CREATE_COLLATION_any_name_FROM_any_name \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DefineStmt", ID_DEFINESTMT, R_DEFINESTMT_14);
	}
	;

CreatedbStmt
	: CREATE DATABASE database_name opt_with createdb_opt_list {
		JOUT("SYN: CreatedbStmt -> CREATE_DATABASE_database_name_opt_with_createdb_opt_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CreatedbStmt", ID_CREATEDBSTMT, R_CREATEDBSTMT_1);
	}
	;

set_rest_more
	: var_name TO var_list {
		JOUT("SYN: set_rest_more -> var_name_TO_var_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_1);
	}
	| var_name SQL_EQ var_list {
		JOUT("SYN: set_rest_more -> var_name_SQL_EQ_var_list \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_2);
	}
	| var_name TO DEFAULT {
		JOUT("SYN: set_rest_more -> var_name_TO_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_3);
	}
	| var_name SQL_EQ DEFAULT {
		JOUT("SYN: set_rest_more -> var_name_SQL_EQ_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_4);
	}
	| var_name FROM CURRENT_P {
		JOUT("SYN: set_rest_more -> var_name_FROM_CURRENT_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_5);
	}
	| TIME ZONE zone_value {
		JOUT("SYN: set_rest_more -> TIME_ZONE_zone_value \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_6);
	}
	| CATALOG_P Sconst {
		JOUT("SYN: set_rest_more -> CATALOG_P_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_7);
	}
	| SCHEMA Sconst {
		JOUT("SYN: set_rest_more -> SCHEMA_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_8);
	}
	| NAMES opt_encoding {
		JOUT("SYN: set_rest_more -> NAMES_opt_encoding \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_9);
	}
	| ROLE ColId_or_Sconst {
		JOUT("SYN: set_rest_more -> ROLE_ColId_or_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_10);
	}
	| SESSION AUTHORIZATION ColId_or_Sconst {
		JOUT("SYN: set_rest_more -> SESSION_AUTHORIZATION_ColId_or_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_11);
	}
	| SESSION AUTHORIZATION DEFAULT {
		JOUT("SYN: set_rest_more -> SESSION_AUTHORIZATION_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_12);
	}
	| XML_P OPTION document_or_content {
		JOUT("SYN: set_rest_more -> XML_P_OPTION_document_or_content \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_13);
	}
	| TRANSACTION SNAPSHOT Sconst {
		JOUT("SYN: set_rest_more -> TRANSACTION_SNAPSHOT_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "set_rest_more", ID_SET_REST_MORE, R_SET_REST_MORE_14);
	}
	;

SignedIconst
	: Iconst {
		JOUT("SYN: SignedIconst -> Iconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SignedIconst", ID_SIGNEDICONST, R_SIGNEDICONST_1);
	}
	| SQL_PLUS Iconst {
		JOUT("SYN: SignedIconst -> SQL_PLUS_Iconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SignedIconst", ID_SIGNEDICONST, R_SIGNEDICONST_2);
	}
	| SQL_MINUS Iconst {
		JOUT("SYN: SignedIconst -> SQL_MINUS_Iconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "SignedIconst", ID_SIGNEDICONST, R_SIGNEDICONST_3);
	}
	;

OptWith
	: WITH reloptions {
		JOUT("SYN: OptWith -> WITH_reloptions \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptWith", ID_OPTWITH, R_OPTWITH_1);
	}
	| WITH OIDS {
		JOUT("SYN: OptWith -> WITH_OIDS \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptWith", ID_OPTWITH, R_OPTWITH_2);
	}
	| WITHOUT OIDS {
		JOUT("SYN: OptWith -> WITHOUT_OIDS \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptWith", ID_OPTWITH, R_OPTWITH_3);
	}
	| /* empty */ {
		JOUT("SYN: OptWith -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptWith", ID_OPTWITH, R_OPTWITH__NULL);
	}
	;

alter_type_cmds
	: alter_type_cmd {
		JOUT("SYN: alter_type_cmds -> alter_type_cmd \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "alter_type_cmds", ID_ALTER_TYPE_CMDS, R_ALTER_TYPE_CMDS_1);
	}
	| alter_type_cmds SQL_COMMA alter_type_cmd {
		JOUT("SYN: alter_type_cmds -> alter_type_cmds_SQL_COMMA_alter_type_cmd \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "alter_type_cmds", ID_ALTER_TYPE_CMDS, R_ALTER_TYPE_CMDS_2);
	}
	;

insert_column_list
	: insert_column_item {
		JOUT("SYN: insert_column_list -> insert_column_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "insert_column_list", ID_INSERT_COLUMN_LIST, R_INSERT_COLUMN_LIST_1);
	}
	| insert_column_list SQL_COMMA insert_column_item {
		JOUT("SYN: insert_column_list -> insert_column_list_SQL_COMMA_insert_column_item \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "insert_column_list", ID_INSERT_COLUMN_LIST, R_INSERT_COLUMN_LIST_2);
	}
	;

schema_stmt
	: CreateStmt {
		JOUT("SYN: schema_stmt -> CreateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "schema_stmt", ID_SCHEMA_STMT, R_SCHEMA_STMT_1);
	}
	| IndexStmt {
		JOUT("SYN: schema_stmt -> IndexStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "schema_stmt", ID_SCHEMA_STMT, R_SCHEMA_STMT_2);
	}
	| CreateSeqStmt {
		JOUT("SYN: schema_stmt -> CreateSeqStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "schema_stmt", ID_SCHEMA_STMT, R_SCHEMA_STMT_3);
	}
	| CreateTrigStmt {
		JOUT("SYN: schema_stmt -> CreateTrigStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "schema_stmt", ID_SCHEMA_STMT, R_SCHEMA_STMT_4);
	}
	| GrantStmt {
		JOUT("SYN: schema_stmt -> GrantStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "schema_stmt", ID_SCHEMA_STMT, R_SCHEMA_STMT_5);
	}
	| ViewStmt {
		JOUT("SYN: schema_stmt -> ViewStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "schema_stmt", ID_SCHEMA_STMT, R_SCHEMA_STMT_6);
	}
	;

frame_extent
	: frame_bound {
		JOUT("SYN: frame_extent -> frame_bound \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "frame_extent", ID_FRAME_EXTENT, R_FRAME_EXTENT_1);
	}
	| BETWEEN frame_bound AND frame_bound {
		JOUT("SYN: frame_extent -> BETWEEN_frame_bound_AND_frame_bound \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "frame_extent", ID_FRAME_EXTENT, R_FRAME_EXTENT_2);
	}
	;

AnalyzeStmt
	: analyze_keyword opt_verbose {
		JOUT("SYN: AnalyzeStmt -> analyze_keyword_opt_verbose \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "AnalyzeStmt", ID_ANALYZESTMT, R_ANALYZESTMT_1);
	}
	| analyze_keyword opt_verbose qualified_name opt_name_list {
		JOUT("SYN: AnalyzeStmt -> analyze_keyword_opt_verbose_qualified_name_opt_name_list \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "AnalyzeStmt", ID_ANALYZESTMT, R_ANALYZESTMT_2);
	}
	;

GrantStmt
	: GRANT privileges ON privilege_target TO grantee_list opt_grant_grant_option {
		JOUT("SYN: GrantStmt -> GRANT_privileges_ON_privilege_target_TO_grantee_list_opt_grant_grant_option \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "GrantStmt", ID_GRANTSTMT, R_GRANTSTMT_1);
	}
	;

table_func_column_list
	: table_func_column {
		JOUT("SYN: table_func_column_list -> table_func_column \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "table_func_column_list", ID_TABLE_FUNC_COLUMN_LIST, R_TABLE_FUNC_COLUMN_LIST_1);
	}
	| table_func_column_list SQL_COMMA table_func_column {
		JOUT("SYN: table_func_column_list -> table_func_column_list_SQL_COMMA_table_func_column \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "table_func_column_list", ID_TABLE_FUNC_COLUMN_LIST, R_TABLE_FUNC_COLUMN_LIST_2);
	}
	;

opt_reloptions
	: WITH reloptions {
		JOUT("SYN: opt_reloptions -> WITH_reloptions \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_reloptions", ID_OPT_RELOPTIONS, R_OPT_RELOPTIONS_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_reloptions -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_reloptions", ID_OPT_RELOPTIONS, R_OPT_RELOPTIONS__NULL);
	}
	;

character
	: CHARACTER opt_varying {
		JOUT("SYN: character -> CHARACTER_opt_varying \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "character", ID_CHARACTER, R_CHARACTER_1);
	}
	| CHAR_P opt_varying {
		JOUT("SYN: character -> CHAR_P_opt_varying \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "character", ID_CHARACTER, R_CHARACTER_2);
	}
	| VARCHAR {
		JOUT("SYN: character -> VARCHAR \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "character", ID_CHARACTER, R_CHARACTER_3);
	}
	| NATIONAL CHARACTER opt_varying {
		JOUT("SYN: character -> NATIONAL_CHARACTER_opt_varying \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "character", ID_CHARACTER, R_CHARACTER_4);
	}
	| NATIONAL CHAR_P opt_varying {
		JOUT("SYN: character -> NATIONAL_CHAR_P_opt_varying \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "character", ID_CHARACTER, R_CHARACTER_5);
	}
	| NCHAR opt_varying {
		JOUT("SYN: character -> NCHAR_opt_varying \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "character", ID_CHARACTER, R_CHARACTER_6);
	}
	| TD_LONG VARCHAR {
		// todo3
		JOUT("SYN: character -> TD_LONG VARCHAR \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "character", ID_CHARACTER, R_CHARACTER_7);
	}
	;

CreateAssertStmt
	: CREATE ASSERTION name CHECK SQL_LP a_expr SQL_RP ConstraintAttributeSpec {
		JOUT("SYN: CreateAssertStmt -> CREATE_ASSERTION_name_CHECK_SQL_LP_a_expr_SQL_RP_ConstraintAttributeSpec \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "CreateAssertStmt", ID_CREATEASSERTSTMT, R_CREATEASSERTSTMT_1);
	}
	;

OptTempTableName
	: TEMPORARY opt_table qualified_name {
		JOUT("SYN: OptTempTableName -> TEMPORARY_opt_table_qualified_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_1);
	}
	| TEMP opt_table qualified_name {
		JOUT("SYN: OptTempTableName -> TEMP_opt_table_qualified_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_2);
	}
	| LOCAL TEMPORARY opt_table qualified_name {
		JOUT("SYN: OptTempTableName -> LOCAL_TEMPORARY_opt_table_qualified_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_3);
	}
	| LOCAL TEMP opt_table qualified_name {
		JOUT("SYN: OptTempTableName -> LOCAL_TEMP_opt_table_qualified_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_4);
	}
	| GLOBAL TEMPORARY opt_table qualified_name {
		JOUT("SYN: OptTempTableName -> GLOBAL_TEMPORARY_opt_table_qualified_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_5);
	}
	| GLOBAL TEMP opt_table qualified_name {
		JOUT("SYN: OptTempTableName -> GLOBAL_TEMP_opt_table_qualified_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_6);
	}
	| UNLOGGED opt_table qualified_name {
		JOUT("SYN: OptTempTableName -> UNLOGGED_opt_table_qualified_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_7);
	}
	| TABLE qualified_name {
		JOUT("SYN: OptTempTableName -> TABLE_qualified_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_8);
	}
	| qualified_name {
		JOUT("SYN: OptTempTableName -> qualified_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptTempTableName", ID_OPTTEMPTABLENAME, R_OPTTEMPTABLENAME_9);
	}
	;

opt_freeze
	: FREEZE {
		JOUT("SYN: opt_freeze -> FREEZE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_freeze", ID_OPT_FREEZE, R_OPT_FREEZE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_freeze -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_freeze", ID_OPT_FREEZE, R_OPT_FREEZE__NULL);
	}
	;

func_args_with_defaults_list
	: func_arg_with_default {
		JOUT("SYN: func_args_with_defaults_list -> func_arg_with_default \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_args_with_defaults_list", ID_FUNC_ARGS_WITH_DEFAULTS_LIST, R_FUNC_ARGS_WITH_DEFAULTS_LIST_1);
	}
	| func_args_with_defaults_list SQL_COMMA func_arg_with_default {
		JOUT("SYN: func_args_with_defaults_list -> func_args_with_defaults_list_SQL_COMMA_func_arg_with_default \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_args_with_defaults_list", ID_FUNC_ARGS_WITH_DEFAULTS_LIST, R_FUNC_ARGS_WITH_DEFAULTS_LIST_2);
	}
	;

OptConsTableSpace
	: USING INDEX TABLESPACE name {
		JOUT("SYN: OptConsTableSpace -> USING_INDEX_TABLESPACE_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "OptConsTableSpace", ID_OPTCONSTABLESPACE, R_OPTCONSTABLESPACE_1);
	}
	| /* empty */ {
		JOUT("SYN: OptConsTableSpace -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptConsTableSpace", ID_OPTCONSTABLESPACE, R_OPTCONSTABLESPACE__NULL);
	}
	;

AlterTSConfigurationStmt
	: ALTER TEXT_P SEARCH CONFIGURATION any_name ADD_P MAPPING FOR name_list WITH any_name_list {
		JOUT("SYN: AlterTSConfigurationStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_ADD_P_MAPPING_FOR_name_list_WITH_any_name_list \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "AlterTSConfigurationStmt", ID_ALTERTSCONFIGURATIONSTMT, R_ALTERTSCONFIGURATIONSTMT_1);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name ALTER MAPPING FOR name_list WITH any_name_list {
		JOUT("SYN: AlterTSConfigurationStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_ALTER_MAPPING_FOR_name_list_WITH_any_name_list \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "AlterTSConfigurationStmt", ID_ALTERTSCONFIGURATIONSTMT, R_ALTERTSCONFIGURATIONSTMT_2);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name ALTER MAPPING REPLACE any_name WITH any_name {
		JOUT("SYN: AlterTSConfigurationStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_ALTER_MAPPING_REPLACE_any_name_WITH_any_name \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "AlterTSConfigurationStmt", ID_ALTERTSCONFIGURATIONSTMT, R_ALTERTSCONFIGURATIONSTMT_3);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name ALTER MAPPING FOR name_list REPLACE any_name WITH any_name {
		JOUT("SYN: AlterTSConfigurationStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_ALTER_MAPPING_FOR_name_list_REPLACE_any_name_WITH_any_name \n");
		$$ = cons_subtree(13, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
		set_content(&$$, @$.first_line, "AlterTSConfigurationStmt", ID_ALTERTSCONFIGURATIONSTMT, R_ALTERTSCONFIGURATIONSTMT_4);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name DROP MAPPING FOR name_list {
		JOUT("SYN: AlterTSConfigurationStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_DROP_MAPPING_FOR_name_list \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "AlterTSConfigurationStmt", ID_ALTERTSCONFIGURATIONSTMT, R_ALTERTSCONFIGURATIONSTMT_5);
	}
	| ALTER TEXT_P SEARCH CONFIGURATION any_name DROP MAPPING IF_P EXISTS FOR name_list {
		JOUT("SYN: AlterTSConfigurationStmt -> ALTER_TEXT_P_SEARCH_CONFIGURATION_any_name_DROP_MAPPING_IF_P_EXISTS_FOR_name_list \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "AlterTSConfigurationStmt", ID_ALTERTSCONFIGURATIONSTMT, R_ALTERTSCONFIGURATIONSTMT_6);
	}
	;

RemoveFuncStmt
	: DROP FUNCTION func_name func_args opt_drop_behavior {
		JOUT("SYN: RemoveFuncStmt -> DROP_FUNCTION_func_name_func_args_opt_drop_behavior \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "RemoveFuncStmt", ID_REMOVEFUNCSTMT, R_REMOVEFUNCSTMT_1);
	}
	| DROP FUNCTION IF_P EXISTS func_name func_args opt_drop_behavior {
		JOUT("SYN: RemoveFuncStmt -> DROP_FUNCTION_IF_P_EXISTS_func_name_func_args_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "RemoveFuncStmt", ID_REMOVEFUNCSTMT, R_REMOVEFUNCSTMT_2);
	}
	;

explain_option_name
	: ColId {
		JOUT("SYN: explain_option_name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "explain_option_name", ID_EXPLAIN_OPTION_NAME, R_EXPLAIN_OPTION_NAME_1);
	}
	| analyze_keyword {
		JOUT("SYN: explain_option_name -> analyze_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "explain_option_name", ID_EXPLAIN_OPTION_NAME, R_EXPLAIN_OPTION_NAME_2);
	}
	| VERBOSE {
		JOUT("SYN: explain_option_name -> VERBOSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "explain_option_name", ID_EXPLAIN_OPTION_NAME, R_EXPLAIN_OPTION_NAME_3);
	}
	;

createdb_opt_item
	: TABLESPACE opt_equal name {
		JOUT("SYN: createdb_opt_item -> TABLESPACE_opt_equal_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_1);
	}
	| TABLESPACE opt_equal DEFAULT {
		JOUT("SYN: createdb_opt_item -> TABLESPACE_opt_equal_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_2);
	}
	| LOCATION opt_equal Sconst {
		JOUT("SYN: createdb_opt_item -> LOCATION_opt_equal_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_3);
	}
	| LOCATION opt_equal DEFAULT {
		JOUT("SYN: createdb_opt_item -> LOCATION_opt_equal_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_4);
	}
	| TEMPLATE opt_equal name {
		JOUT("SYN: createdb_opt_item -> TEMPLATE_opt_equal_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_5);
	}
	| TEMPLATE opt_equal DEFAULT {
		JOUT("SYN: createdb_opt_item -> TEMPLATE_opt_equal_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_6);
	}
	| ENCODING opt_equal Sconst {
		JOUT("SYN: createdb_opt_item -> ENCODING_opt_equal_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_7);
	}
	| ENCODING opt_equal Iconst {
		JOUT("SYN: createdb_opt_item -> ENCODING_opt_equal_Iconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_8);
	}
	| ENCODING opt_equal DEFAULT {
		JOUT("SYN: createdb_opt_item -> ENCODING_opt_equal_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_9);
	}
	| LC_COLLATE_P opt_equal Sconst {
		JOUT("SYN: createdb_opt_item -> LC_COLLATE_P_opt_equal_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_10);
	}
	| LC_COLLATE_P opt_equal DEFAULT {
		JOUT("SYN: createdb_opt_item -> LC_COLLATE_P_opt_equal_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_11);
	}
	| LC_CTYPE_P opt_equal Sconst {
		JOUT("SYN: createdb_opt_item -> LC_CTYPE_P_opt_equal_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_12);
	}
	| LC_CTYPE_P opt_equal DEFAULT {
		JOUT("SYN: createdb_opt_item -> LC_CTYPE_P_opt_equal_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_13);
	}
	| CONNECTION LIMIT opt_equal SignedIconst {
		JOUT("SYN: createdb_opt_item -> CONNECTION_LIMIT_opt_equal_SignedIconst \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_14);
	}
	| OWNER opt_equal name {
		JOUT("SYN: createdb_opt_item -> OWNER_opt_equal_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_15);
	}
	| OWNER opt_equal DEFAULT {
		JOUT("SYN: createdb_opt_item -> OWNER_opt_equal_DEFAULT \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "createdb_opt_item", ID_CREATEDB_OPT_ITEM, R_CREATEDB_OPT_ITEM_16);
	}
	;

window_definition
	: ColId AS window_specification {
		JOUT("SYN: window_definition -> ColId_AS_window_specification \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "window_definition", ID_WINDOW_DEFINITION, R_WINDOW_DEFINITION_1);
	}
	;

opclass_item_list
	: opclass_item {
		JOUT("SYN: opclass_item_list -> opclass_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opclass_item_list", ID_OPCLASS_ITEM_LIST, R_OPCLASS_ITEM_LIST_1);
	}
	| opclass_item_list SQL_COMMA opclass_item {
		JOUT("SYN: opclass_item_list -> opclass_item_list_SQL_COMMA_opclass_item \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opclass_item_list", ID_OPCLASS_ITEM_LIST, R_OPCLASS_ITEM_LIST_2);
	}
	;

NumericOnly
	: FCONST {
		JOUT("SYN: NumericOnly -> FCONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "NumericOnly", ID_NUMERICONLY, R_NUMERICONLY_1);
	}
	| SQL_MINUS FCONST {
		JOUT("SYN: NumericOnly -> SQL_MINUS_FCONST \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "NumericOnly", ID_NUMERICONLY, R_NUMERICONLY_2);
	}
	| SignedIconst {
		JOUT("SYN: NumericOnly -> SignedIconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "NumericOnly", ID_NUMERICONLY, R_NUMERICONLY_3);
	}
	;

array_expr_list
	: array_expr {
		JOUT("SYN: array_expr_list -> array_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "array_expr_list", ID_ARRAY_EXPR_LIST, R_ARRAY_EXPR_LIST_1);
	}
	| array_expr_list SQL_COMMA array_expr {
		JOUT("SYN: array_expr_list -> array_expr_list_SQL_COMMA_array_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "array_expr_list", ID_ARRAY_EXPR_LIST, R_ARRAY_EXPR_LIST_2);
	}
	;

opt_by
	: BY {
		JOUT("SYN: opt_by -> BY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_by", ID_OPT_BY, R_OPT_BY_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_by -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_by", ID_OPT_BY, R_OPT_BY__NULL);
	}
	;

param_name
	: type_function_name {
		JOUT("SYN: param_name -> type_function_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "param_name", ID_PARAM_NAME, R_PARAM_NAME_1);
	}
	;

joined_table
	: SQL_LP joined_table SQL_RP {
		JOUT("SYN: joined_table -> SQL_LP_joined_table_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "joined_table", ID_JOINED_TABLE, R_JOINED_TABLE_1);
	}
	| table_ref CROSS JOIN table_ref {
		JOUT("SYN: joined_table -> table_ref_CROSS_JOIN_table_ref \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "joined_table", ID_JOINED_TABLE, R_JOINED_TABLE_2);
	}
	| table_ref join_type JOIN table_ref join_qual {
		JOUT("SYN: joined_table -> table_ref_join_type_JOIN_table_ref_join_qual \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "joined_table", ID_JOINED_TABLE, R_JOINED_TABLE_3);
	}
	| table_ref JOIN table_ref join_qual {
		JOUT("SYN: joined_table -> table_ref_JOIN_table_ref_join_qual \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "joined_table", ID_JOINED_TABLE, R_JOINED_TABLE_4);
	}
	| table_ref NATURAL join_type JOIN table_ref {
		JOUT("SYN: joined_table -> table_ref_NATURAL_join_type_JOIN_table_ref \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "joined_table", ID_JOINED_TABLE, R_JOINED_TABLE_5);
	}
	| table_ref NATURAL JOIN table_ref {
		JOUT("SYN: joined_table -> table_ref_NATURAL_JOIN_table_ref \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "joined_table", ID_JOINED_TABLE, R_JOINED_TABLE_6);
	}
	;

TableLikeOption
	: DEFAULTS {
		JOUT("SYN: TableLikeOption -> DEFAULTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableLikeOption", ID_TABLELIKEOPTION, R_TABLELIKEOPTION_1);
	}
	| CONSTRAINTS {
		JOUT("SYN: TableLikeOption -> CONSTRAINTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableLikeOption", ID_TABLELIKEOPTION, R_TABLELIKEOPTION_2);
	}
	| INDEXES {
		JOUT("SYN: TableLikeOption -> INDEXES \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableLikeOption", ID_TABLELIKEOPTION, R_TABLELIKEOPTION_3);
	}
	| STORAGE {
		JOUT("SYN: TableLikeOption -> STORAGE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableLikeOption", ID_TABLELIKEOPTION, R_TABLELIKEOPTION_4);
	}
	| COMMENTS {
		JOUT("SYN: TableLikeOption -> COMMENTS \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableLikeOption", ID_TABLELIKEOPTION, R_TABLELIKEOPTION_5);
	}
	| ALL {
		JOUT("SYN: TableLikeOption -> ALL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TableLikeOption", ID_TABLELIKEOPTION, R_TABLELIKEOPTION_6);
	}
	;

create_extension_opt_item
	: SCHEMA name {
		JOUT("SYN: create_extension_opt_item -> SCHEMA_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "create_extension_opt_item", ID_CREATE_EXTENSION_OPT_ITEM, R_CREATE_EXTENSION_OPT_ITEM_1);
	}
	| VERSION_P ColId_or_Sconst {
		JOUT("SYN: create_extension_opt_item -> VERSION_P_ColId_or_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "create_extension_opt_item", ID_CREATE_EXTENSION_OPT_ITEM, R_CREATE_EXTENSION_OPT_ITEM_2);
	}
	| FROM ColId_or_Sconst {
		JOUT("SYN: create_extension_opt_item -> FROM_ColId_or_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "create_extension_opt_item", ID_CREATE_EXTENSION_OPT_ITEM, R_CREATE_EXTENSION_OPT_ITEM_3);
	}
	;

fetch_args
	: cursor_name {
		JOUT("SYN: fetch_args -> cursor_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_1);
	}
	| from_in cursor_name {
		JOUT("SYN: fetch_args -> from_in_cursor_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_2);
	}
	| NEXT opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> NEXT_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_3);
	}
	| PRIOR opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> PRIOR_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_4);
	}
	| FIRST_P opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> FIRST_P_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_5);
	}
	| LAST_P opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> LAST_P_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_6);
	}
	| ABSOLUTE_P SignedIconst opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> ABSOLUTE_P_SignedIconst_opt_from_in_cursor_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_7);
	}
	| RELATIVE_P SignedIconst opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> RELATIVE_P_SignedIconst_opt_from_in_cursor_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_8);
	}
	| SignedIconst opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> SignedIconst_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_9);
	}
	| ALL opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> ALL_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_10);
	}
	| FORWARD opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> FORWARD_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_11);
	}
	| FORWARD SignedIconst opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> FORWARD_SignedIconst_opt_from_in_cursor_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_12);
	}
	| FORWARD ALL opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> FORWARD_ALL_opt_from_in_cursor_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_13);
	}
	| BACKWARD opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> BACKWARD_opt_from_in_cursor_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_14);
	}
	| BACKWARD SignedIconst opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> BACKWARD_SignedIconst_opt_from_in_cursor_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_15);
	}
	| BACKWARD ALL opt_from_in cursor_name {
		JOUT("SYN: fetch_args -> BACKWARD_ALL_opt_from_in_cursor_name \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "fetch_args", ID_FETCH_ARGS, R_FETCH_ARGS_16);
	}
	;

select_no_parens
	: simple_select {
		JOUT("SYN: select_no_parens -> simple_select \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_1);
	}
	| select_clause sort_clause {
		JOUT("SYN: select_no_parens -> select_clause_sort_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_2);
	}
	| select_clause opt_sort_clause for_locking_clause opt_select_limit {
		JOUT("SYN: select_no_parens -> select_clause_opt_sort_clause_for_locking_clause_opt_select_limit \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_3);
	}
	| select_clause opt_sort_clause select_limit opt_for_locking_clause {
		JOUT("SYN: select_no_parens -> select_clause_opt_sort_clause_select_limit_opt_for_locking_clause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_4);
	}
	| with_clause select_clause {
		JOUT("SYN: select_no_parens -> with_clause_select_clause \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_5);
	}
	| with_clause select_clause sort_clause {
		JOUT("SYN: select_no_parens -> with_clause_select_clause_sort_clause \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_6);
	}
	| with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit {
		JOUT("SYN: select_no_parens -> with_clause_select_clause_opt_sort_clause_for_locking_clause_opt_select_limit \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_7);
	}
	| with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause {
		JOUT("SYN: select_no_parens -> with_clause_select_clause_opt_sort_clause_select_limit_opt_for_locking_clause \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "select_no_parens", ID_SELECT_NO_PARENS, R_SELECT_NO_PARENS_8);
	}
	;

locked_rels_list
	: OF qualified_name_list {
		JOUT("SYN: locked_rels_list -> OF_qualified_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "locked_rels_list", ID_LOCKED_RELS_LIST, R_LOCKED_RELS_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: locked_rels_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "locked_rels_list", ID_LOCKED_RELS_LIST, R_LOCKED_RELS_LIST__NULL);
	}
	;

foreign_server_version
	: VERSION_P Sconst {
		JOUT("SYN: foreign_server_version -> VERSION_P_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "foreign_server_version", ID_FOREIGN_SERVER_VERSION, R_FOREIGN_SERVER_VERSION_1);
	}
	| VERSION_P NULL_P {
		JOUT("SYN: foreign_server_version -> VERSION_P_NULL_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "foreign_server_version", ID_FOREIGN_SERVER_VERSION, R_FOREIGN_SERVER_VERSION_2);
	}
	;

UpdateStmt
	: opt_with_clause UPDATE relation_expr_opt_alias from_clause SET set_clause_list where_or_current_clause returning_clause {
		JOUT("SYN: UpdateStmt -> opt_with_clause_UPDATE_relation_expr_opt_alias_SET_set_clause_list_from_clause_where_or_current_clause_returning_clause \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "UpdateStmt", ID_UPDATESTMT, R_UPDATESTMT_1);
	}
	;

opt_boolean_or_string
	: TRUE_P {
		JOUT("SYN: opt_boolean_or_string -> TRUE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_boolean_or_string", ID_OPT_BOOLEAN_OR_STRING, R_OPT_BOOLEAN_OR_STRING_1);
	}
	| FALSE_P {
		JOUT("SYN: opt_boolean_or_string -> FALSE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_boolean_or_string", ID_OPT_BOOLEAN_OR_STRING, R_OPT_BOOLEAN_OR_STRING_2);
	}
	| ON {
		JOUT("SYN: opt_boolean_or_string -> ON \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_boolean_or_string", ID_OPT_BOOLEAN_OR_STRING, R_OPT_BOOLEAN_OR_STRING_3);
	}
	| ColId_or_Sconst {
		JOUT("SYN: opt_boolean_or_string -> ColId_or_Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_boolean_or_string", ID_OPT_BOOLEAN_OR_STRING, R_OPT_BOOLEAN_OR_STRING_4);
	}
	;

TriggerFuncArg
	: Iconst {
		JOUT("SYN: TriggerFuncArg -> Iconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerFuncArg", ID_TRIGGERFUNCARG, R_TRIGGERFUNCARG_1);
	}
	| FCONST {
		JOUT("SYN: TriggerFuncArg -> FCONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerFuncArg", ID_TRIGGERFUNCARG, R_TRIGGERFUNCARG_2);
	}
	| Sconst {
		JOUT("SYN: TriggerFuncArg -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerFuncArg", ID_TRIGGERFUNCARG, R_TRIGGERFUNCARG_3);
	}
	| ColLabel {
		JOUT("SYN: TriggerFuncArg -> ColLabel \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerFuncArg", ID_TRIGGERFUNCARG, R_TRIGGERFUNCARG_4);
	}
	;

opt_unique
	: UNIQUE {
		JOUT("SYN: opt_unique -> UNIQUE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_unique", ID_OPT_UNIQUE, R_OPT_UNIQUE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_unique -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_unique", ID_OPT_UNIQUE, R_OPT_UNIQUE__NULL);
	}
	;

simple_select
	: SELECT opt_distinct target_list into_clause from_clause where_clause group_clause having_clause window_clause {
		JOUT("SYN: simple_select -> SELECT_opt_distinct_target_list_into_clause_from_clause_where_clause_group_clause_having_clause_window_clause \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "simple_select", ID_SIMPLE_SELECT, R_SIMPLE_SELECT_1);
	}
	| values_clause {
		JOUT("SYN: simple_select -> values_clause \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "simple_select", ID_SIMPLE_SELECT, R_SIMPLE_SELECT_2);
	}
	| TABLE relation_expr {
		JOUT("SYN: simple_select -> TABLE_relation_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "simple_select", ID_SIMPLE_SELECT, R_SIMPLE_SELECT_3);
	}
	| select_clause UNION opt_all select_clause {
		JOUT("SYN: simple_select -> select_clause_UNION_opt_all_select_clause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "simple_select", ID_SIMPLE_SELECT, R_SIMPLE_SELECT_4);
	}
	| select_clause INTERSECT opt_all select_clause {
		JOUT("SYN: simple_select -> select_clause_INTERSECT_opt_all_select_clause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "simple_select", ID_SIMPLE_SELECT, R_SIMPLE_SELECT_5);
	}
	| select_clause EXCEPT opt_all select_clause {
		JOUT("SYN: simple_select -> select_clause_EXCEPT_opt_all_select_clause \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "simple_select", ID_SIMPLE_SELECT, R_SIMPLE_SELECT_6);
	}
	;

window_definition_list
	: window_definition {
		JOUT("SYN: window_definition_list -> window_definition \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "window_definition_list", ID_WINDOW_DEFINITION_LIST, R_WINDOW_DEFINITION_LIST_1);
	}
	| window_definition_list SQL_COMMA window_definition {
		JOUT("SYN: window_definition_list -> window_definition_list_SQL_COMMA_window_definition \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "window_definition_list", ID_WINDOW_DEFINITION_LIST, R_WINDOW_DEFINITION_LIST_2);
	}
	;

transaction_mode_list
	: transaction_mode_item {
		JOUT("SYN: transaction_mode_list -> transaction_mode_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "transaction_mode_list", ID_TRANSACTION_MODE_LIST, R_TRANSACTION_MODE_LIST_1);
	}
	| transaction_mode_list SQL_COMMA transaction_mode_item {
		JOUT("SYN: transaction_mode_list -> transaction_mode_list_SQL_COMMA_transaction_mode_item \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "transaction_mode_list", ID_TRANSACTION_MODE_LIST, R_TRANSACTION_MODE_LIST_2);
	}
	| transaction_mode_list transaction_mode_item {
		JOUT("SYN: transaction_mode_list -> transaction_mode_list_transaction_mode_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "transaction_mode_list", ID_TRANSACTION_MODE_LIST, R_TRANSACTION_MODE_LIST_3);
	}
	;

ConstraintElem
	: CHECK SQL_LP a_expr SQL_RP ConstraintAttributeSpec {
		JOUT("SYN: ConstraintElem -> CHECK_SQL_LP_a_expr_SQL_RP_ConstraintAttributeSpec \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "ConstraintElem", ID_CONSTRAINTELEM, R_CONSTRAINTELEM_1);
	}
	| UNIQUE SQL_LP columnList SQL_RP opt_definition OptConsTableSpace ConstraintAttributeSpec {
		JOUT("SYN: ConstraintElem -> UNIQUE_SQL_LP_columnList_SQL_RP_opt_definition_OptConsTableSpace_ConstraintAttributeSpec \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "ConstraintElem", ID_CONSTRAINTELEM, R_CONSTRAINTELEM_2);
	}
	| UNIQUE ExistingIndex ConstraintAttributeSpec {
		JOUT("SYN: ConstraintElem -> UNIQUE_ExistingIndex_ConstraintAttributeSpec \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ConstraintElem", ID_CONSTRAINTELEM, R_CONSTRAINTELEM_3);
	}
	| PRIMARY KEY SQL_LP columnList SQL_RP opt_definition OptConsTableSpace ConstraintAttributeSpec {
		JOUT("SYN: ConstraintElem -> PRIMARY_KEY_SQL_LP_columnList_SQL_RP_opt_definition_OptConsTableSpace_ConstraintAttributeSpec \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "ConstraintElem", ID_CONSTRAINTELEM, R_CONSTRAINTELEM_4);
	}
	| PRIMARY KEY ExistingIndex ConstraintAttributeSpec {
		JOUT("SYN: ConstraintElem -> PRIMARY_KEY_ExistingIndex_ConstraintAttributeSpec \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ConstraintElem", ID_CONSTRAINTELEM, R_CONSTRAINTELEM_5);
	}
	| EXCLUDE access_method_clause SQL_LP ExclusionConstraintList SQL_RP opt_definition OptConsTableSpace ExclusionWhereClause ConstraintAttributeSpec {
		JOUT("SYN: ConstraintElem -> EXCLUDE_access_method_clause_SQL_LP_ExclusionConstraintList_SQL_RP_opt_definition_OptConsTableSpace_ExclusionWhereClause_ConstraintAttributeSpec \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "ConstraintElem", ID_CONSTRAINTELEM, R_CONSTRAINTELEM_6);
	}
	| FOREIGN KEY SQL_LP columnList SQL_RP REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec {
		JOUT("SYN: ConstraintElem -> FOREIGN_KEY_SQL_LP_columnList_SQL_RP_REFERENCES_qualified_name_opt_column_list_key_match_key_actions_ConstraintAttributeSpec \n");
		$$ = cons_subtree(11, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
		set_content(&$$, @$.first_line, "ConstraintElem", ID_CONSTRAINTELEM, R_CONSTRAINTELEM_7);
	}
	;

CreateUserStmt
	: CREATE USER RoleId opt_with OptRoleList {
		JOUT("SYN: CreateUserStmt -> CREATE_USER_RoleId_opt_with_OptRoleList \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "CreateUserStmt", ID_CREATEUSERSTMT, R_CREATEUSERSTMT_1);
	}
	;

TriggerFuncArgs
	: TriggerFuncArg {
		JOUT("SYN: TriggerFuncArgs -> TriggerFuncArg \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "TriggerFuncArgs", ID_TRIGGERFUNCARGS, R_TRIGGERFUNCARGS_1);
	}
	| TriggerFuncArgs SQL_COMMA TriggerFuncArg {
		JOUT("SYN: TriggerFuncArgs -> TriggerFuncArgs_SQL_COMMA_TriggerFuncArg \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "TriggerFuncArgs", ID_TRIGGERFUNCARGS, R_TRIGGERFUNCARGS_2);
	}
	| /* empty */ {
		JOUT("SYN: TriggerFuncArgs -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "TriggerFuncArgs", ID_TRIGGERFUNCARGS, R_TRIGGERFUNCARGS__NULL);
	}
	;

reloption_elem
	: ColLabel SQL_EQ def_arg {
		JOUT("SYN: reloption_elem -> ColLabel_SQL_EQ_def_arg \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "reloption_elem", ID_RELOPTION_ELEM, R_RELOPTION_ELEM_1);
	}
	| ColLabel {
		JOUT("SYN: reloption_elem -> ColLabel \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "reloption_elem", ID_RELOPTION_ELEM, R_RELOPTION_ELEM_2);
	}
	| ColLabel SQL_DOT ColLabel SQL_EQ def_arg {
		JOUT("SYN: reloption_elem -> ColLabel_SQL_DOT_ColLabel_SQL_EQ_def_arg \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "reloption_elem", ID_RELOPTION_ELEM, R_RELOPTION_ELEM_3);
	}
	| ColLabel SQL_DOT ColLabel {
		JOUT("SYN: reloption_elem -> ColLabel_SQL_DOT_ColLabel \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "reloption_elem", ID_RELOPTION_ELEM, R_RELOPTION_ELEM_4);
	}
	;

case_arg
	: a_expr {
		JOUT("SYN: case_arg -> a_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "case_arg", ID_CASE_ARG, R_CASE_ARG_1);
	}
	| /* empty */ {
		JOUT("SYN: case_arg -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "case_arg", ID_CASE_ARG, R_CASE_ARG__NULL);
	}
	;

b_expr
	: c_expr {
		JOUT("SYN: b_expr -> c_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_1);
	}
	| b_expr SQL_TYPECAST Typename {
		JOUT("SYN: b_expr -> b_expr_TYPECAST_Typename \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_2);
	}
	| SQL_PLUS b_expr %prec UMINUS {
		JOUT("SYN: b_expr -> SQL_PLUS_b_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_3);
	}
	| SQL_MINUS b_expr %prec UMINUS {
		JOUT("SYN: b_expr -> SQL_MINUS_b_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_4);
	}
	| b_expr SQL_PLUS b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_PLUS_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_5);
	}
	| b_expr SQL_MINUS b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_MINUS_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_6);
	}
	| b_expr SQL_MUL b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_MUL_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_7);
	}
	| b_expr SQL_DIV b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_DIV_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_8);
	}
	| b_expr SQL_MOD b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_MOD_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_9);
	}
	| b_expr SQL_POWER b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_POWER_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_10);
	}
	| b_expr SQL_LT b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_LT_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_11);
	}
	| b_expr SQL_GT b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_GT_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_12);
	}
	| b_expr SQL_EQ b_expr {
		JOUT("SYN: b_expr -> b_expr_SQL_EQ_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_13);
	}
	| b_expr qual_Op b_expr %prec Op {
		JOUT("SYN: b_expr -> b_expr_qual_Op_b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_14);
	}
	| qual_Op b_expr %prec Op {
		JOUT("SYN: b_expr -> qual_Op_b_expr \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_15);
	}
	| b_expr qual_Op %prec POSTFIXOP {
		JOUT("SYN: b_expr -> b_expr_qual_Op \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_16);
	}
	| b_expr IS DISTINCT FROM b_expr %prec IS {
		JOUT("SYN: b_expr -> b_expr_IS_DISTINCT_FROM_b_expr \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_17);
	}
	| b_expr IS NOT DISTINCT FROM b_expr %prec IS {
		JOUT("SYN: b_expr -> b_expr_IS_NOT_DISTINCT_FROM_b_expr \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_18);
	}
	| b_expr IS OF SQL_LP type_list SQL_RP %prec IS {
		JOUT("SYN: b_expr -> b_expr_IS_OF_SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_19);
	}
	| b_expr IS NOT OF SQL_LP type_list SQL_RP %prec IS {
		JOUT("SYN: b_expr -> b_expr_IS_NOT_OF_SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_20);
	}
	| b_expr IS DOCUMENT_P %prec IS {
		JOUT("SYN: b_expr -> b_expr_IS_DOCUMENT_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_21);
	}
	| b_expr IS NOT DOCUMENT_P %prec IS {
		JOUT("SYN: b_expr -> b_expr_IS_NOT_DOCUMENT_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_22);
	}
	| b_expr SQL_GE b_expr {
		JOUT("SYN: b_expr -> b_expr SQL_GE b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_23);
	}
	| b_expr SQL_LE b_expr {
		JOUT("SYN: b_expr -> b_expr SQL_LE b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_24);
	}
	| b_expr SQL_NE b_expr {
		JOUT("SYN: b_expr -> b_expr SQL_NE b_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "b_expr", ID_B_EXPR, R_B_EXPR_25);
	}
	;

set_target
	: ColId opt_indirection {
		JOUT("SYN: set_target -> ColId_opt_indirection \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "set_target", ID_SET_TARGET, R_SET_TARGET_1);
	}
	;

VacuumStmt
	: VACUUM opt_full opt_freeze opt_verbose {
		JOUT("SYN: VacuumStmt -> VACUUM_opt_full_opt_freeze_opt_verbose \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "VacuumStmt", ID_VACUUMSTMT, R_VACUUMSTMT_1);
	}
	| VACUUM opt_full opt_freeze opt_verbose qualified_name {
		JOUT("SYN: VacuumStmt -> VACUUM_opt_full_opt_freeze_opt_verbose_qualified_name \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "VacuumStmt", ID_VACUUMSTMT, R_VACUUMSTMT_2);
	}
	| VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt {
		JOUT("SYN: VacuumStmt -> VACUUM_opt_full_opt_freeze_opt_verbose_AnalyzeStmt \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "VacuumStmt", ID_VACUUMSTMT, R_VACUUMSTMT_3);
	}
	| VACUUM SQL_LP vacuum_option_list SQL_RP {
		JOUT("SYN: VacuumStmt -> VACUUM_SQL_LP_vacuum_option_list_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "VacuumStmt", ID_VACUUMSTMT, R_VACUUMSTMT_4);
	}
	| VACUUM SQL_LP vacuum_option_list SQL_RP qualified_name opt_name_list {
		JOUT("SYN: VacuumStmt -> VACUUM_SQL_LP_vacuum_option_list_SQL_RP_qualified_name_opt_name_list \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "VacuumStmt", ID_VACUUMSTMT, R_VACUUMSTMT_5);
	}
	;

AlterGroupStmt
	: ALTER GROUP_P RoleId add_drop USER name_list {
		JOUT("SYN: AlterGroupStmt -> ALTER_GROUP_P_RoleId_add_drop_USER_name_list \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "AlterGroupStmt", ID_ALTERGROUPSTMT, R_ALTERGROUPSTMT_1);
	}
	;

prep_type_clause
	: SQL_LP type_list SQL_RP {
		JOUT("SYN: prep_type_clause -> SQL_LP_type_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "prep_type_clause", ID_PREP_TYPE_CLAUSE, R_PREP_TYPE_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: prep_type_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "prep_type_clause", ID_PREP_TYPE_CLAUSE, R_PREP_TYPE_CLAUSE__NULL);
	}
	;

analyze_keyword
	: ANALYZE {
		JOUT("SYN: analyze_keyword -> ANALYZE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "analyze_keyword", ID_ANALYZE_KEYWORD, R_ANALYZE_KEYWORD_1);
	}
	| ANALYSE {
		JOUT("SYN: analyze_keyword -> ANALYSE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "analyze_keyword", ID_ANALYZE_KEYWORD, R_ANALYZE_KEYWORD_2);
	}
	;

OptRoleList
	: OptRoleList CreateOptRoleElem {
		JOUT("SYN: OptRoleList -> OptRoleList_CreateOptRoleElem \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptRoleList", ID_OPTROLELIST, R_OPTROLELIST_1);
	}
	| /* empty */ {
		JOUT("SYN: OptRoleList -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptRoleList", ID_OPTROLELIST, R_OPTROLELIST__NULL);
	}
	;

comment_text
	: Sconst {
		JOUT("SYN: comment_text -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_text", ID_COMMENT_TEXT, R_COMMENT_TEXT_1);
	}
	| NULL_P {
		JOUT("SYN: comment_text -> NULL_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_text", ID_COMMENT_TEXT, R_COMMENT_TEXT_2);
	}
	;

AlterOptRoleElem
	: PASSWORD Sconst {
		JOUT("SYN: AlterOptRoleElem -> PASSWORD_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_1);
	}
	| PASSWORD NULL_P {
		JOUT("SYN: AlterOptRoleElem -> PASSWORD_NULL_P \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_2);
	}
	| ENCRYPTED PASSWORD Sconst {
		JOUT("SYN: AlterOptRoleElem -> ENCRYPTED_PASSWORD_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_3);
	}
	| UNENCRYPTED PASSWORD Sconst {
		JOUT("SYN: AlterOptRoleElem -> UNENCRYPTED_PASSWORD_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_4);
	}
	| INHERIT {
		JOUT("SYN: AlterOptRoleElem -> INHERIT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_5);
	}
	| CONNECTION LIMIT SignedIconst {
		JOUT("SYN: AlterOptRoleElem -> CONNECTION_LIMIT_SignedIconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_6);
	}
	| VALID UNTIL Sconst {
		JOUT("SYN: AlterOptRoleElem -> VALID_UNTIL_Sconst \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_7);
	}
	| USER name_list {
		JOUT("SYN: AlterOptRoleElem -> USER_name_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_8);
	}
	| IDENT {
		JOUT("SYN: AlterOptRoleElem -> IDENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "AlterOptRoleElem", ID_ALTEROPTROLEELEM, R_ALTEROPTROLEELEM_9);
	}
	;

Sconst
	: SCONST {
		JOUT("SYN: Sconst -> SCONST \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "Sconst", ID_SCONST, R_SCONST_1);
	}
	;

opclass_drop_list
	: opclass_drop {
		JOUT("SYN: opclass_drop_list -> opclass_drop \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opclass_drop_list", ID_OPCLASS_DROP_LIST, R_OPCLASS_DROP_LIST_1);
	}
	| opclass_drop_list SQL_COMMA opclass_drop {
		JOUT("SYN: opclass_drop_list -> opclass_drop_list_SQL_COMMA_opclass_drop \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opclass_drop_list", ID_OPCLASS_DROP_LIST, R_OPCLASS_DROP_LIST_2);
	}
	;

DropPLangStmt
	: DROP opt_procedural LANGUAGE ColId_or_Sconst opt_drop_behavior {
		JOUT("SYN: DropPLangStmt -> DROP_opt_procedural_LANGUAGE_ColId_or_Sconst_opt_drop_behavior \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropPLangStmt", ID_DROPPLANGSTMT, R_DROPPLANGSTMT_1);
	}
	| DROP opt_procedural LANGUAGE IF_P EXISTS ColId_or_Sconst opt_drop_behavior {
		JOUT("SYN: DropPLangStmt -> DROP_opt_procedural_LANGUAGE_IF_P_EXISTS_ColId_or_Sconst_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DropPLangStmt", ID_DROPPLANGSTMT, R_DROPPLANGSTMT_2);
	}
	;

copy_generic_opt_elem
	: ColLabel copy_generic_opt_arg {
		JOUT("SYN: copy_generic_opt_elem -> ColLabel_copy_generic_opt_arg \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "copy_generic_opt_elem", ID_COPY_GENERIC_OPT_ELEM, R_COPY_GENERIC_OPT_ELEM_1);
	}
	;

DoStmt
	: DO dostmt_opt_list {
		JOUT("SYN: DoStmt -> DO_dostmt_opt_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "DoStmt", ID_DOSTMT, R_DOSTMT_1);
	}
	;

create_extension_opt_list
	: create_extension_opt_list create_extension_opt_item {
		JOUT("SYN: create_extension_opt_list -> create_extension_opt_list_create_extension_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "create_extension_opt_list", ID_CREATE_EXTENSION_OPT_LIST, R_CREATE_EXTENSION_OPT_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: create_extension_opt_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "create_extension_opt_list", ID_CREATE_EXTENSION_OPT_LIST, R_CREATE_EXTENSION_OPT_LIST__NULL);
	}
	;

ColLabel
	: IDENT {
		JOUT("SYN: ColLabel -> IDENT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColLabel", ID_COLLABEL, R_COLLABEL_1);
	}
	| unreserved_keyword {
		JOUT("SYN: ColLabel -> unreserved_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColLabel", ID_COLLABEL, R_COLLABEL_2);
	}
	| col_name_keyword {
		JOUT("SYN: ColLabel -> col_name_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColLabel", ID_COLLABEL, R_COLLABEL_3);
	}
	| type_func_name_keyword {
		JOUT("SYN: ColLabel -> type_func_name_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColLabel", ID_COLLABEL, R_COLLABEL_4);
	}
	| reserved_keyword {
		JOUT("SYN: ColLabel -> reserved_keyword \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ColLabel", ID_COLLABEL, R_COLLABEL_5);
	}
	;

DropStmt
	: DROP drop_type IF_P EXISTS any_name_list opt_drop_behavior {
		JOUT("SYN: DropStmt -> DROP_drop_type_IF_P_EXISTS_any_name_list_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DropStmt", ID_DROPSTMT, R_DROPSTMT_1);
	}
	| DROP drop_type any_name_list opt_drop_behavior {
		JOUT("SYN: DropStmt -> DROP_drop_type_any_name_list_opt_drop_behavior \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "DropStmt", ID_DROPSTMT, R_DROPSTMT_2);
	}
	| DROP INDEX CONCURRENTLY any_name_list opt_drop_behavior {
		JOUT("SYN: DropStmt -> DROP_INDEX_CONCURRENTLY_any_name_list_opt_drop_behavior \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "DropStmt", ID_DROPSTMT, R_DROPSTMT_3);
	}
	| DROP INDEX CONCURRENTLY IF_P EXISTS any_name_list opt_drop_behavior {
		JOUT("SYN: DropStmt -> DROP_INDEX_CONCURRENTLY_IF_P_EXISTS_any_name_list_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DropStmt", ID_DROPSTMT, R_DROPSTMT_4);
	}
	;

generic_option_list
	: generic_option_elem {
		JOUT("SYN: generic_option_list -> generic_option_elem \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "generic_option_list", ID_GENERIC_OPTION_LIST, R_GENERIC_OPTION_LIST_1);
	}
	| generic_option_list SQL_COMMA generic_option_elem {
		JOUT("SYN: generic_option_list -> generic_option_list_SQL_COMMA_generic_option_elem \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "generic_option_list", ID_GENERIC_OPTION_LIST, R_GENERIC_OPTION_LIST_2);
	}
	;

OptTableSpace
	: TABLESPACE name {
		JOUT("SYN: OptTableSpace -> TABLESPACE_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptTableSpace", ID_OPTTABLESPACE, R_OPTTABLESPACE_1);
	}
	| /* empty */ {
		JOUT("SYN: OptTableSpace -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptTableSpace", ID_OPTTABLESPACE, R_OPTTABLESPACE__NULL);
	}
	;

GrantRoleStmt
	: GRANT privilege_list TO name_list opt_grant_admin_option opt_granted_by {
		JOUT("SYN: GrantRoleStmt -> GRANT_privilege_list_TO_name_list_opt_grant_admin_option_opt_granted_by \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "GrantRoleStmt", ID_GRANTROLESTMT, R_GRANTROLESTMT_1);
	}
	;

DropFdwStmt
	: DROP FOREIGN DATA_P WRAPPER name opt_drop_behavior {
		JOUT("SYN: DropFdwStmt -> DROP_FOREIGN_DATA_P_WRAPPER_name_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DropFdwStmt", ID_DROPFDWSTMT, R_DROPFDWSTMT_1);
	}
	| DROP FOREIGN DATA_P WRAPPER IF_P EXISTS name opt_drop_behavior {
		JOUT("SYN: DropFdwStmt -> DROP_FOREIGN_DATA_P_WRAPPER_IF_P_EXISTS_name_opt_drop_behavior \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "DropFdwStmt", ID_DROPFDWSTMT, R_DROPFDWSTMT_2);
	}
	;

IndexStmt
	: CREATE opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause SQL_LP index_params SQL_RP opt_reloptions OptTableSpace where_clause {
		JOUT("SYN: IndexStmt -> CREATE_opt_unique_INDEX_opt_concurrently_opt_index_name_ON_qualified_name_access_method_clause_SQL_LP_index_params_SQL_RP_opt_reloptions_OptTableSpace_where_clause \n");
		$$ = cons_subtree(14, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
		set_content(&$$, @$.first_line, "IndexStmt", ID_INDEXSTMT, R_INDEXSTMT_1);
	}
	;

for_locking_clause
	: for_locking_items {
		JOUT("SYN: for_locking_clause -> for_locking_items \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "for_locking_clause", ID_FOR_LOCKING_CLAUSE, R_FOR_LOCKING_CLAUSE_1);
	}
	| FOR READ ONLY {
		JOUT("SYN: for_locking_clause -> FOR_READ_ONLY \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "for_locking_clause", ID_FOR_LOCKING_CLAUSE, R_FOR_LOCKING_CLAUSE_2);
	}
	;

comment_type
	: COLUMN {
		JOUT("SYN: comment_type -> COLUMN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_1);
	}
	| DATABASE {
		JOUT("SYN: comment_type -> DATABASE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_2);
	}
	| SCHEMA {
		JOUT("SYN: comment_type -> SCHEMA \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_3);
	}
	| INDEX {
		JOUT("SYN: comment_type -> INDEX \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_4);
	}
	| SEQUENCE {
		JOUT("SYN: comment_type -> SEQUENCE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_5);
	}
	| TABLE {
		JOUT("SYN: comment_type -> TABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_6);
	}
	| DOMAIN_P {
		JOUT("SYN: comment_type -> DOMAIN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_7);
	}
	| TYPE_P {
		JOUT("SYN: comment_type -> TYPE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_8);
	}
	| VIEW {
		JOUT("SYN: comment_type -> VIEW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_9);
	}
	| COLLATION {
		JOUT("SYN: comment_type -> COLLATION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_10);
	}
	| CONVERSION_P {
		JOUT("SYN: comment_type -> CONVERSION_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_11);
	}
	| TABLESPACE {
		JOUT("SYN: comment_type -> TABLESPACE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_12);
	}
	| EXTENSION {
		JOUT("SYN: comment_type -> EXTENSION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_13);
	}
	| ROLE {
		JOUT("SYN: comment_type -> ROLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_14);
	}
	| FOREIGN TABLE {
		JOUT("SYN: comment_type -> FOREIGN_TABLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_15);
	}
	| SERVER {
		JOUT("SYN: comment_type -> SERVER \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_16);
	}
	| FOREIGN DATA_P WRAPPER {
		JOUT("SYN: comment_type -> FOREIGN_DATA_P_WRAPPER \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_17);
	}
	| EVENT TRIGGER {
		JOUT("SYN: comment_type -> EVENT_TRIGGER \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "comment_type", ID_COMMENT_TYPE, R_COMMENT_TYPE_18);
	}
	;

func_arg_list
	: func_arg_expr {
		JOUT("SYN: func_arg_list -> func_arg_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "func_arg_list", ID_FUNC_ARG_LIST, R_FUNC_ARG_LIST_1);
	}
	| func_arg_list SQL_COMMA func_arg_expr {
		JOUT("SYN: func_arg_list -> func_arg_list_SQL_COMMA_func_arg_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "func_arg_list", ID_FUNC_ARG_LIST, R_FUNC_ARG_LIST_2);
	}
	;

iso_level
	: READ UNCOMMITTED {
		JOUT("SYN: iso_level -> READ_UNCOMMITTED \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "iso_level", ID_ISO_LEVEL, R_ISO_LEVEL_1);
	}
	| READ COMMITTED {
		JOUT("SYN: iso_level -> READ_COMMITTED \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "iso_level", ID_ISO_LEVEL, R_ISO_LEVEL_2);
	}
	| REPEATABLE READ {
		JOUT("SYN: iso_level -> REPEATABLE_READ \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "iso_level", ID_ISO_LEVEL, R_ISO_LEVEL_3);
	}
	| SERIALIZABLE {
		JOUT("SYN: iso_level -> SERIALIZABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "iso_level", ID_ISO_LEVEL, R_ISO_LEVEL_4);
	}
	;

ctext_row
	: SQL_LP ctext_expr_list SQL_RP {
		JOUT("SYN: ctext_row -> SQL_LP_ctext_expr_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ctext_row", ID_CTEXT_ROW, R_CTEXT_ROW_1);
	}
	;

event_trigger_when_list
	: event_trigger_when_item {
		JOUT("SYN: event_trigger_when_list -> event_trigger_when_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "event_trigger_when_list", ID_EVENT_TRIGGER_WHEN_LIST, R_EVENT_TRIGGER_WHEN_LIST_1);
	}
	| event_trigger_when_list AND event_trigger_when_item {
		JOUT("SYN: event_trigger_when_list -> event_trigger_when_list_AND_event_trigger_when_item \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "event_trigger_when_list", ID_EVENT_TRIGGER_WHEN_LIST, R_EVENT_TRIGGER_WHEN_LIST_2);
	}
	;


// todo
interval_day
	: DAY_P {
		JOUT("SYN: interval_day -> DAY_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "interval_day", ID_INTERVAL_DAY, R_INTERVAL_DAY_1);
	}
	| DAY_P SQL_LP Iconst SQL_RP {
		JOUT("SYN: interval_day -> DAY_P SQL_LP Iconst SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "interval_day", ID_INTERVAL_DAY, R_INTERVAL_DAY_2);
	}
	;

interval_hour
	: HOUR_P {
		JOUT("SYN: interval_hour -> HOUR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "interval_hour", ID_INTERVAL_HOUR, R_INTERVAL_HOUR_1);
	}
	| HOUR_P SQL_LP Iconst SQL_RP {
		JOUT("SYN: interval_hour -> HOUR_P SQL_LP Iconst SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "interval_hour", ID_INTERVAL_HOUR, R_INTERVAL_HOUR_2);
	}
	;

td_trans_date_time 
	: YEAR_P TO MONTH_P {
		JOUT("SYN: td_trans_date_time -> YEAR_P_TO_MONTH_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "td_trans_date_time", ID_TD_TRANS_DATE_TIME, R_TD_TRANS_DATE_TIME_1);
	}
	| interval_day TO HOUR_P {
		JOUT("SYN: td_trans_date_time -> DAY_P_TO_HOUR_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "td_trans_date_time", ID_TD_TRANS_DATE_TIME, R_TD_TRANS_DATE_TIME_2);
	}
	| interval_day TO MINUTE_P {
		JOUT("SYN: td_trans_date_time -> DAY_P_TO_MINUTE_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "td_trans_date_time", ID_TD_TRANS_DATE_TIME, R_TD_TRANS_DATE_TIME_3);
	}
	| interval_day TO interval_second {
		JOUT("SYN: td_trans_date_time -> DAY_P_TO_interval_second \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "td_trans_date_time", ID_TD_TRANS_DATE_TIME, R_TD_TRANS_DATE_TIME_4);
	}
	| interval_hour TO MINUTE_P {
		JOUT("SYN: td_trans_date_time -> HOUR_P_TO_MINUTE_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "td_trans_date_time", ID_TD_TRANS_DATE_TIME, R_TD_TRANS_DATE_TIME_5);
	}
	| interval_hour TO interval_second {
		JOUT("SYN: td_trans_date_time -> HOUR_P_TO_interval_second \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "td_trans_date_time", ID_TD_TRANS_DATE_TIME, R_TD_TRANS_DATE_TIME_6);
	}
	| MINUTE_P TO interval_second {
		JOUT("SYN: td_trans_date_time -> MINUTE_P_TO_interval_second \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "td_trans_date_time", ID_TD_TRANS_DATE_TIME, R_TD_TRANS_DATE_TIME_7);
	}
	;

opt_interval
	: YEAR_P {
		JOUT("SYN: opt_interval -> YEAR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_1);
	}
	| MONTH_P {
		JOUT("SYN: opt_interval -> MONTH_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_2);
	}
	| DAY_P {
		JOUT("SYN: opt_interval -> DAY_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_3);
	}
	| HOUR_P {
		JOUT("SYN: opt_interval -> HOUR_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_4);
	}
	| MINUTE_P {
		JOUT("SYN: opt_interval -> MINUTE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_5);
	}
	| interval_second {
		JOUT("SYN: opt_interval -> interval_second \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_6);
	}
	| YEAR_P TO MONTH_P {
		JOUT("SYN: opt_interval -> YEAR_P_TO_MONTH_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_7);
	}
	| DAY_P TO HOUR_P {
		JOUT("SYN: opt_interval -> DAY_P_TO_HOUR_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_8);
	}
	| DAY_P TO MINUTE_P {
		JOUT("SYN: opt_interval -> DAY_P_TO_MINUTE_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_9);
	}
	| DAY_P TO interval_second {
		JOUT("SYN: opt_interval -> DAY_P_TO_interval_second \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_10);
	}
	| HOUR_P TO MINUTE_P {
		JOUT("SYN: opt_interval -> HOUR_P_TO_MINUTE_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_11);
	}
	| HOUR_P TO interval_second {
		JOUT("SYN: opt_interval -> HOUR_P_TO_interval_second \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_12);
	}
	| MINUTE_P TO interval_second {
		JOUT("SYN: opt_interval -> MINUTE_P_TO_interval_second \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL_13);
	}
	| { //empty
		JOUT("SYN: opt_interval -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_interval", ID_OPT_INTERVAL, R_OPT_INTERVAL__NULL);
	}
	;

target_list
	: target_el {
		JOUT("SYN: target_list -> target_el \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "target_list", ID_TARGET_LIST, R_TARGET_LIST_1);
	}
	| target_list SQL_COMMA target_el {
		JOUT("SYN: target_list -> target_list_SQL_COMMA_target_el \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "target_list", ID_TARGET_LIST, R_TARGET_LIST_2);
	}
	;

security_label
	: Sconst {
		JOUT("SYN: security_label -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label", ID_SECURITY_LABEL, R_SECURITY_LABEL_1);
	}
	| NULL_P {
		JOUT("SYN: security_label -> NULL_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "security_label", ID_SECURITY_LABEL, R_SECURITY_LABEL_2);
	}
	;

VariableResetStmt
	: RESET var_name {
		JOUT("SYN: VariableResetStmt -> RESET_var_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "VariableResetStmt", ID_VARIABLERESETSTMT, R_VARIABLERESETSTMT_1);
	}
	| RESET TIME ZONE {
		JOUT("SYN: VariableResetStmt -> RESET_TIME_ZONE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "VariableResetStmt", ID_VARIABLERESETSTMT, R_VARIABLERESETSTMT_2);
	}
	| RESET TRANSACTION ISOLATION LEVEL {
		JOUT("SYN: VariableResetStmt -> RESET_TRANSACTION_ISOLATION_LEVEL \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "VariableResetStmt", ID_VARIABLERESETSTMT, R_VARIABLERESETSTMT_3);
	}
	| RESET SESSION AUTHORIZATION {
		JOUT("SYN: VariableResetStmt -> RESET_SESSION_AUTHORIZATION \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "VariableResetStmt", ID_VARIABLERESETSTMT, R_VARIABLERESETSTMT_4);
	}
	| RESET ALL {
		JOUT("SYN: VariableResetStmt -> RESET_ALL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "VariableResetStmt", ID_VARIABLERESETSTMT, R_VARIABLERESETSTMT_5);
	}
	;

ConstInterval
	: INTERVAL {
		JOUT("SYN: ConstInterval -> INTERVAL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstInterval", ID_CONSTINTERVAL, R_CONSTINTERVAL_1);
	}
	;

ReindexStmt
	: REINDEX reindex_type qualified_name opt_force {
		JOUT("SYN: ReindexStmt -> REINDEX_reindex_type_qualified_name_opt_force \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ReindexStmt", ID_REINDEXSTMT, R_REINDEXSTMT_1);
	}
	| REINDEX SYSTEM_P name opt_force {
		JOUT("SYN: ReindexStmt -> REINDEX_SYSTEM_P_name_opt_force \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ReindexStmt", ID_REINDEXSTMT, R_REINDEXSTMT_2);
	}
	| REINDEX DATABASE name opt_force {
		JOUT("SYN: ReindexStmt -> REINDEX_DATABASE_name_opt_force \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "ReindexStmt", ID_REINDEXSTMT, R_REINDEXSTMT_3);
	}
	;

GenericType
	: type_function_name opt_type_modifiers {
		JOUT("SYN: GenericType -> type_function_name_opt_type_modifiers \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "GenericType", ID_GENERICTYPE, R_GENERICTYPE_1);
	}
	| type_function_name attrs opt_type_modifiers {
		JOUT("SYN: GenericType -> type_function_name_attrs_opt_type_modifiers \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "GenericType", ID_GENERICTYPE, R_GENERICTYPE_2);
	}
	;

opt_opfamily
	: FAMILY any_name {
		JOUT("SYN: opt_opfamily -> FAMILY_any_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_opfamily", ID_OPT_OPFAMILY, R_OPT_OPFAMILY_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_opfamily -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_opfamily", ID_OPT_OPFAMILY, R_OPT_OPFAMILY__NULL);
	}
	;

FunctionSetResetClause
	: SET set_rest_more {
		JOUT("SYN: FunctionSetResetClause -> SET_set_rest_more \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "FunctionSetResetClause", ID_FUNCTIONSETRESETCLAUSE, R_FUNCTIONSETRESETCLAUSE_1);
	}
	| VariableResetStmt {
		JOUT("SYN: FunctionSetResetClause -> VariableResetStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "FunctionSetResetClause", ID_FUNCTIONSETRESETCLAUSE, R_FUNCTIONSETRESETCLAUSE_2);
	}
	;

ClosePortalStmt
	: CLOSE cursor_name {
		JOUT("SYN: ClosePortalStmt -> CLOSE_cursor_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ClosePortalStmt", ID_CLOSEPORTALSTMT, R_CLOSEPORTALSTMT_1);
	}
	| CLOSE ALL {
		JOUT("SYN: ClosePortalStmt -> CLOSE_ALL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ClosePortalStmt", ID_CLOSEPORTALSTMT, R_CLOSEPORTALSTMT_2);
	}
	;

AlterUserStmt
	: ALTER USER RoleId opt_with AlterOptRoleList {
		JOUT("SYN: AlterUserStmt -> ALTER_USER_RoleId_opt_with_AlterOptRoleList \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterUserStmt", ID_ALTERUSERSTMT, R_ALTERUSERSTMT_1);
	}
	;

ExecuteStmt
	: EXECUTE name execute_param_clause {
		JOUT("SYN: ExecuteStmt -> EXECUTE_name_execute_param_clause \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ExecuteStmt", ID_EXECUTESTMT, R_EXECUTESTMT_1);
	}
	| CREATE OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data {
		JOUT("SYN: ExecuteStmt -> CREATE_OptTemp_TABLE_create_as_target_AS_EXECUTE_name_execute_param_clause_opt_with_data \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "ExecuteStmt", ID_EXECUTESTMT, R_EXECUTESTMT_2);
	}
	;

execute_param_clause
	: SQL_LP expr_list SQL_RP {
		JOUT("SYN: execute_param_clause -> SQL_LP_expr_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "execute_param_clause", ID_EXECUTE_PARAM_CLAUSE, R_EXECUTE_PARAM_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: execute_param_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "execute_param_clause", ID_EXECUTE_PARAM_CLAUSE, R_EXECUTE_PARAM_CLAUSE__NULL);
	}
	;

copy_generic_opt_arg
	: opt_boolean_or_string {
		JOUT("SYN: copy_generic_opt_arg -> opt_boolean_or_string \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg", ID_COPY_GENERIC_OPT_ARG, R_COPY_GENERIC_OPT_ARG_1);
	}
	| NumericOnly {
		JOUT("SYN: copy_generic_opt_arg -> NumericOnly \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg", ID_COPY_GENERIC_OPT_ARG, R_COPY_GENERIC_OPT_ARG_2);
	}
	| SQL_MUL {
		JOUT("SYN: copy_generic_opt_arg -> SQL_MUL \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg", ID_COPY_GENERIC_OPT_ARG, R_COPY_GENERIC_OPT_ARG_3);
	}
	| SQL_LP copy_generic_opt_arg_list SQL_RP {
		JOUT("SYN: copy_generic_opt_arg -> SQL_LP_copy_generic_opt_arg_list_SQL_RP \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg", ID_COPY_GENERIC_OPT_ARG, R_COPY_GENERIC_OPT_ARG_4);
	}
	| /* empty */ {
		JOUT("SYN: copy_generic_opt_arg -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg", ID_COPY_GENERIC_OPT_ARG, R_COPY_GENERIC_OPT_ARG__NULL);
	}
	;

AlterExtensionStmt
	: ALTER EXTENSION name UPDATE alter_extension_opt_list {
		JOUT("SYN: AlterExtensionStmt -> ALTER_EXTENSION_name_UPDATE_alter_extension_opt_list \n");
		$$ = cons_subtree(5, $1, $2, $3, $4, $5);
		set_content(&$$, @$.first_line, "AlterExtensionStmt", ID_ALTEREXTENSIONSTMT, R_ALTEREXTENSIONSTMT_1);
	}
	;

alter_type_cmd
	: ADD_P ATTRIBUTE TableFuncElement opt_drop_behavior {
		JOUT("SYN: alter_type_cmd -> ADD_P_ATTRIBUTE_TableFuncElement_opt_drop_behavior \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_type_cmd", ID_ALTER_TYPE_CMD, R_ALTER_TYPE_CMD_1);
	}
	| DROP ATTRIBUTE IF_P EXISTS ColId opt_drop_behavior {
		JOUT("SYN: alter_type_cmd -> DROP_ATTRIBUTE_IF_P_EXISTS_ColId_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "alter_type_cmd", ID_ALTER_TYPE_CMD, R_ALTER_TYPE_CMD_2);
	}
	| DROP ATTRIBUTE ColId opt_drop_behavior {
		JOUT("SYN: alter_type_cmd -> DROP_ATTRIBUTE_ColId_opt_drop_behavior \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "alter_type_cmd", ID_ALTER_TYPE_CMD, R_ALTER_TYPE_CMD_3);
	}
	| ALTER ATTRIBUTE ColId opt_set_data TYPE_P Typename opt_collate_clause opt_drop_behavior {
		JOUT("SYN: alter_type_cmd -> ALTER_ATTRIBUTE_ColId_opt_set_data_TYPE_P_Typename_opt_collate_clause_opt_drop_behavior \n");
		$$ = cons_subtree(8, $1, $2, $3, $4, $5, $6, $7, $8);
		set_content(&$$, @$.first_line, "alter_type_cmd", ID_ALTER_TYPE_CMD, R_ALTER_TYPE_CMD_4);
	}
	;

opt_equal
	: SQL_EQ {
		JOUT("SYN: opt_equal -> SQL_EQ \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_equal", ID_OPT_EQUAL, R_OPT_EQUAL_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_equal -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_equal", ID_OPT_EQUAL, R_OPT_EQUAL__NULL);
	}
	;

opt_collate
	: COLLATE any_name {
		JOUT("SYN: opt_collate -> COLLATE_any_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_collate", ID_OPT_COLLATE, R_OPT_COLLATE_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_collate -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_collate", ID_OPT_COLLATE, R_OPT_COLLATE__NULL);
	}
	;

insert_column_item
	: ColId opt_indirection {
		JOUT("SYN: insert_column_item -> ColId_opt_indirection \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "insert_column_item", ID_INSERT_COLUMN_ITEM, R_INSERT_COLUMN_ITEM_1);
	}
	;

dostmt_opt_list
	: dostmt_opt_item {
		JOUT("SYN: dostmt_opt_list -> dostmt_opt_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "dostmt_opt_list", ID_DOSTMT_OPT_LIST, R_DOSTMT_OPT_LIST_1);
	}
	| dostmt_opt_list dostmt_opt_item {
		JOUT("SYN: dostmt_opt_list -> dostmt_opt_list_dostmt_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "dostmt_opt_list", ID_DOSTMT_OPT_LIST, R_DOSTMT_OPT_LIST_2);
	}
	;

ConstraintAttributeElem
	: NOT DEFERRABLE {
		JOUT("SYN: ConstraintAttributeElem -> NOT_DEFERRABLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttributeElem", ID_CONSTRAINTATTRIBUTEELEM, R_CONSTRAINTATTRIBUTEELEM_1);
	}
	| DEFERRABLE {
		JOUT("SYN: ConstraintAttributeElem -> DEFERRABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ConstraintAttributeElem", ID_CONSTRAINTATTRIBUTEELEM, R_CONSTRAINTATTRIBUTEELEM_2);
	}
	| INITIALLY IMMEDIATE {
		JOUT("SYN: ConstraintAttributeElem -> INITIALLY_IMMEDIATE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttributeElem", ID_CONSTRAINTATTRIBUTEELEM, R_CONSTRAINTATTRIBUTEELEM_3);
	}
	| INITIALLY DEFERRED {
		JOUT("SYN: ConstraintAttributeElem -> INITIALLY_DEFERRED \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttributeElem", ID_CONSTRAINTATTRIBUTEELEM, R_CONSTRAINTATTRIBUTEELEM_4);
	}
	| NOT VALID {
		JOUT("SYN: ConstraintAttributeElem -> NOT_VALID \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttributeElem", ID_CONSTRAINTATTRIBUTEELEM, R_CONSTRAINTATTRIBUTEELEM_5);
	}
	| NO INHERIT {
		JOUT("SYN: ConstraintAttributeElem -> NO_INHERIT \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "ConstraintAttributeElem", ID_CONSTRAINTATTRIBUTEELEM, R_CONSTRAINTATTRIBUTEELEM_6);
	}
	;

relation_expr_list
	: relation_expr {
		JOUT("SYN: relation_expr_list -> relation_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "relation_expr_list", ID_RELATION_EXPR_LIST, R_RELATION_EXPR_LIST_1);
	}
	| relation_expr_list SQL_COMMA relation_expr {
		JOUT("SYN: relation_expr_list -> relation_expr_list_SQL_COMMA_relation_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "relation_expr_list", ID_RELATION_EXPR_LIST, R_RELATION_EXPR_LIST_2);
	}
	;

RuleActionStmtOrEmpty
	: RuleActionStmt {
		JOUT("SYN: RuleActionStmtOrEmpty -> RuleActionStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "RuleActionStmtOrEmpty", ID_RULEACTIONSTMTOREMPTY, R_RULEACTIONSTMTOREMPTY_1);
	}
	| /* empty */ {
		JOUT("SYN: RuleActionStmtOrEmpty -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "RuleActionStmtOrEmpty", ID_RULEACTIONSTMTOREMPTY, R_RULEACTIONSTMTOREMPTY__NULL);
	}
	;

qual_Op
	: Op {
		JOUT("SYN: qual_Op -> Op \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "qual_Op", ID_QUAL_OP, R_QUAL_OP_1);
	}
	| OPERATOR SQL_LP any_operator SQL_RP {
		JOUT("SYN: qual_Op -> OPERATOR_SQL_LP_any_operator_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "qual_Op", ID_QUAL_OP, R_QUAL_OP_2);
	}
	;

relation_expr
	: qualified_name {
		JOUT("SYN: relation_expr -> qualified_name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "relation_expr", ID_RELATION_EXPR, R_RELATION_EXPR_1);
	}
	| qualified_name SQL_MUL {
		JOUT("SYN: relation_expr -> qualified_name_SQL_MUL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "relation_expr", ID_RELATION_EXPR, R_RELATION_EXPR_2);
	}
	| ONLY qualified_name {
		JOUT("SYN: relation_expr -> ONLY_qualified_name \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "relation_expr", ID_RELATION_EXPR, R_RELATION_EXPR_3);
	}
	| ONLY SQL_LP qualified_name SQL_RP {
		JOUT("SYN: relation_expr -> ONLY_SQL_LP_qualified_name_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "relation_expr", ID_RELATION_EXPR, R_RELATION_EXPR_4);
	}
	;

alterdb_opt_list
	: alterdb_opt_list alterdb_opt_item {
		JOUT("SYN: alterdb_opt_list -> alterdb_opt_list_alterdb_opt_item \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "alterdb_opt_list", ID_ALTERDB_OPT_LIST, R_ALTERDB_OPT_LIST_1);
	}
	| /* empty */ {
		JOUT("SYN: alterdb_opt_list -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "alterdb_opt_list", ID_ALTERDB_OPT_LIST, R_ALTERDB_OPT_LIST__NULL);
	}
	;

copy_generic_opt_arg_list
	: copy_generic_opt_arg_list_item {
		JOUT("SYN: copy_generic_opt_arg_list -> copy_generic_opt_arg_list_item \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg_list", ID_COPY_GENERIC_OPT_ARG_LIST, R_COPY_GENERIC_OPT_ARG_LIST_1);
	}
	| copy_generic_opt_arg_list SQL_COMMA copy_generic_opt_arg_list_item {
		JOUT("SYN: copy_generic_opt_arg_list -> copy_generic_opt_arg_list_SQL_COMMA_copy_generic_opt_arg_list_item \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "copy_generic_opt_arg_list", ID_COPY_GENERIC_OPT_ARG_LIST, R_COPY_GENERIC_OPT_ARG_LIST_2);
	}
	;

opt_lock
	: IN_P lock_type MODE {
		JOUT("SYN: opt_lock -> IN_P_lock_type_MODE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_lock", ID_OPT_LOCK, R_OPT_LOCK_1);
	}
	| FOR lock_type {
		JOUT("SYN: opt_lock -> FOR_lock_type \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_lock", ID_OPT_LOCK, R_OPT_LOCK_2);
	}
	| IN_P lock_type {
		JOUT("SYN: opt_lock -> IN_P_lock_type \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_lock", ID_OPT_LOCK, R_OPT_LOCK_3);
	}
	| FOR lock_type MODE {
		JOUT("SYN: opt_lock -> FOR_lock_type_MODE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_lock", ID_OPT_LOCK, R_OPT_LOCK_4);
	}
	| /* empty */ {
		JOUT("SYN: opt_lock -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_lock", ID_OPT_LOCK, R_OPT_LOCK__NULL);
	}
	;

ExplainableStmt
	: SelectStmt {
		JOUT("SYN: ExplainableStmt -> SelectStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExplainableStmt", ID_EXPLAINABLESTMT, R_EXPLAINABLESTMT_1);
	}
	| InsertStmt {
		JOUT("SYN: ExplainableStmt -> InsertStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExplainableStmt", ID_EXPLAINABLESTMT, R_EXPLAINABLESTMT_2);
	}
	| UpdateStmt {
		JOUT("SYN: ExplainableStmt -> UpdateStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExplainableStmt", ID_EXPLAINABLESTMT, R_EXPLAINABLESTMT_3);
	}
	| DeleteStmt {
		JOUT("SYN: ExplainableStmt -> DeleteStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExplainableStmt", ID_EXPLAINABLESTMT, R_EXPLAINABLESTMT_4);
	}
	| DeclareCursorStmt {
		JOUT("SYN: ExplainableStmt -> DeclareCursorStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExplainableStmt", ID_EXPLAINABLESTMT, R_EXPLAINABLESTMT_5);
	}
	| CreateAsStmt {
		JOUT("SYN: ExplainableStmt -> CreateAsStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExplainableStmt", ID_EXPLAINABLESTMT, R_EXPLAINABLESTMT_6);
	}
	| ExecuteStmt {
		JOUT("SYN: ExplainableStmt -> ExecuteStmt \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ExplainableStmt", ID_EXPLAINABLESTMT, R_EXPLAINABLESTMT_7);
	}
	;

opt_existing_window_name
	: ColId {
		JOUT("SYN: opt_existing_window_name -> ColId \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_existing_window_name", ID_OPT_EXISTING_WINDOW_NAME, R_OPT_EXISTING_WINDOW_NAME_1);
	}
	| %prec Op {
		JOUT("SYN: opt_existing_window_name ->  \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_existing_window_name", ID_OPT_EXISTING_WINDOW_NAME, R_OPT_EXISTING_WINDOW_NAME_2);
	}
	;

columnDef
	: ColId Typename create_generic_options ColQualList {
		JOUT("SYN: columnDef -> ColId_Typename_create_generic_options_ColQualList \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "columnDef", ID_COLUMNDEF, R_COLUMNDEF_1);
	}
	;

opt_timezone
	: WITH_TIME ZONE {
		JOUT("SYN: opt_timezone -> WITH_TIME_ZONE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_timezone", ID_OPT_TIMEZONE, R_OPT_TIMEZONE_1);
	}
	| WITHOUT TIME ZONE {
		JOUT("SYN: opt_timezone -> WITHOUT_TIME_ZONE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_timezone", ID_OPT_TIMEZONE, R_OPT_TIMEZONE_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_timezone -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_timezone", ID_OPT_TIMEZONE, R_OPT_TIMEZONE__NULL);
	}
	;

SelectStmt
	: select_no_parens %prec UMINUS {
		JOUT("SYN: SelectStmt -> select_no_parens \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SelectStmt", ID_SELECTSTMT, R_SELECTSTMT_1);
	}
	| select_with_parens %prec UMINUS {
		JOUT("SYN: SelectStmt -> select_with_parens \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "SelectStmt", ID_SELECTSTMT, R_SELECTSTMT_2);
	}
	;

opt_column
	: COLUMN {
		JOUT("SYN: opt_column -> COLUMN \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_column", ID_OPT_COLUMN, R_OPT_COLUMN_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_column -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_column", ID_OPT_COLUMN, R_OPT_COLUMN__NULL);
	}
	;

ForeignTableElement
	: columnDef {
		JOUT("SYN: ForeignTableElement -> columnDef \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ForeignTableElement", ID_FOREIGNTABLEELEMENT, R_FOREIGNTABLEELEMENT_1);
	}
	;

opt_charset
	: CHARACTER SET ColId {
		JOUT("SYN: opt_charset -> CHARACTER_SET_ColId \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_charset", ID_OPT_CHARSET, R_OPT_CHARSET_1);
	}
	
	| CHARACTER SET TD_CharacterSetTypes OptCasespecific {
		// TODO3
		JOUT("SYN: opt_charset -> CHARACTER_SET_TD_CharacterSetTypes \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opt_charset", ID_OPT_CHARSET, R_OPT_CHARSET_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_charset -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_charset", ID_OPT_CHARSET, R_OPT_CHARSET__NULL);
	}
	;

OptCasespecific 
	: CASESPECIFIC {
		// todo3
		JOUT("SYN: OptCasespecific -> CASESPECIFIC \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptCasespecific", ID_OPTCASESPECIFIC, R_OPTCASESPECIFIC_1);
	}
	| NOT CASESPECIFIC %prec CASESPECIFIC {
		JOUT("SYN: OptCasespecific -> NOT CASESPECIFIC \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptCasespecific", ID_OPTCASESPECIFIC, R_OPTCASESPECIFIC_2);
	}
	//  JOE TODO
	|{ // cause a s/r conflict
		JOUT("SYN: OptCasespecific -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptCasespecific", ID_OPTCASESPECIFIC, R_OPTCASESPECIFIC__NULL);
	}
	;

opt_frame_clause
	: RANGE frame_extent {
		JOUT("SYN: opt_frame_clause -> RANGE_frame_extent \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_frame_clause", ID_OPT_FRAME_CLAUSE, R_OPT_FRAME_CLAUSE_1);
	}
	| ROWS frame_extent {
		JOUT("SYN: opt_frame_clause -> ROWS_frame_extent \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_frame_clause", ID_OPT_FRAME_CLAUSE, R_OPT_FRAME_CLAUSE_2);
	}
	| /* empty */ {
		JOUT("SYN: opt_frame_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_frame_clause", ID_OPT_FRAME_CLAUSE, R_OPT_FRAME_CLAUSE__NULL);
	}
	;

ExistingIndex
	: USING INDEX index_name {
		JOUT("SYN: ExistingIndex -> USING_INDEX_index_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ExistingIndex", ID_EXISTINGINDEX, R_EXISTINGINDEX_1);
	}
	;

for_locking_item
	: FOR UPDATE locked_rels_list opt_nowait {
		JOUT("SYN: for_locking_item -> FOR_UPDATE_locked_rels_list_opt_nowait \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "for_locking_item", ID_FOR_LOCKING_ITEM, R_FOR_LOCKING_ITEM_1);
	}
	| FOR SHARE locked_rels_list opt_nowait {
		JOUT("SYN: for_locking_item -> FOR_SHARE_locked_rels_list_opt_nowait \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "for_locking_item", ID_FOR_LOCKING_ITEM, R_FOR_LOCKING_ITEM_2);
	}
	;

select_offset_value
	: a_expr {
		JOUT("SYN: select_offset_value -> a_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "select_offset_value", ID_SELECT_OFFSET_VALUE, R_SELECT_OFFSET_VALUE_1);
	}
	;

returning_clause
	: RETURNING target_list {
		JOUT("SYN: returning_clause -> RETURNING_target_list \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "returning_clause", ID_RETURNING_CLAUSE, R_RETURNING_CLAUSE_1);
	}
	| /* empty */ {
		JOUT("SYN: returning_clause -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "returning_clause", ID_RETURNING_CLAUSE, R_RETURNING_CLAUSE__NULL);
	}
	;

RuleStmt
	: CREATE opt_or_replace RULE name AS ON event TO qualified_name where_clause DO opt_instead RuleActionList {
		JOUT("SYN: RuleStmt -> CREATE_opt_or_replace_RULE_name_AS_ON_event_TO_qualified_name_where_clause_DO_opt_instead_RuleActionList \n");
		$$ = cons_subtree(13, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
		set_content(&$$, @$.first_line, "RuleStmt", ID_RULESTMT, R_RULESTMT_1);
	}
	;

var_value
	: opt_boolean_or_string {
		JOUT("SYN: var_value -> opt_boolean_or_string \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "var_value", ID_VAR_VALUE, R_VAR_VALUE_1);
	}
	| NumericOnly {
		JOUT("SYN: var_value -> NumericOnly \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "var_value", ID_VAR_VALUE, R_VAR_VALUE_2);
	}
	;

qual_all_Op
	: all_Op {
		JOUT("SYN: qual_all_Op -> all_Op \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "qual_all_Op", ID_QUAL_ALL_OP, R_QUAL_ALL_OP_1);
	}
	| OPERATOR SQL_LP any_operator SQL_RP {
		JOUT("SYN: qual_all_Op -> OPERATOR_SQL_LP_any_operator_SQL_RP \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "qual_all_Op", ID_QUAL_ALL_OP, R_QUAL_ALL_OP_2);
	}
	;

drop_type
	: TABLE {
		JOUT("SYN: drop_type -> TABLE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_1);
	}
	| SEQUENCE {
		JOUT("SYN: drop_type -> SEQUENCE \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_2);
	}
	| VIEW {
		JOUT("SYN: drop_type -> VIEW \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_3);
	}
	| INDEX {
		JOUT("SYN: drop_type -> INDEX \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_4);
	}
	| FOREIGN TABLE {
		JOUT("SYN: drop_type -> FOREIGN_TABLE \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_5);
	}
	| EVENT TRIGGER {
		JOUT("SYN: drop_type -> EVENT_TRIGGER \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_6);
	}
	| TYPE_P {
		JOUT("SYN: drop_type -> TYPE_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_7);
	}
	| DOMAIN_P {
		JOUT("SYN: drop_type -> DOMAIN_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_8);
	}
	| COLLATION {
		JOUT("SYN: drop_type -> COLLATION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_9);
	}
	| CONVERSION_P {
		JOUT("SYN: drop_type -> CONVERSION_P \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_10);
	}
	| SCHEMA {
		JOUT("SYN: drop_type -> SCHEMA \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_11);
	}
	| EXTENSION {
		JOUT("SYN: drop_type -> EXTENSION \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_12);
	}
	| TEXT_P SEARCH PARSER {
		JOUT("SYN: drop_type -> TEXT_P_SEARCH_PARSER \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_13);
	}
	| TEXT_P SEARCH DICTIONARY {
		JOUT("SYN: drop_type -> TEXT_P_SEARCH_DICTIONARY \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_14);
	}
	| TEXT_P SEARCH TEMPLATE {
		JOUT("SYN: drop_type -> TEXT_P_SEARCH_TEMPLATE \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_15);
	}
	| TEXT_P SEARCH CONFIGURATION {
		JOUT("SYN: drop_type -> TEXT_P_SEARCH_CONFIGURATION \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "drop_type", ID_DROP_TYPE, R_DROP_TYPE_16);
	}
	;

name_list
	: name {
		JOUT("SYN: name_list -> name \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "name_list", ID_NAME_LIST, R_NAME_LIST_1);
	}
	| name_list SQL_COMMA name {
		JOUT("SYN: name_list -> name_list_SQL_COMMA_name \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "name_list", ID_NAME_LIST, R_NAME_LIST_2);
	}
	;

opt_if_exists
	: IF_P EXISTS {
		JOUT("SYN: opt_if_exists -> IF_P_EXISTS \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "opt_if_exists", ID_OPT_IF_EXISTS, R_OPT_IF_EXISTS_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_if_exists -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_if_exists", ID_OPT_IF_EXISTS, R_OPT_IF_EXISTS__NULL);
	}
	;

opt_restrict
	: RESTRICT {
		JOUT("SYN: opt_restrict -> RESTRICT \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "opt_restrict", ID_OPT_RESTRICT, R_OPT_RESTRICT_1);
	}
	| /* empty */ {
		JOUT("SYN: opt_restrict -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_restrict", ID_OPT_RESTRICT, R_OPT_RESTRICT__NULL);
	}
	;

DropOpClassStmt
	: DROP OPERATOR CLASS any_name USING access_method opt_drop_behavior {
		JOUT("SYN: DropOpClassStmt -> DROP_OPERATOR_CLASS_any_name_USING_access_method_opt_drop_behavior \n");
		$$ = cons_subtree(7, $1, $2, $3, $4, $5, $6, $7);
		set_content(&$$, @$.first_line, "DropOpClassStmt", ID_DROPOPCLASSSTMT, R_DROPOPCLASSSTMT_1);
	}
	| DROP OPERATOR CLASS IF_P EXISTS any_name USING access_method opt_drop_behavior {
		JOUT("SYN: DropOpClassStmt -> DROP_OPERATOR_CLASS_IF_P_EXISTS_any_name_USING_access_method_opt_drop_behavior \n");
		$$ = cons_subtree(9, $1, $2, $3, $4, $5, $6, $7, $8, $9);
		set_content(&$$, @$.first_line, "DropOpClassStmt", ID_DROPOPCLASSSTMT, R_DROPOPCLASSSTMT_2);
	}
	;

ctext_expr_list
	: ctext_expr {
		JOUT("SYN: ctext_expr_list -> ctext_expr \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "ctext_expr_list", ID_CTEXT_EXPR_LIST, R_CTEXT_EXPR_LIST_1);
	}
	| ctext_expr_list SQL_COMMA ctext_expr {
		JOUT("SYN: ctext_expr_list -> ctext_expr_list_SQL_COMMA_ctext_expr \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "ctext_expr_list", ID_CTEXT_EXPR_LIST, R_CTEXT_EXPR_LIST_2);
	}
	;

InsertStmt
	: opt_with_clause INSERT INTO qualified_name insert_rest returning_clause {
		JOUT("SYN: InsertStmt -> opt_with_clause_INSERT_INTO_qualified_name_insert_rest_returning_clause \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "InsertStmt", ID_INSERTSTMT, R_INSERTSTMT_1);
	}
	| opt_with_clause INSERT qualified_name insert_rest returning_clause {
		JOUT("SYN: InsertStmt -> opt_with_clause_INSERT_qualified_name_insert_rest_returning_clause \n");
	}
	;

dostmt_opt_item
	: Sconst {
		JOUT("SYN: dostmt_opt_item -> Sconst \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "dostmt_opt_item", ID_DOSTMT_OPT_ITEM, R_DOSTMT_OPT_ITEM_1);
	}
	| LANGUAGE ColId_or_Sconst {
		JOUT("SYN: dostmt_opt_item -> LANGUAGE_ColId_or_Sconst \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "dostmt_opt_item", ID_DOSTMT_OPT_ITEM, R_DOSTMT_OPT_ITEM_2);
	}
	;

opt_xml_root_standalone
	: SQL_COMMA STANDALONE_P YES_P {
		JOUT("SYN: opt_xml_root_standalone -> SQL_COMMA_STANDALONE_P_YES_P \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_xml_root_standalone", ID_OPT_XML_ROOT_STANDALONE, R_OPT_XML_ROOT_STANDALONE_1);
	}
	| SQL_COMMA STANDALONE_P NO {
		JOUT("SYN: opt_xml_root_standalone -> SQL_COMMA_STANDALONE_P_NO \n");
		$$ = cons_subtree(3, $1, $2, $3);
		set_content(&$$, @$.first_line, "opt_xml_root_standalone", ID_OPT_XML_ROOT_STANDALONE, R_OPT_XML_ROOT_STANDALONE_2);
	}
	| SQL_COMMA STANDALONE_P NO VALUE_P {
		JOUT("SYN: opt_xml_root_standalone -> SQL_COMMA_STANDALONE_P_NO_VALUE_P \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "opt_xml_root_standalone", ID_OPT_XML_ROOT_STANDALONE, R_OPT_XML_ROOT_STANDALONE_3);
	}
	| /* empty */ {
		JOUT("SYN: opt_xml_root_standalone -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "opt_xml_root_standalone", ID_OPT_XML_ROOT_STANDALONE, R_OPT_XML_ROOT_STANDALONE__NULL);
	}
	;

OptTemp
	: TEMPORARY {
		JOUT("SYN: OptTemp -> TEMPORARY \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_1);
	}
	| TEMP {
		JOUT("SYN: OptTemp -> TEMP \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_2);
	}
	| LOCAL TEMPORARY {
		JOUT("SYN: OptTemp -> LOCAL_TEMPORARY \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_3);
	}
	| LOCAL TEMP {
		JOUT("SYN: OptTemp -> LOCAL_TEMP \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_4);
	}
	| GLOBAL TEMPORARY {
		JOUT("SYN: OptTemp -> GLOBAL_TEMPORARY \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_5);
	}
	| GLOBAL TEMP {
		JOUT("SYN: OptTemp -> GLOBAL_TEMP \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_6);
	}
	| UNLOGGED {
		JOUT("SYN: OptTemp -> UNLOGGED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_7);
	}
	| VOLATILE {
		JOUT("SYN: OptTemp -> UNLOGGED \n");
		$$ = cons_subtree(1, $1);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP_8);
	}
	| /* empty */ {
		JOUT("SYN: OptTemp -> NULL \n");
		$$ = cons_subtree(1, NULL);
		set_content(&$$, @$.first_line, "OptTemp", ID_OPTTEMP, R_OPTTEMP__NULL);
	}
	;
/*
TranslationsTypes
	: LATIN_TO_GRAPHIC
	| LATIN_TO_KANJISJIS
	| LATIN_TO_UNICODE
	| KANJI1_KanjiEBCDIC_TO_UNICODE
	| KANJI1_KanjiEUC_TO_UNICODE
	| KANJI1_KANJISJIS_TO_UNICODE
	| KANJI1_SBC_TO_UNICODE
	| KANJISJIS_TO_LATIN
	| KANJISJIS_TO_GRAPHIC
	| KANJISJIS_TO_UNICODE
	| GRAPHIC_TO_LATIN
	| GRAPHIC_TO_KANJISJIS
	| GRAPHIC_TO_UNICODE
	| GRAPHIC_TO_UNICODE_PadSpace
	| UNICODE_TO_LATIN
	| UNICODE_TO_KANJI1_KanjiEBCDIC
	| UNICODE_TO_KANJI1_KanjiEUC
	| UNICODE_TO_KANJI1_KANJISJIS
	| UNICODE_TO_KANJI1_SBC
	| UNICODE_TO_GRAPHIC
	| UNICODE_TO_KANJISJIS
	| UNICODE_TO_UNICODE_Fullwidth
	| UNICODE_TO_UNICODE_Halfwidth
	| UNICODE_TO_UNICODE_FoldSpace
	| UNICODE_TO_GRAPHIC_PadGraphic
	| UNICODE_TO_GRAPHIC_VarGraphic 
*/

DropForeignServerStmt
	: DROP SERVER name opt_drop_behavior {
		JOUT("SYN: DropForeignServerStmt -> DROP_SERVER_name_opt_drop_behavior \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "DropForeignServerStmt", ID_DROPFOREIGNSERVERSTMT, R_DROPFOREIGNSERVERSTMT_1);
	}
	| DROP SERVER IF_P EXISTS name opt_drop_behavior {
		JOUT("SYN: DropForeignServerStmt -> DROP_SERVER_IF_P_EXISTS_name_opt_drop_behavior \n");
		$$ = cons_subtree(6, $1, $2, $3, $4, $5, $6);
		set_content(&$$, @$.first_line, "DropForeignServerStmt", ID_DROPFOREIGNSERVERSTMT, R_DROPFOREIGNSERVERSTMT_2);
	}
	;

DropAssertStmt
	: DROP ASSERTION name opt_drop_behavior {
		JOUT("SYN: DropAssertStmt -> DROP_ASSERTION_name_opt_drop_behavior \n");
		$$ = cons_subtree(4, $1, $2, $3, $4);
		set_content(&$$, @$.first_line, "DropAssertStmt", ID_DROPASSERTSTMT, R_DROPASSERTSTMT_1);
	}
	;

UnlistenStmt
	: UNLISTEN ColId {
		JOUT("SYN: UnlistenStmt -> UNLISTEN_ColId \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "UnlistenStmt", ID_UNLISTENSTMT, R_UNLISTENSTMT_1);
	}
	| UNLISTEN SQL_MUL {
		JOUT("SYN: UnlistenStmt -> UNLISTEN_SQL_MUL \n");
		$$ = cons_subtree(2, $1, $2);
		set_content(&$$, @$.first_line, "UnlistenStmt", ID_UNLISTENSTMT, R_UNLISTENSTMT_2);
	}
	;



%%

yyerror(char *msg) 
{
	g_error ++;
#ifndef JTEST
	fprintf(stderr, "[%d]Error type at line %d: %s\n", g_error, g_lineno, msg);
#endif
}
